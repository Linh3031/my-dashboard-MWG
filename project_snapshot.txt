--- START FILE: ./.vscode/settings.json ---
{
    "liveServer.settings.port": 5505
}
--- END FILE: ./.vscode/settings.json ---

--- START FILE: ./Firebase.js ---
// Version 3.3 - Add cloud functions for competitionNameMappings
// Version 3.2 - Modify incrementCounter to support user-specific actionsTaken
// Version 3.1 - Add savePastedDataToFirestore for text content sync
// Version 3.0 - Implement Cloud Storage upload & save metadata to Firestore
// Version 2.5 - Add detailed try...catch for setDoc in saveDataByWarehouse
// Version 2.4 - Fix syntax error in initCore()
// Version 2.3 - Add version and timestamp fields for data synchronization
// MODULE: FIREBASE
// Chịu trách nhiệm kết nối, thiết lập listener với Firebase.
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getAuth } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { getFirestore, collection, onSnapshot, addDoc, doc, updateDoc, arrayUnion, serverTimestamp, query, orderBy, setDoc, increment, getDocs, getDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";
import { appState } from './state.js';
import { ui } from './ui.js';

const firebase = {
    async initCore() {
        const firebaseConfig = {
          apiKey: "AIzaSyAQ3TWcpa4AnTN-32igGseYDlXrCf1BVew", // Replace with your actual config if needed
          authDomain: "qlst-9e6bd.firebaseapp.com",
          projectId: "qlst-9e6bd",
          storageBucket: "qlst-9e6bd.firebasestorage.app",
          messagingSenderId: "2316705291",
          appId: "1:2316705291:web:ebec2963816aea7585b10e",
          measurementId: "G-M0SM0XHCEK"
        };
        try {
            const firebaseApp = initializeApp(firebaseConfig);
            appState.auth = getAuth(firebaseApp);
            appState.db = getFirestore(firebaseApp);
            appState.storage = getStorage(firebaseApp);
            console.log("Firebase core services initialized successfully!");
        } catch (error) {
            console.error("Firebase core initialization failed:", error);
            ui.showNotification(error.message || "Không thể khởi tạo kết nối Firebase.", "error");
            throw error;
        }
    },

    setupListeners() {
        console.log("Setting up Firebase listeners...");
        if (!appState.db) {
            console.error("Firestore DB instance not available for setting up listeners.");
            return;
        }
        if (!appState.auth?.currentUser) {
             console.warn("Attempting to set up listeners before authentication is complete. This might lead to permission errors initially.");
        }

        const feedbackQuery = query(collection(appState.db, "feedback"), orderBy("timestamp", "desc"));
        onSnapshot(feedbackQuery, (querySnapshot) => {
            console.log("Feedback listener received data.");
            appState.feedbackList = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                appState.feedbackList.push({ id: doc.id, ...data, timestamp: data.timestamp?.toDate() });
            });
            // Chỉ render nếu đang ở trang chủ
            if (document.getElementById('home-section')?.classList.contains('hidden') === false) {
                 ui.renderFeedbackSection(); // Giả sử hàm này nằm trong ui object
            }
        }, (error) => {
            console.error("Error listening to feedback collection: ", error);
            if (error.code !== 'permission-denied') {
                 ui.showNotification("Lỗi khi tải danh sách góp ý.", "error");
            }
        });

        const helpContentRef = collection(appState.db, "help_content");
        onSnapshot(helpContentRef, (querySnapshot) => {
            console.log("Help content listener received data.");
            let contentUpdated = false;
            querySnapshot.forEach((doc) => {
                if (appState.helpContent.hasOwnProperty(doc.id)) {
                    appState.helpContent[doc.id] = doc.data().content;
                    contentUpdated = true;
                }
            });
            // Chỉ render nếu admin đang ở trang khai báo
            if (contentUpdated && appState.isAdmin && document.getElementById('declaration-section')?.classList.contains('hidden') === false) {
                 ui.renderAdminHelpEditors(); // Giả sử hàm này nằm trong ui object
            }
        }, (error) => {
            console.error("Error listening to help_content collection: ", error);
            if (error.code !== 'permission-denied') {
                ui.showNotification("Lỗi khi tải nội dung hướng dẫn.", "error");
            }
        });

        const statsRef = doc(appState.db, "analytics", "site_stats");
        onSnapshot(statsRef, (docSnap) => {
            if (docSnap.exists()) {
               console.log("Stats listener received data.");
               const statsData = docSnap.data();
                ui.updateUsageCounter(statsData); // Giả sử hàm này nằm trong ui object
            } else {
                console.log("Không tìm thấy document thống kê.");
            }
        }, (error) => {
             console.error("Error listening to site_stats document: ", error);
             if (error.code !== 'permission-denied') {
                 ui.showNotification("Lỗi khi tải số liệu thống kê.", "error");
            }
        });

        console.log("Firebase listeners setup initiated.");
    },

    // *** MODIFIED FUNCTION (v3.2) ***
    /**
     * Tăng giá trị một trường số trong Firestore.
     * Nếu fieldName là 'actionsTaken' và có email, tăng bộ đếm cho user đó.
     * Ngược lại, tăng bộ đếm global trong 'analytics/site_stats'.
     * @param {string} fieldName Tên trường cần tăng (vd: 'pageLoads', 'actionsTaken').
     * @param {string} [email=null] Email của người dùng (chỉ dùng cho actionsTaken).
     */
    async incrementCounter(fieldName, email = null) {
        if (!appState.db || !fieldName) return;

        let docRef;
        const dataToUpdate = { [fieldName]: increment(1) };

        // ** Logic mới: Kiểm tra nếu là actionsTaken và có email **
        if (fieldName === 'actionsTaken' && email) {
            docRef = doc(appState.db, "users", email);
            console.log(`Incrementing actionsTaken for user: ${email}`);
        } else if (fieldName === 'actionsTaken' && !email) {
            // Nếu là actionsTaken nhưng không có email (dự phòng), vẫn tăng global
            docRef = doc(appState.db, "analytics", "site_stats");
            console.log("Incrementing global actionsTaken (email not provided).");
        } else {
            // Các trường hợp khác (vd: pageLoads) tăng global
            docRef = doc(appState.db, "analytics", "site_stats");
            console.log(`Incrementing global counter: ${fieldName}`);
        }

        try {
            await setDoc(docRef, dataToUpdate, { merge: true });
        } catch (error) {
            console.error(`Lỗi khi tăng bộ đếm cho '${fieldName}' tại ${docRef.path}:`, error);
        }
    },
    // *** END MODIFIED FUNCTION ***

    async submitFeedback(content) {
        if (!content || !appState.db || !appState.currentUser) {
             ui.showNotification("Không thể gửi góp ý: Người dùng chưa được xác thực.", "error");
            return;
        }
        try {
            await addDoc(collection(appState.db, "feedback"), {
                user: { email: appState.currentUser.email },
                content: content, timestamp: serverTimestamp(), replies: []
            });
            ui.showNotification("Góp ý của bạn đã được gửi!", "success");
            return true;
        } catch (error) {
            console.error("Error adding feedback: ", error);
            ui.showNotification("Lỗi khi gửi góp ý.", "error");
            return false;
        }
    },

    async submitReply(docId, content) {
        if (!docId || !content || !appState.db) return false;
        try {
            const feedbackRef = doc(appState.db, "feedback", docId);
            await updateDoc(feedbackRef, { replies: arrayUnion({ content: content, timestamp: new Date() }) });
            return true;
        } catch (error) {
            console.error("Error submitting reply:", error);
            ui.showNotification("Lỗi khi gửi trả lời.", "error");
            return false;
        }
    },

    async saveHelpContent(contents) {
        if (!appState.db || !appState.isAdmin) return;
        ui.showNotification('Đang lưu nội dung hướng dẫn...', 'success');
        try {
            await Promise.all([
                setDoc(doc(appState.db, "help_content", "data"), { content: contents.data }),
                setDoc(doc(appState.db, "help_content", "luyke"), { content: contents.luyke }),
                setDoc(doc(appState.db, "help_content", "sknv"), { content: contents.sknv }),
                setDoc(doc(appState.db, "help_content", "realtime"), { content: contents.realtime })
            ]);
            ui.showNotification('Đã cập nhật nội dung hướng dẫn thành công!', 'success');
        } catch (error) {
            console.error("Error saving help content:", error);
            ui.showNotification('Lỗi khi lưu nội dung.', 'error');
        }
    },

    async saveCategoryDataToFirestore(data) {
        if (!appState.db || !appState.isAdmin) return;
        ui.showNotification('Đang đồng bộ dữ liệu khai báo lên cloud...', 'success');
        try {
            const categoryRef = doc(appState.db, "declarations", "categoryStructure");
            await setDoc(categoryRef, { data: data.categories || [] });
            const brandRef = doc(appState.db, "declarations", "brandList");
            await setDoc(brandRef, { data: data.brands || [] });
            ui.showNotification('Đồng bộ dữ liệu khai báo thành công!', 'success');
        } catch (error) {
            console.error("Lỗi khi lưu dữ liệu khai báo lên Firestore:", error);
            ui.showNotification('Lỗi khi đồng bộ dữ liệu lên cloud.', 'error');
        }
    },

    async loadCategoryDataFromFirestore() {
        if (!appState.db) {
             console.warn("loadCategoryDataFromFirestore called before DB initialization.");
             return { categories: [], brands: [] };
        }
        try {
            const declarationsCollection = collection(appState.db, "declarations");
            const querySnapshot = await getDocs(declarationsCollection);
            let categories = []; let brands = [];
            querySnapshot.forEach((doc) => {
                if (doc.id === "categoryStructure") categories = doc.data().data || [];
                else if (doc.id === "brandList") brands = doc.data().data || [];
            });
            console.log(`Loaded ${categories.length} categories and ${brands.length} brands from Firestore.`);
            return { categories, brands };
        } catch (error) {
            console.error("Lỗi khi tải dữ liệu khai báo từ Firestore:", error);
            return { categories: [], brands: [] };
        }
    },

    async loadDeclarationsFromFirestore() {
        if (!appState.db) {
            console.warn("loadDeclarationsFromFirestore called before DB initialization.");
            return {};
        }
        console.log("Loading calculation declarations from Firestore...");
        try {
            const declarationIds = ['hinhThucXuat', 'hinhThucXuatGop', 'heSoQuyDoi'];
            const declarations = {};
            await Promise.all(declarationIds.map(async (id) => {
                const docRef = doc(appState.db, "declarations", id);
                const docSnap = await getDoc(docRef);
                declarations[id] = docSnap.exists() ? (docSnap.data().content || '') : '';
            }));
            console.log("Successfully loaded calculation declarations.");
            return declarations;
        } catch (error) {
            console.error("Lỗi khi tải dữ liệu khai báo tính toán từ Firestore:", error);
            return {};
        }
    },

    async saveDeclarationsToFirestore(declarations) {
        if (!appState.db || !appState.isAdmin) return;
        ui.showNotification('Đang đồng bộ khai báo tính toán lên cloud...', 'success');
        try {
            await Promise.all([
                setDoc(doc(appState.db, "declarations", "hinhThucXuat"), { content: declarations.ycx }),
                setDoc(doc(appState.db, "declarations", "hinhThucXuatGop"), { content: declarations.ycxGop }),
                 setDoc(doc(appState.db, "declarations", "heSoQuyDoi"), { content: declarations.heSo })
            ]);
            ui.showNotification('Đồng bộ khai báo tính toán thành công!', 'success');
        } catch (error) {
            console.error("Lỗi khi lưu dữ liệu khai báo tính toán:", error);
            ui.showNotification('Lỗi khi đồng bộ khai báo tính toán.', 'error');
        }
    },

    // *** START: NEW FUNCTIONS (v3.3) ***
    async loadCompetitionNameMappings() {
        if (!appState.db) {
            console.warn("loadCompetitionNameMappings called before DB initialization.");
            return {};
        }
        console.log("Loading competition name mappings from Firestore...");
        try {
            const docRef = doc(appState.db, "declarations", "competitionNameMappings");
            const docSnap = await getDoc(docRef);
            if (docSnap.exists()) {
                console.log("Successfully loaded competition name mappings.");
                return docSnap.data().mappings || {};
            } else {
                console.log("No competition name mappings found in Firestore, returning empty object.");
                return {};
            }
        } catch (error) {
            console.error("Lỗi khi tải Bảng Ánh Xạ Tên Thi Đua từ Firestore:", error);
            return {};
        }
    },

    async saveCompetitionNameMappings(mappings) {
        if (!appState.db || !appState.isAdmin) {
            console.warn("Save competition name mappings skipped: Not admin or DB not initialized.");
            return;
        }
        console.log("Saving competition name mappings to Firestore...");
        try {
            const docRef = doc(appState.db, "declarations", "competitionNameMappings");
            await setDoc(docRef, { mappings: mappings });
            console.log("Successfully saved competition name mappings.");
        } catch (error) {
            console.error("Lỗi khi lưu Bảng Ánh Xạ Tên Thi Đua:", error);
            ui.showNotification('Lỗi khi lưu tên rút gọn lên cloud.', 'error');
        }
    },
    // *** END: NEW FUNCTIONS (v3.3) ***

    async getTemplateDownloadURL() {
        if (!appState.storage) throw new Error("Firebase Storage chưa được khởi tạo.");
        const filePath = 'templates/danh_sach_nhan_vien_mau.xlsx';
        const storageRef = ref(appState.storage, filePath);
        try { return await getDownloadURL(storageRef); }
        catch (error) { console.error("Lỗi khi lấy URL tải file mẫu: ", error); throw error; }
    },

    async getBookmarkDownloadURL() {
        if (!appState.storage) throw new Error("Firebase Storage chưa được khởi tạo.");
        const filePath = 'templates/Share_QLST.zip';
        const storageRef = ref(appState.storage, filePath);
        try { return await getDownloadURL(storageRef); }
        catch (error) { console.error("Lỗi khi lấy URL tải file bookmark: ", error); throw error; }
    },

    async getQrCodeDownloadURL() {
        if (!appState.storage) throw new Error("Firebase Storage chưa được khởi tạo.");
        const filePath = 'qrcodes/main-qr.jpg';
        const storageRef = ref(appState.storage, filePath);
        try { return await getDownloadURL(storageRef); }
        catch (error) {
            console.error("Lỗi khi lấy URL của mã QR: ", error);
            if (error.code === 'storage/object-not-found') throw new Error(`Không tìm thấy file mã QR tại đường dẫn '${filePath}'. Vui lòng kiểm tra lại Firebase Storage.`);
            throw new Error("Không thể tải được mã QR từ server.");
        }
    },

    async upsertUserRecord(email) {
        if (!appState.db || !email) return;
        if (!appState.auth?.currentUser) { console.warn("Attempted to upsert user record before auth is ready."); return; }
        const userRef = doc(appState.db, "users", email);
        try {
            // Chỉ tăng loginCount, không reset actionsTaken ở đây
            await setDoc(userRef, {
                email: email,
                lastLogin: serverTimestamp(),
                loginCount: increment(1)
            }, { merge: true });
            console.log(`User record for ${email} updated successfully (loginCount incremented).`);
        } catch (error) { console.error("Error upserting user record:", error); }
    },

    async uploadFileToStorage(file, storagePath, onProgress) {
        if (!appState.storage) {
            throw new Error("Firebase Storage is not initialized.");
        }
        if (!file || !storagePath) {
            throw new Error("File or storage path is missing for upload.");
        }

        const storageRef = ref(appState.storage, storagePath);
        const uploadTask = uploadBytesResumable(storageRef, file);

        return new Promise((resolve, reject) => {
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log(`Upload ${storagePath} is ${progress}% done`);
                    if (onProgress && typeof onProgress === 'function') {
                        onProgress(progress);
                    }
                },
                (error) => {
                    console.error(`%c[Firebase.uploadFileToStorage] LỖI KHI UPLOAD file ${storagePath}:`, "color: red; font-weight: bold;", error);
                    let userMessage = `Lỗi upload file lên cloud (${error.code || 'UNKNOWN'}).`;
                    switch (error.code) {
                        case 'storage/unauthorized':
                            userMessage = "Lỗi upload: Bạn không có quyền tải file lên.";
                            break;
                        case 'storage/canceled':
                            userMessage = "Lỗi upload: Quá trình tải file đã bị hủy.";
                            break;
                        case 'storage/unknown':
                            userMessage = "Lỗi upload: Đã xảy ra lỗi không xác định trên server.";
                            break;
                    }
                    ui.showNotification(userMessage, 'error');
                    reject(error);
                },
                async () => {
                    console.log(`[Firebase.uploadFileToStorage] File ${storagePath} uploaded successfully.`);
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        console.log('[Firebase.uploadFileToStorage] File available at', downloadURL);
                        resolve(downloadURL);
                    } catch (getUrlError) {
                        console.error(`%c[Firebase.uploadFileToStorage] LỖI KHI LẤY DOWNLOAD URL cho ${storagePath}:`, "color: red; font-weight: bold;", getUrlError);
                        ui.showNotification(`Lỗi lấy link file sau khi upload (${getUrlError.code || 'UNKNOWN'}).`, 'error');
                        reject(getUrlError);
                    }
                }
            );
        });
    },

    async saveMetadataToFirestore(kho, dataType, metadata) {
        if (!appState.db || !kho || !dataType || !metadata) {
            console.error("[saveMetadataToFirestore] Invalid input parameters.");
            throw new Error("Invalid parameters for saving metadata.");
        }
        if (!appState.currentUser?.email) {
            throw new Error("Không thể lưu metadata khi chưa định danh email.");
        }

        const khoRef = doc(appState.db, "warehouseData", kho);
        const dataToSave = {
            [dataType]: {
                ...metadata,
                updatedAt: serverTimestamp(),
                updatedBy: appState.currentUser.email
            }
        };

        try {
            console.log(`[Firebase.saveMetadataToFirestore] Attempting to save metadata for ${dataType} (v${metadata.version}, t${metadata.timestamp}) for kho ${kho}.`);
            await setDoc(khoRef, dataToSave, { merge: true });
            console.log(`[Firebase.saveMetadataToFirestore] Successfully saved metadata for ${dataType} (v${metadata.version}).`);
        } catch (error) {
            console.error(`%c[Firebase.saveMetadataToFirestore] LỖI KHI LƯU METADATA KHO ${kho} (${dataType}, v${metadata.version}):`, "color: red; font-weight: bold;", error);
            console.error("[Firebase.saveMetadataToFirestore] Error details:", error.code, error.message);
            let userMessage = `Lỗi nghiêm trọng khi lưu thông tin đồng bộ ${dataType}.`;
            ui.showNotification(userMessage, 'error');
            throw error;
        }
    },

    async savePastedDataToFirestore(kho, dataType, content, versionInfo) {
        if (!appState.db || !kho || !dataType || !content || !versionInfo) {
            console.error("[savePastedDataToFirestore] Invalid input parameters.");
            throw new Error("Invalid parameters for saving pasted data.");
        }
        if (!appState.currentUser?.email) {
            throw new Error("Không thể lưu dữ liệu dán khi chưa định danh email.");
        }

        const khoRef = doc(appState.db, "warehouseData", kho);
        const metadata = {
            content: content,
            version: versionInfo.version,
            timestamp: versionInfo.timestamp,
            updatedAt: serverTimestamp(),
            updatedBy: appState.currentUser.email
        };
        const dataToSave = { [dataType]: metadata };

        try {
            console.log(`[Firebase.savePastedDataToFirestore] Attempting to save pasted data for ${dataType} (v${versionInfo.version}, t${versionInfo.timestamp}) for kho ${kho}.`);
            await setDoc(khoRef, dataToSave, { merge: true });
            console.log(`[Firebase.savePastedDataToFirestore] Successfully saved pasted data for ${dataType} (v${versionInfo.version}).`);
        } catch (error) {
            console.error(`%c[Firebase.savePastedDataToFirestore] LỖI KHI LƯU DỮ LIỆU DÁN KHO ${kho} (${dataType}, v${versionInfo.version}):`, "color: red; font-weight: bold;", error);
            let userMessage = `Lỗi nghiêm trọng khi lưu dữ liệu dán ${dataType}.`;
            ui.showNotification(userMessage, 'error');
            throw error;
        }
    },

    listenForDataChanges(kho, callback) {
        if (!appState.db || !kho || typeof callback !== 'function') return null;
        if (!appState.auth?.currentUser) {
             console.warn(`Cannot listen for data changes for kho ${kho} before auth is ready.`);
             return null;
        }
        const khoRef = doc(appState.db, "warehouseData", kho);
        console.log(`Bắt đầu lắng nghe thay đổi dữ liệu cho kho: ${kho}`);
        const unsubscribe = onSnapshot(khoRef, (docSnap) => {
            if (docSnap.exists()) {
                console.log(`Phát hiện dữ liệu/metadata mới cho kho ${kho}.`);
                const allData = docSnap.data();
                callback(allData);
            } else {
                console.log(`Chưa có dữ liệu/metadata nào trên cloud cho kho ${kho}.`);
                callback({});
            }
        }, (error) => {
            console.error(`Lỗi khi lắng nghe dữ liệu kho ${kho}:`, error);
            if (error.code !== 'permission-denied') {
                 ui.showNotification("Mất kết nối đồng bộ dữ liệu.", "error");
            } else {
                 console.warn(`Permission denied while listening for data changes on kho ${kho}. Check Firestore rules.`);
            }
        });
        return unsubscribe;
    },

    // *** MODIFIED FUNCTION (v3.2) ***
    /**
     * Lấy danh sách tất cả người dùng và thông tin của họ từ Firestore.
     * Bao gồm cả trường 'actionsTaken' mới.
     * @returns {Promise<Array<Object>>} Mảng các đối tượng người dùng.
     */
    async getAllUsers() {
        if (!appState.db || !appState.isAdmin) {
            ui.showNotification("Bạn không có quyền truy cập chức năng này.", "error");
            return [];
        }
        try {
            const usersCollection = collection(appState.db, "users");
            const querySnapshot = await getDocs(usersCollection);
            const users = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                users.push({
                    email: data.email,
                    loginCount: data.loginCount || 0,
                    lastLogin: data.lastLogin?.toDate(),
                    actionsTaken: data.actionsTaken || 0 // Lấy thêm actionsTaken
                });
            });
            console.log(`Loaded ${users.length} users from Firestore.`);
            return users;
        } catch (error) {
            console.error("Lỗi khi lấy danh sách người dùng:", error);
            ui.showNotification("Không thể tải danh sách người dùng.", "error");
            return [];
        }
    }
    // *** END MODIFIED FUNCTION ***
};

export { firebase };
--- END FILE: ./Firebase.js ---

--- START FILE: ./auth.js ---
// Version 2.4 - Add detailed logging within polling interval
// MODULE: AUTH
// Chịu trách nhiệm xử lý logic định danh người dùng qua email, yêu cầu sau khi có phiên ẩn danh.

import { getAuth, onAuthStateChanged, signInAnonymously } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { appState } from './state.js';
import { ui } from './ui.js';
import { firebase } from './firebase.js';

export const auth = {
    _authInstance: null,

    async ensureAnonymousAuth() {
        if (!this._authInstance) {
            this._authInstance = getAuth();
            if (!this._authInstance) {
                 console.error("Firebase Auth chưa được khởi tạo đúng cách trong firebase.js");
                 throw new Error("Firebase Auth initialization failed.");
            }
        }
        return new Promise((resolve, reject) => {
            onAuthStateChanged(this._authInstance, async (user) => {
                if (user) {
                    console.log("Anonymous user detected or already signed in:", user.uid);
                    resolve(user);
                } else {
                    console.log("No user found, attempting anonymous sign-in...");
                    try {
                        const userCredential = await signInAnonymously(this._authInstance);
                        console.log("Anonymous sign-in successful:", userCredential.user.uid);
                        resolve(userCredential.user);
                    } catch (error) {
                        console.error("Anonymous sign-in failed:", error);
                        ui.showNotification("Lỗi xác thực. Không thể kết nối.", "error");
                        reject(error);
                    }
                }
            }, (error) => {
                console.error("Error in onAuthStateChanged listener:", error);
                reject(error);
            });
        });
    },

    initEmailIdentification(onSuccessCallback) {
        const savedEmail = localStorage.getItem('userEmail');
        if (savedEmail && this._isValidEmail(savedEmail)) {
            appState.currentUser = { email: savedEmail };
            console.log("Email found in localStorage, proceeding.");
            onSuccessCallback();
        } else {
            console.log("No valid email in localStorage, showing login modal.");
            ui.toggleModal('login-modal', true);
            this._setupLoginListenerDeferred(onSuccessCallback);
        }
    },

    /**
     * @private
     * Thiết lập trình nghe sự kiện cho form đăng nhập - Phiên bản mới với polling
     * Chờ cho đến khi các element của modal xuất hiện trong DOM.
     * @param {Function} onSuccessCallback - Hàm callback để chạy sau khi đăng nhập thành công.
     */
    _setupLoginListenerDeferred(onSuccessCallback) {
        const maxWaitTime = 5000; // Chờ tối đa 5 giây
        const checkInterval = 100; // Kiểm tra mỗi 100ms
        let elapsedTime = 0;

        console.log("[auth.js] Attempting to set up login listener, waiting for elements...");

        const intervalId = setInterval(() => {
            elapsedTime += checkInterval; // Tăng thời gian đã trôi qua ở đầu mỗi lần lặp
            const submitBtn = document.getElementById('login-submit-btn');
            const emailInput = document.getElementById('login-email-input');

            // *** ADDED: Logging inside interval ***
            console.log(`[auth.js interval ${elapsedTime}ms] Checking... Button found: ${!!submitBtn}, Input found: ${!!emailInput}`);

            if (submitBtn && emailInput) {
                clearInterval(intervalId);
                console.log("[auth.js] Login elements found. Attaching listeners now.");
                this._attachLoginHandlers(submitBtn, emailInput, onSuccessCallback);
            } else if (elapsedTime >= maxWaitTime) {
                clearInterval(intervalId);
                console.error("[auth.js] CRITICAL TIMEOUT: Login button or email input not found after waiting.");
                // *** ADDED: Log current modal HTML on timeout ***
                const modalElement = document.getElementById('login-modal');
                console.error("[auth.js] Current #login-modal content on timeout:", modalElement?.innerHTML.substring(0, 300) + "...");
                ui.showNotification("Lỗi giao diện nghiêm trọng: Không thể khởi tạo form đăng nhập.", "error");
            }
            // No 'else' needed here, just continue polling if not found and not timed out
        }, checkInterval);
    },

    /**
     * @private
     * Gắn các hàm xử lý sự kiện click và keydown (tách ra để tái sử dụng).
     */
     _attachLoginHandlers(submitBtn, emailInput, onSuccessCallback) {
         if (submitBtn.dataset.listenerAttached) {
             console.warn("Login listener already attached. Skipping.");
             return;
         }
         submitBtn.dataset.listenerAttached = 'true';
         emailInput.dataset.listenerAttached = 'true';

         submitBtn.onclick = async () => {
             const currentEmailInput = document.getElementById('login-email-input');
             const currentErrorMsg = document.getElementById('login-error-msg');
             const currentSubmitBtn = document.getElementById('login-submit-btn');

             if (!currentEmailInput || !currentErrorMsg || !currentSubmitBtn) {
                 console.error("Login modal elements missing during click handler!");
                 return;
             }

             const email = currentEmailInput.value.trim();
             if (this._isValidEmail(email)) {
                 currentErrorMsg.classList.add('hidden');
                 currentSubmitBtn.disabled = true;
                 currentSubmitBtn.textContent = "Đang xử lý...";

                 localStorage.setItem('userEmail', email);
                 appState.currentUser = { email: email };

                 ui.showNotification(`Chào mừng ${email}!`, 'success');
                 await firebase.upsertUserRecord(email);

                 ui.toggleModal('login-modal', false);
                 console.log("Email submitted, calling onSuccessCallback.");
                 onSuccessCallback();
             } else {
                 currentErrorMsg.classList.remove('hidden');
                 currentSubmitBtn.disabled = false;
                 currentSubmitBtn.textContent = "Xác nhận & Tiếp tục";
             }
         };

         emailInput.onkeydown = (e) => {
             if (e.key === 'Enter') {
                 e.preventDefault();
                 const currentSubmitBtn = document.getElementById('login-submit-btn');
                 if (currentSubmitBtn && !currentSubmitBtn.disabled) {
                     currentSubmitBtn.click();
                 }
             }
         };
         console.log("Successfully attached login handlers.");
     },

    /**
     * @private
     * Kiểm tra định dạng email đơn giản.
     * @param {string} email
     * @returns {boolean}
     */
    _isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return email && emailRegex.test(email);
    }
};
--- END FILE: ./auth.js ---

--- START FILE: ./changelog.json ---
[
     {
    "version": "3.6",
    "date": "27/10/2025",
    "notes": [
      "Nâng cấp tính nâng đồng bộ cloud theo mã kho:",
      "- Cần cập nhập E-mail(không cần đăng nhập) vàchọn mã kho trước khi up file dữ liệu lên, hệ thống sẽ tự đồng bộ lên cloud",
      "- QL/TC cùng siêu thị sẽ thấy được dữ liệu dùng chung như YCX lũy kế,giờ công,thưởng nóng...",
      "- Dữ liệu cũng sẽ được đồng bộ khi xem giữa điện thoại, laptop",
      "Sửa lỗi không tính bảo hiểm vào tỷ lệ quy đổi",
      "Khôi phục tính năng xử lý file thi đua vùng TNB"
    ]
  },  
   {
    "version": "3.5",
    "date": "23/10/2025",
    "notes": [
      "Nâng cấp giao diện tab SKNV cho đẹp hơn"
    ]
  },  
   {
    "version": "3.4",
    "date": "17/10/2025",
    "notes": [
      "Có thể bấm trực tiếp tên nhân viên để xem chi tiết",
      "Thêm icon vào menu cho sinh động"
    ]
  },  
  {
    "version": "3.3",
    "date": "13/10/2025",
    "notes": [
      "Thêm chức năng tùy chỉnh cột cho tab Hiệu quả khai thác nhân viên : có thể chọn ẩn hoặc hiện cột dữ liệu không liên quan đến TGDD",
      "Cho phép kéo thả để sắp xếp các cột trong bảng kết quả hiệu quả khai thác nhân viên"
    ]
  },  
   {
    "version": "3.2",
    "date": "10/10/2025",
    "notes": [
      "Thêm bộ lọc ( hình răng cưa ) vào 3 bảng Hiệu quả khai thác, Nhóm hàng quy đổi cao, Ngành hàng chi tiết trong Siêu thị lũy kế và realtime",
      "Sửa lại giao diện khu vực cập nhật dữ liệu cho gọn hơn"
    ]
  },  
  {
    "version": "3.1",
    "date": "09/10/2025",
    "notes": [
      "Thêm 2 thẻ KPI mới cho tab siêu thị lũy kế",
      "Thêm chức năng cài đặt màu chữ thẻ KPI trong cài đặt giao diện"
    ]
  },  
   {
    "version": "3.0",
    "date": "06/10/2025",
    "notes": [
      "Nâng cấp tính năng tạo chương trình thi đua và theo dõi hiệu quả thi đua : Có thể theo dõi cùng lúc nhiều hãng trong cùng 1 nhóm hàng.",
      "Nâng cấp tính năng nhận xét:cho phép tạo nhận xét cho nhiều tab phụ.",
      "Nâng cấp tính năng nhận xét: Thêm bộ lọc tất cả nhân viên dưới mục tiêu khai báo"
    ]
  },  
  {
    "version": "2.8",
    "date": "01/10/2025",
    "notes": [
      "Thêm tính năng tạo chương trình thi đua và theo dõi hiệu quả thi đua."
    ]
  },
    {
    "version": "2.7",
    "date": "26/09/2025",
    "notes": [
      "Thêm tính năng thông báo có phiên bản mới.",
      "Thêm tính năng video hướng dẫn ngoài trang chủ.",
      "Thêm bộ đếm lượt truy cập và sử dụng."
    ]
  },
{
    "version": "2.6",
    "date": "25/09/2025",
    "notes": [
      "Sửa lỗi tính năng sắp xếp trên tất cả các bảng.",
      "Phục hồi báo cáo 'Thi đua NV' và 'Hiệu quả khai thác LK'.",
      "Sửa lỗi 'Thiết lập mục tiêu' cập nhật không tức thời.",
      "Sửa lỗi bộ lọc nâng cao không hiển thị dữ liệu."
    ]
  },
  {
    "version": "2.5",
    "date": "24/09/2025",
    "notes": [
      "Thêm tính năng xử lý file thi đua theo vùng trong 'Sức khỏe siêu thị.",
      "Nâng cấp tính năng 'Nhận xét' : thêm icon, thêm các thẻ tùy chọn"
    ]
  },
    {
    "version": "2.2",
    "date": "23/09/2025",
    "notes": [
      "Sửa lỗi nghiêm trọng: Tính toán sai giá trị doanh thu sau khi cập nhật bộ lọc.",
      "Cấu trúc lại hệ thống quản lý phiên bản và lịch sử cập nhật."
    ]
  },
  {
    "version": "2.1",
    "date": "23/09/2025",
    "notes": [
      "Sửa lỗi bộ lọc nâng cao không có dữ liệu để chọn.",
      "Sửa lỗi tô màu tiêu đề bảng không hoạt động do sai CSS Selector."
    ]
  },
  {
    "version": "2.0",
    "date": "16/09/2025",
    "notes": [
      "Phiên bản phát hành đầu tiên.",
      "Bao gồm các chức năng cốt lõi: SKNV, SKST Lũy kế, Doanh thu Realtime."
    ]
  }
]
--- END FILE: ./changelog.json ---

--- START FILE: ./components/drawer-goal.js ---
// Version 1.0 - Component: Goal Drawer
// Chứa mã HTML cho drawer thiết lập mục tiêu.

const drawerGoalHTML = `
<div id="goal-drawer" class="settings-drawer fixed top-0 left-0 h-full bg-white shadow-2xl z-50 p-6 overflow-y-auto hidden">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-gray-800">Thiết lập mục tiêu</h3>
        <button class="close-drawer-btn text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
    </div>
    
    <div class="border-b border-gray-200 mb-4">
        <nav id="goal-drawer-tabs" class="-mb-px flex space-x-6" aria-label="Tabs" data-content-container="goal-drawer-content">
             <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="goal-tab-monthly">Mục tiêu Tháng (Lũy kế)</button>
             <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="goal-tab-daily">Mục tiêu Ngày (Realtime)</button>
        </nav>
    </div>

    <div id="goal-drawer-content">
        <div id="goal-tab-monthly" class="sub-tab-content space-y-4">
            <div>
                <label for="luyke-goal-warehouse-select" class="block text-sm font-medium text-gray-700 mb-1">Thiết lập cho kho</label>
                <select id="luyke-goal-warehouse-select" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-2 gap-x-4 gap-y-3">
                <div>
                    <label for="luyke-goal-dtt" class="block text-sm font-medium text-gray-700">Target DT Thực</label>
                    <input type="number" id="luyke-goal-dtt" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuThuc">
                </div>
                <div>
                    <label for="luyke-goal-dtqd" class="block text-sm font-medium text-gray-700">Target DT QĐ</label>
                    <input type="number" id="luyke-goal-dtqd" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuQD">
                </div>
                <div>
                    <label for="luyke-goal-ptqd" class="block text-sm font-medium text-gray-700">% Quy đổi</label>
                    <input type="number" id="luyke-goal-ptqd" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramQD">
                </div>
                <div>
                    <label for="luyke-goal-pttc" class="block text-sm font-medium text-gray-700">% Trả chậm</label>
                    <input type="number" id="luyke-goal-pttc" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramTC">
                </div>
                <div>
                    <label for="luyke-goal-giadung" class="block text-sm font-medium text-gray-700">% Gia dụng</label>
                    <input type="number" id="luyke-goal-giadung" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramGiaDung">
                </div>
                <div>
                    <label for="luyke-goal-mln" class="block text-sm font-medium text-gray-700">% MLN</label>
                    <input type="number" id="luyke-goal-mln" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramMLN">
                </div>
                <div>
                    <label for="luyke-goal-phukien" class="block text-sm font-medium text-gray-700">% Phụ kiện</label>
                    <input type="number" id="luyke-goal-phukien" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramPhuKien">
                </div>
                 <div>
                    <label for="luyke-goal-baohiem" class="block text-sm font-medium text-gray-700">% Bảo hiểm</label>
                    <input type="number" id="luyke-goal-baohiem" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramBaoHiem">
                </div>
                <div>
                    <label for="luyke-goal-sim" class="block text-sm font-medium text-gray-700">% Sim</label>
                    <input type="number" id="luyke-goal-sim" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramSim">
                </div>
                <div>
                    <label for="luyke-goal-vas" class="block text-sm font-medium text-gray-700">% VAS</label>
                    <input type="number" id="luyke-goal-vas" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramVAS">
                </div>
            </div>
        </div>
        <div id="goal-tab-daily" class="sub-tab-content hidden space-y-4">
            <div>
                <label for="rt-goal-warehouse-select" class="block text-sm font-medium text-gray-700 mb-1">Thiết lập cho kho</label>
                <select id="rt-goal-warehouse-select" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select>
            </div>
            <div class="grid grid-cols-2 gap-4 items-end">
                <div class="flex items-center gap-x-2">
                    <label for="rt-open-hour" class="font-medium text-gray-700 text-sm">Mở cửa:</label>
                    <input type="time" id="rt-open-hour" class="rt-setting-input p-1 border border-gray-300 rounded-md shadow-sm w-24">
                </div>
                <div class="flex items-center gap-x-2">
                    <label for="rt-close-hour" class="font-medium text-gray-700 text-sm">Đóng cửa:</label>
                    <input type="time" id="rt-close-hour" class="rt-setting-input p-1 border border-gray-300 rounded-md shadow-sm w-24">
                </div>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-2 gap-x-4 gap-y-3">
                <div>
                    <label for="rt-goal-dtt" class="block text-sm font-medium text-gray-700">DT Thực (triệu)</label>
                    <input type="number" id="rt-goal-dtt" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuThuc">
                </div>
                <div>
                    <label for="rt-goal-dtqd" class="block text-sm font-medium text-gray-700">DT QĐ (triệu)</label>
                    <input type="number" id="rt-goal-dtqd" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuQD">
                </div>
                <div>
                    <label for="rt-goal-ptqd" class="block text-sm font-medium text-gray-700">% Quy đổi</label>
                    <input type="number" id="rt-goal-ptqd" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramQD">
                </div>
                <div>
                    <label for="rt-goal-pttc" class="block text-sm font-medium text-gray-700">% Trả chậm</label>
                    <input type="number" id="rt-goal-pttc" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramTC">
                </div>
                <div>
                    <label for="rt-goal-giadung" class="block text-sm font-medium text-gray-700">% Gia dụng</label>
                    <input type="number" id="rt-goal-giadung" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramGiaDung">
                </div>
                <div>
                    <label for="rt-goal-mln" class="block text-sm font-medium text-gray-700">% MLN</label>
                    <input type="number" id="rt-goal-mln" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramMLN">
                </div>
                <div>
                    <label for="rt-goal-phukien" class="block text-sm font-medium text-gray-700">% Phụ kiện</label>
                    <input type="number" id="rt-goal-phukien" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramPhuKien">
                </div>
                <div>
                    <label for="rt-goal-sim" class="block text-sm font-medium text-gray-700">% Sim</label>
                    <input type="number" id="rt-goal-sim" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramSim">
                </div>
                <div>
                    <label for="rt-goal-vas" class="block text-sm font-medium text-gray-700">% VAS</label>
                    <input type="number" id="rt-goal-vas" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramVAS">
                </div>
                 <div>
                    <label for="rt-goal-baohiem" class="block text-sm font-medium text-gray-700">% Bảo hiểm</label>
                    <input type="number" id="rt-goal-baohiem" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramBaoHiem">
                </div>
            </div>
        </div>
    </div>

    <div class="border-t pt-6 mt-6">
         <div id="goal-tab-competition" class="space-y-4">
            <h4 class="text-md font-bold text-gray-800 mb-3">Quản lý Chương trình Thi đua</h4>
            <div id="competition-list-container" class="space-y-2 mb-4">
            </div>
            <form id="competition-form" class="p-4 bg-slate-50 border rounded-lg space-y-3 hidden">
                <input type="hidden" id="competition-id">
                <div>
                    <label for="competition-name" class="block text-sm font-medium text-gray-700">Tên chương trình</label>
                    <input type="text" id="competition-name" class="mt-1 block w-full p-2 border rounded-md" placeholder="VD: Thi đua TV Sony T9">
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="competition-brand" class="block text-sm font-medium text-gray-700">Hãng sản xuất</label>
                        <select id="competition-brand" multiple class="mt-1 block w-full"></select>
                    </div>
                    <div>
                        <label for="competition-group" class="block text-sm font-medium text-gray-700">Nhóm hàng</label>
                        <select id="competition-group" multiple class="mt-1 block w-full"></select>
                    </div>
                </div>
                <div>
                    <label for="competition-type" class="block text-sm font-medium text-gray-700">Loại đo lường</label>
                    <select id="competition-type" class="mt-1 block w-full p-2 border rounded-md">
                        <option value="doanhthu">Theo Doanh thu</option>
                        <option value="soluong">Theo Số lượng</option>
                    </select>
                </div>
                <div id="price-segment" class="hidden grid grid-cols-2 gap-4">
                    <div>
                        <label for="competition-min-price" class="block text-sm font-medium text-gray-700">Giá từ (triệu)</label>
                        <input type="number" id="competition-min-price" class="mt-1 block w-full p-2 border rounded-md" placeholder="VD: 3 (cho 3 triệu)">
                    </div>
                     <div>
                        <label for="competition-max-price" class="block text-sm font-medium text-gray-700">Giá đến (triệu)</label>
                        <input type="number" id="competition-max-price" class="mt-1 block w-full p-2 border rounded-md" placeholder="VD: 5 (cho 5 triệu)">
                    </div>
                </div>
                <div class="flex items-center">
                    <input id="competition-exclude-apple" type="checkbox" class="h-4 w-4 rounded border-gray-300">
                    <label for="competition-exclude-apple" class="ml-2 block text-sm text-gray-900">Trừ hãng Apple khỏi dữ liệu so sánh</label>
                </div>
                <div class="flex justify-end gap-2">
                    <button type="button" id="cancel-competition-btn" class="px-4 py-2 text-sm rounded-md bg-gray-200 hover:bg-gray-300">Hủy</button>
                    <button type="submit" id="save-competition-btn" class="px-4 py-2 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700">Lưu</button>
                </div>
            </form>
            <button id="add-competition-btn" class="mt-2 w-full text-sm py-2 px-4 border-2 border-dashed rounded-lg hover:bg-slate-50">
                + Thêm chương trình mới
            </button>
        </div>
    </div>
</div>
`;

export const drawerGoal = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = drawerGoalHTML;
        }
    }
};
--- END FILE: ./components/drawer-goal.js ---

--- START FILE: ./components/drawer-interface.js ---
// Version 1.1 - Update font size slider range and default value
// Chứa mã HTML cho drawer cài đặt giao diện.

const drawerInterfaceHTML = `
<div id="interface-drawer" class="settings-drawer fixed top-0 left-0 h-full bg-white shadow-2xl z-50 p-6 overflow-y-auto hidden">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-gray-800">Cài đặt giao diện</h3>
        <button class="close-drawer-btn text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
    </div>
    <div class="space-y-6">
        <div>
            <label for="contrast-selector-drawer" class="block text-sm font-medium text-gray-700 mb-2">Độ tương phản</label>
            <select id="contrast-selector-drawer" class="contrast-selector w-full p-2 border rounded-lg text-sm bg-white shadow-sm">
                <option value="1">Rất nhẹ</option>
                <option value="2">Nhẹ</option>
                <option value="3" selected>Bình thường</option>
                <option value="4">Cao</option>
                <option value="5">Rất cao</option>
                <option value="6">Cao nhất</option>
            </select>
        </div>
        <div>
            <label for="global-font-size-slider" class="flex justify-between text-sm font-medium text-gray-700 mb-2">
                <span>Cỡ chữ toàn trang</span>
                <span id="global-font-size-value" class="font-bold text-blue-600">18px</span>
            </label>
            <input type="range" id="global-font-size-slider" min="12" max="25" step="1" value="18" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
        </div>
        <div>
             <label for="kpi-font-size-slider" class="flex justify-between text-sm font-medium text-gray-700 mb-2">
                <span>Cỡ chữ thẻ KPI</span>
                <span id="kpi-font-size-value" class="font-bold text-blue-600">36px</span>
            </label>
            <input type="range" id="kpi-font-size-slider" min="24" max="48" step="2" value="36" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
        </div>
        <div>
            <h4 class="text-sm font-medium text-gray-700 mb-2">Màu sắc thẻ KPI</h4>
            <div class="grid grid-cols-2 gap-4">
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-1" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#38bdf8">
                    <label for="kpi-color-1" class="text-sm">Thẻ 1</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-2" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#34d399">
                    <label for="kpi-color-2" class="text-sm">Thẻ 2</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-3" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#fbbf24">
                    <label for="kpi-color-3" class="text-sm">Thẻ 3</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-4" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#2dd4bf">
                    <label for="kpi-color-4" class="text-sm">Thẻ 4</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-5" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#a78bfa">
                    <label for="kpi-color-5" class="text-sm">Thẻ 5</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-6" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#f472b6">
                    <label for="kpi-color-6" class="text-sm">Thẻ 6</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-7" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#818cf8">
                    <label for="kpi-color-7" class="text-sm">Thẻ 7</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-8" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#f87171">
                    <label for="kpi-color-8" class="text-sm">Thẻ 8</label>
                </div>
            </div>
        </div>
         <div>
            <h4 class="text-sm font-medium text-gray-700 mb-2">Màu chữ thẻ KPI</h4>
             <div class="space-y-2">
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-title-color" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#ffffff">
                    <label for="kpi-title-color" class="text-sm">Tiêu đề thẻ</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-main-color" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#ffffff">
                    <label for="kpi-main-color" class="text-sm">Giá trị chính</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-sub-color" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#ffffff">
                    <label for="kpi-sub-color" class="text-sm">Giá trị phụ</label>
                </div>
            </div>
        </div>
    </div>
</div>
`;

export const drawerInterface = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = drawerInterfaceHTML;
        }
    }
};
--- END FILE: ./components/drawer-interface.js ---

--- START FILE: ./components/modal-admin.js ---
// Version 1.0 - Component: Admin Modal
// Chứa mã HTML cho modal yêu cầu mật khẩu admin.

const modalAdminHTML = `
<div id="admin-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm mx-4">
        <h3 class="text-lg font-bold mb-4">Truy cập khu vực Admin</h3>
        <p class="text-sm text-gray-600 mb-4">Vui lòng nhập mật khẩu để xem và chỉnh sửa phần Khai báo.</p>
        <input type="password" id="admin-password-input" class="w-full p-2 border rounded-lg mb-2" placeholder="Mật khẩu...">
        <p id="admin-error-msg" class="text-red-500 text-sm mb-4 hidden">Mật khẩu không đúng. Vui lòng thử lại.</p>
        <div class="flex justify-end space-x-3">
            <button id="admin-cancel-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">Hủy</button>
            <button id="admin-submit-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Xác nhận</button>
        </div>
    </div>
</div>
`;

export const modalAdmin = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalAdminHTML;
        }
    }
};
--- END FILE: ./components/modal-admin.js ---

--- START FILE: ./components/modal-chart.js ---
// Version 1.0 - Component: Chart Modal
// Chứa mã HTML cho modal hiển thị biểu đồ chi tiết.

const modalChartHTML = `
<div id="chart-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container modal__container--large">
         <div class="modal__header">
            <h3 id="chart-modal-title" class="modal__title"></h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div class="modal__content">
            <canvas id="top10-chart"></canvas>
        </div>
    </div>
</div>
`;

export const modalChart = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalChartHTML;
        }
    }
};
--- END FILE: ./components/modal-chart.js ---

--- START FILE: ./components/modal-composer.js ---
// Version 1.0 - Component: Composer Modal
// Chứa mã HTML cho modal Trình tạo Nhận xét.

const modalComposerHTML = `
<div id="composer-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container modal__container--large">
        <div class="modal__header">
            <h3 id="composer-modal-title" class="modal__title">Trình tạo Nhận xét</h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div id="composer-modal-content" class="modal__content">
            <div class="composer">
                <div class="composer__editor">
                    <label class="composer__label">Nội dung nhận xét</label>
                    <nav id="composer-context-tabs" class="composer__nav mb-2"></nav>
                    <div id="composer-context-content">
                        </div>
                </div>
                <div class="composer__tags">
                    <div class="composer__nav">
                        <button class="composer__tab-btn active" data-tab="tab-general">Chung & Icons</button>
                        <button class="composer__tab-btn" data-tab="tab-kpi">KPIs Siêu Thị</button>
                        <button class="composer__tab-btn" data-tab="tab-ranking">Xếp Hạng NV</button>
                        <button class="composer__tab-btn" data-tab="tab-details">Thi Đua & Chi Tiết</button>
                    </div>

                    <div class="composer__content">
                        <div class="composer__tab-pane active" id="tab-general">
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Chung</h5>
                                <button class="composer__tag-btn" data-tag="[NGAY]">Ngày</button>
                                <button class="composer__tag-btn" data-tag="[GIO]">Giờ</button>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Biểu tượng (Icons)</h5>
                                <button class="composer__icon-btn">📊</button>
                                <button class="composer__icon-btn">💰</button>
                                <button class="composer__icon-btn">💥</button>
                                <button class="composer__icon-btn">🎯</button>
                                <button class="composer__icon-btn">📈</button>
                                <button class="composer__icon-btn">📦</button>
                                <button class="composer__icon-btn">⚠️</button>
                                <button class="composer__icon-btn">🔥</button>
                                <button class="composer__icon-btn">✅</button>
                            </div>
                        </div>

                        <div class="composer__tab-pane" id="tab-kpi">
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">KPIs Chính</h5>
                                <button class="composer__tag-btn" data-tag="[DT_THUC]">DT Thực</button>
                                <button class="composer__tag-btn" data-tag="[DTQD]">DT Quy đổi</button>
                                <button class="composer__tag-btn" data-tag="[%HT_DTT]">%HT DT Thực</button>
                                <button class="composer__tag-btn" data-tag="[%HT_DTQD]">%HT DT QĐ</button>
                                <button class="composer__tag-btn" data-tag="[TLQD]">Tỷ lệ Quy đổi</button>
                                <button class="composer__tag-btn" data-tag="[DT_CHUAXUAT]">DTQĐ Chưa Xuất</button>
                                <button class="composer__tag-btn" data-tag="[SS_CUNGKY]">Tăng/giảm Cùng kỳ</button>
                            </div>
                        </div>

                        <div class="composer__tab-pane" id="tab-ranking">
                            <div class="composer__filter-group">
                                <label for="composer-dept-filter" class="composer__label">Lọc theo bộ phận:</label>
                                <select id="composer-dept-filter" class="composer__select">
                                    <option value="ALL">Toàn siêu thị</option>
                                </select>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Xếp hạng DT Quy Đổi</h5>
                                <button class="composer__tag-btn" data-tag-template="[TOP3_DTQD_{dept}@msnv]">Top 3</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT3_DTQD_{dept}@msnv]">Bot 3</button>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Xếp hạng Thu Nhập</h5>
                                <button class="composer__tag-btn" data-tag-template="[TOP3_THUNHAP_{dept}@msnv]">Top 3</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT3_THUNHAP_{dept}@msnv]">Bot 3</button>
                            </div>
                             <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Xếp hạng Tỷ lệ Quy đổi</h5>
                                <button class="composer__tag-btn" data-tag-template="[TOP3_TLQD_{dept}@msnv]">Top 3</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT3_TLQD_{dept}@msnv]">Bot 3</button>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">NV Dưới Mục Tiêu Khai Báo</h5>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_TLQD_{dept}@msnv]">% Quy đổi</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_TLTC_{dept}@msnv]">% Trả chậm</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_PK_{dept}@msnv]">% Phụ kiện</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_GD_{dept}@msnv]">% Gia dụng</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_MLN_{dept}@msnv]">% MLN</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_SIM_{dept}@msnv]">% Sim</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_VAS_{dept}@msnv]">% VAS</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_BH_{dept}@msnv]">% Bảo hiểm</button>
                            </div>
                            </div>
                        
                        <div class="composer__tab-pane" id="tab-details">
                            <div class="composer__sub-nav">
                                <button class="composer__sub-tab-btn active" data-sub-tab="sub-tab-thidua">Thi Đua</button>
                                <button class="composer__sub-tab-btn" data-sub-tab="sub-tab-qdc">Nhóm QĐC</button>
                                <button class="composer__sub-tab-btn" data-sub-tab="sub-tab-nganhhang">Ngành Hàng</button>
                            </div>
                            <div class="composer__sub-content">
                                <div class="composer__sub-tab-pane active" id="sub-tab-thidua">
                                    <div class="composer__tag-group">
                                        <h5 class="composer__tag-group-title">Thi Đua Ngành Hàng</h5>
                                        <button class="composer__tag-btn" data-tag="[TD_TONG_CT]">Tổng CT</button>
                                        <button class="composer__tag-btn" data-tag="[TD_CT_DAT]">>100%</button>
                                        <button class="composer__tag-btn" data-tag="[TD_CT_CHUADAT]"><100%</button>
                                        <button class="composer__tag-btn" data-tag="[TD_TYLE_DAT]">% Đạt</button>
                                    </div>
                                </div>
                                <div class="composer__sub-tab-pane" id="sub-tab-qdc">
                                    <div id="composer-qdc-tags-container" class="composer__tag-group">
                                        <h5 class="composer__tag-group-title">Chọn Nhóm Hàng QĐC</h5>
                                    </div>
                                </div>
                                <div class="composer__sub-tab-pane" id="sub-tab-nganhhang">
                                    <div id="composer-nganhhang-tags-container" class="composer__tag-group">
                                        <h5 class="composer__tag-group-title">Chọn Ngành Hàng Chi Tiết</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal__footer">
            <button id="save-composer-template-btn" class="action-btn action-btn--save">Lưu mẫu</button>
            <button id="copy-composed-notification-btn" class="action-btn action-btn--copy">Xem trước & Sao chép</button>
        </div>
    </div>
</div>
`;

export const modalComposer = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalComposerHTML;
        }
    }
};
--- END FILE: ./components/modal-composer.js ---

--- START FILE: ./components/modal-force-update.js ---
// Version 1.1 - Add container for update notes
// MODULE: COMPONENTS - FORCE UPDATE MODAL
// Chứa mã HTML cho modal yêu cầu người dùng cập nhật phiên bản.

const modalForceUpdateHTML = `
<div id="force-update-modal" class="modal hidden">
    <div class="modal__overlay" style="cursor: not-allowed;"></div>
    <div class="modal__container" style="max-width: 500px;">
        <div class="modal__header">
            <h3 id="force-update-title" class="modal__title">📢 Đã có phiên bản mới!</h3>
        </div>
        <div class="modal__content">
            <p class="text-gray-600 mb-4">Một phiên bản mới với các bản sửa lỗi và cải tiến đã sẵn sàng. Vui lòng tải lại trang để tiếp tục.</p>
            
            <div id="update-notes-container" class="my-4 p-3 bg-gray-50 border border-gray-200 rounded-lg max-h-48 overflow-y-auto">
                <p class="text-sm text-gray-500">Đang tải chi tiết...</p>
            </div>
            <button id="force-reload-btn" class="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 transition text-lg">
                Cập nhật ngay
            </button>
        </div>
    </div>
</div>
`;

export const modalForceUpdate = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalForceUpdateHTML;
        }
    }
};
--- END FILE: ./components/modal-force-update.js ---

--- START FILE: ./components/modal-help.js ---
// Version 1.0 - Component: Help Modal
// Chứa mã HTML cho modal hiển thị nội dung hướng dẫn.

const modalHelpHTML = `
<div id="help-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container">
        <div class="modal__header">
            <h3 id="help-modal-title" class="modal__title"></h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div id="help-modal-content" class="modal__content">
        </div>
    </div>
</div>
`;

export const modalHelp = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalHelpHTML;
        }
    }
};
--- END FILE: ./components/modal-help.js ---

--- START FILE: ./components/modal-login.js ---
// Version 1.2 - Add logging to render function
// Chứa mã HTML cho modal yêu cầu email người dùng khi truy cập lần đầu.

const modalLoginHTML = `
<div id="login-modal" class="modal hidden">
    <div class="modal__overlay" style="cursor: not-allowed;"></div>
    <div class="modal__container" style="max-width: 420px;">
        <div class="modal__header">
            <h3 class="modal__title">Chào mừng đến với Công cụ Phân tích</h3>
        </div>
        <div class="modal__content">
            <p class="text-gray-600 mb-4">Vui lòng nhập email của bạn để bắt đầu sử dụng. Email này sẽ được dùng để định danh và đồng bộ dữ liệu trong tương lai.</p>
            <div class="space-y-4">
                <div>
                    <label for="login-email-input" class="block text-sm font-medium text-gray-700 mb-1">Email của bạn</label>
                    <input type="email" id="login-email-input" class="w-full p-2 border rounded-lg" placeholder="your.email@example.com">
                    <p id="login-error-msg" class="text-red-500 text-sm mt-1 hidden">Vui lòng nhập một địa chỉ email hợp lệ.</p>
                </div>
                <button id="login-submit-btn" class="w-full bg-blue-600 text-white font-bold py-2.5 px-4 rounded-lg hover:bg-blue-700 transition text-base">
                    Xác nhận & Tiếp tục
                </button>
            </div>
        </div>
    </div>
</div>
`;

export const modalLogin = {
    async render(containerSelector) {
        console.log(`[modalLogin.render] Attempting to render into: ${containerSelector}`); // Log mới
        const container = document.querySelector(containerSelector);
        if (container) {
            console.log(`[modalLogin.render] Container found. Setting innerHTML.`); // Log mới
            container.innerHTML = modalLoginHTML;
            console.log(`[modalLogin.render] innerHTML set. Waiting for next tick.`); // Log mới
            // Return a promise that resolves after the next tick, ensuring DOM update
            return new Promise(resolve => setTimeout(() => {
                console.log(`[modalLogin.render] Next tick resolved.`); // Log mới
                resolve();
            }, 0));
        } else {
            console.error(`[modalLogin.render] Container ${containerSelector} NOT FOUND.`); // Log lỗi mới
        }
        // Return a resolved promise if container not found to avoid breaking await
        return Promise.resolve();
    }
};
--- END FILE: ./components/modal-login.js ---

--- START FILE: ./components/modal-preview.js ---
// Version 1.0 - Component: Preview Modal
// Chứa mã HTML cho modal xem trước nội dung nhận xét.

const modalPreviewHTML = `
<div id="preview-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container">
        <div class="modal__header">
            <h3 id="preview-modal-title" class="modal__title">Xem trước nội dung</h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div class="modal__content">
            <pre id="preview-modal-content" class="preview-content"></pre>
        </div>
        <div class="modal__footer">
            <button id="copy-from-preview-btn" class="action-btn action-btn--copy">Sao chép nội dung</button>
        </div>
    </div>
</div>
`;

export const modalPreview = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalPreviewHTML;
        }
    }
};
--- END FILE: ./components/modal-preview.js ---

--- START FILE: ./components/modal-selection.js ---
// Version 1.0 - Component: Selection Modal
// Chứa mã HTML cho modal tùy chỉnh hiển thị chung.

const modalSelectionHTML = `
<div id="selection-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container">
        <div class="modal__header">
            <h3 id="selection-modal-title" class="modal__title">Tùy chỉnh hiển thị</h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div class="modal__content">
            <input type="text" id="selection-modal-search" class="w-full p-2 border rounded-md mb-4" placeholder="Tìm kiếm mục...">
            <div id="selection-modal-list" class="space-y-2 max-h-64 overflow-y-auto">
                </div>
        </div>
        <div class="modal__footer">
            <button id="selection-modal-save-btn" class="action-btn action-btn--save">Lưu Cài Đặt</button>
        </div>
    </div>
</div>
`;

export const modalSelection = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalSelectionHTML;
        }
    }
};
--- END FILE: ./components/modal-selection.js ---

--- START FILE: ./components/sidebar.js ---
// Version 1.4 - Add font-semibold to all nav links for consistency
// Version 1.3 - Optimize HTML for better icon/text alignment
// Chứa mã HTML và logic cho thanh điều hướng bên.

const sidebarHTML = `
<nav id="sidebar" class="bg-white/80 backdrop-blur-sm shadow-lg fixed top-0 left-0 h-full z-30 p-3 flex flex-col justify-between">
    <div>
         <a href="#home-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold mb-4">
            <i data-feather="home"></i>
            <span class="menu-text">Hướng Dẫn & Góp Ý</span>
        </a>
        <ul class="space-y-2">
            <li>
                <a href="#data-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="file-text"></i>
                    <span class="menu-text">Cập nhật dữ liệu</span>
                </a>
            </li>
            <li>
                <a href="#health-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="activity"></i>
                    <span class="menu-text">Sức khỏe siêu thị</span>
                </a>
            </li>
            <li>
                <a href="#health-employee-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="users"></i>
                    <span class="menu-text">Sức khỏe nhân viên</span>
                </a>
            </li>
            <li>
                <a href="#realtime-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="trending-up"></i>
                    <span class="menu-text">Doanh thu realtime</span>
                </a>
            </li>
        </ul>
    </div>
    <div>
        <ul class="space-y-2">
            <li>
                <button id="interface-settings-btn" class="w-full flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="settings"></i>
                    <span class="menu-text">Cài đặt giao diện</span>
                </button>
            </li>
            <li>
                <button id="goal-settings-btn" class="w-full flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="target"></i>
                    <span class="menu-text">Thiết lập mục tiêu</span>
                </button>
            </li>
            <li>
                <button id="admin-access-btn" class="w-full flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="edit"></i>
                    <span class="menu-text">Khai báo</span>
                </button>
            </li>
        </ul>
    </div>
</nav>
`;

export const sidebar = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = sidebarHTML;
        }
    }
};
--- END FILE: ./components/sidebar.js ---

--- START FILE: ./config.js ---
// Version 2.2 - New Features & Refinements
// MODULE 1: TỦ CẤU HÌNH (CONFIG)
// File này chứa tất cả các cấu hình tĩnh của ứng dụng.

const config = {
    ADMIN_PASSWORD: "Linh3031",
    COLUMN_MAPPINGS: {
        danhsachnv: {
            maKho: { required: true, displayName: 'Mã Kho', aliases: ['mã kho', 'makho', 'kho'] },
            maNV: { required: true, displayName: 'Mã Nhân Viên', aliases: ['mã nv', 'msnv', 'mã nhân viên', 'manv', 'mã số nhân viên'] },
            hoTen: { required: true, displayName: 'Họ và Tên', aliases: ['họ và tên', 'tên nhân viên', 'tên nv', 'họ tên'] },
            boPhan: { required: true, displayName: 'Bộ phận', aliases: ['bộ phận'] }
        },
        ycx: { // Dùng chung cho cả YCX lũy kế và YCX realtime
            ngayTao: { required: true, displayName: 'Ngày tạo', aliases: ['ngày tạo'] },
            ngayHenGiao: { required: false, displayName: 'Ngày hẹn giao', aliases: ['ngày hẹn giao'] },
            nguoiTao: { required: true, displayName: 'Người tạo', aliases: ['người tạo'] },
            thanhTien: { required: true, displayName: 'Giá bán', aliases: ['giá bán_1', 'giá bán'] },
            soLuong: { required: true, displayName: 'Số lượng', aliases: ['sl bán', 'số lượng'] },
            nhomHang: { required: true, displayName: 'Nhóm hàng', aliases: ['nhóm hàng'] },
            tenSanPham: { required: true, displayName: 'Tên sản phẩm', aliases: ['tên sản phẩm'] },
            tenKhachHang: { required: true, displayName: 'Tên khách hàng', aliases: ['tên khách hàng', 'tenkhachhang'] },
            nhaSanXuat: { required: true, displayName: 'Nhà sản xuất', aliases: ['nhà sản xuất', 'nhasanxuat'] },
            nganhHang: { required: true, displayName: 'Ngành hàng', aliases: ['ngành hàng'] },
            hinhThucXuat: { required: true, displayName: 'Hình thức xuất', aliases: ['hình thức xuất'] },
            trangThaiThuTien: { required: true, displayName: 'Trạng thái thu tiền', aliases: ['trạng thái thu tiền'] },
            trangThaiHuy: { required: true, displayName: 'Trạng thái hủy', aliases: ['trạng thái hủy'] },
            tinhTrangTra: { required: true, displayName: 'Tình trạng trả', aliases: ['tình trạng nhập trả của sản phẩm đổi với sản phẩm chính', 'tình trạng trả'] },
            trangThaiXuat: { required: true, displayName: 'Trạng thái xuất', aliases: ['trạng thái xuất'] }
        },
        giocong: {
            maNV: { required: false, displayName: 'Mã NV', aliases: ['mã nv', 'msnv'] },
            hoTen: { required: false, displayName: 'Tên NV', aliases: ['tên nv', 'tennv'] },
            tongGioCong: { required: true, displayName: 'Tổng giờ công', aliases: ['tổng giờ công (x.nhận) total', 'tổng giờ công'] }
        },
        thuongnong: {
            maNV: { required: false, displayName: 'Mã NV', aliases: ['manv', 'mã nv'] },
            hoTen: { required: false, displayName: 'Tên NV', aliases: ['tennv', 'tên nv'] },
            diemThuong: { required: true, displayName: 'Điểm thưởng', aliases: ['diemthuong', 'điểm thưởng'] }
        }
    },
    PRODUCT_GROUPS: {
        ICT: ['1491', '931', '42'],
        CE: ['1097', '1098', '1099', '1094', '894'],
        PHU_KIEN: ['16', '1394', '184', '764'], // 16 - Phụ kiện tiện ích, 1394 - Phụ kiện lắp đặt, 184 - Phụ kiện trang trí, 764 - Loa vi tính
        GIA_DUNG: ['484', '1214'], // Mã ngành hàng Gia Dụng
        MAY_LOC_NUOC: ['4171', '4172'], // Mã nhóm hàng Máy Lọc Nước
        PIN_SDP: '12',
        CAMERA_TRONG_NHA: '6479',
        CAMERA_NGOAI_TROi: '4219',
        TAI_NGHE_BLT: '4540',
        NOI_CHIEN: '4099',
        ROBOT_HB: '4439',
        TIVI: '1094',
        TU_LANH: '1097',
        MAY_GIAT: '1099',
        MAY_LANH: '1098',
        DIEN_THOAI: ['13', '1491', '18'],
        LAPTOP: '42',
        SIM: ['1891', '664'],
        VAS: ['164', '571'],
        BAO_HIEM_VAS: ['4479', '4499'],
        SMARTPHONE: ['1491', '18', '13'],
        BAO_HIEM_DENOMINATOR: ['1491', '1097', '894', '1099', '1098', '42', '1094', '3859', '911', '893', '3659'],
        QDC_GROUPS: {
            PIN_SDP: { codes: ['12'], name: 'Pin SDP' },
            TAI_NGHE_BLT: { codes: ['3346', '4540'], name: 'Tai nghe BLT' },
            DONG_HO: { codes: ['4059', '4060', '4061', '4062', '4063', '4064', '4070'], name: 'Đồng hồ' },
            CAMERA: { codes: ['4219', '6479'], name: 'Camera' },
            LOA: { codes: ['1031', '1351', '4779'], name: 'Loa' },
            UDDD: { codes: ['571', '611'], name: 'UDDĐ' },
            BAO_HIEM: { codes: ['4479', '4499'], name: 'Bảo hiểm' },
            NOI_COM: { codes: ['4157', '4158'], name: 'Nồi cơm điện tử + cao tần' },
            NOI_CHIEN: { codes: ['4099'], name: 'Nồi chiên' },
            MAY_LOC_NUOC: { codes: ['4171', '4172'], name: 'Máy lọc nước' },
            ROBOT_HB: { codes: ['4439'], name: 'Robot hút bụi' },
            SIM_ONLINE: { codes: ['1891'], name: 'SIM' }
        }
    },
    DEPARTMENT_GROUPS: [
        'BP Tư Vấn - ĐM',
        'BP Trang Trí kiêm Thu ngân - Sim Số - ĐM',
        'BP Kho Kiêm Hỗ Trợ Kỹ Thuật Xe Đạp - ĐM'
    ],
    DEFAULT_DATA: {
        HINH_THUC_XUAT_TINH_DOANH_THU: [
            'Xuất bán hàng tại siêu thị', 'Xuất cung ứng dịch vụ',
            'Xuất bán pre-order tại siêu thị', 'Xuất SIM trắng kèm theo SIM',
            'Xuất bán hàng ưu đãi cho nhân viên', 'Xuất bán hàng tại siêu thị (TCĐM)',
            'Xuất dịch vụ bảo hành trọn đời', 'Xuất dịch vụ bảo dưỡng trọn đời',
            'Xuất bán hàng trả góp tại siêu thị', 'Xuất bán trả góp ưu đãi cho nhân viên',
            'Xuất bán trả góp cho NV phục vụ công việc', 'Xuất bán pre-order trả góp tại siêu thị',
            'Xuất bán pre-order trả góp tại siêu thị (TCĐM)',
            'Xuất dịch vụ thu hộ bảo hiểm'
        ],
        HINH_THUC_XUAT_TRA_GOP: ['Xuất bán hàng trả góp tại siêu thị', 'Xuất bán trả góp ưu đãi cho nhân viên', 'Xuất bán trả góp cho NV phục vụ công việc', 'Xuất bán pre-order trả góp tại siêu thị', 'Xuất bán pre-order trả góp tại siêu thị (TCĐM)'],
        HE_SO_QUY_DOI: { '1098 - Máy lạnh (IMEI)': 1, '2011 - Khuyến mãi - SP Ảo': 1, '2511 - Nạp tiền AirTime M_Service': 1, '2151 - Phiếu mua hàng/Pre Order': 1, '971 - Thẻ cào điện tử': 1, '431 - Ốp Lưng - Flip Cover': 3.37, '2571 - Thu hộ cước Viettel': 1, '4519 - Thu Hộ Tiền Trả Góp': 1, '2513 - Thu hộ Payoo': 1, '4302 - Nón bảo hiểm các loại': 1.92, '2291 - Sim trắng (Seri)': 1, '18 - Điện Thoại Di Động': 1, '4599 - Thu Hộ Tiền Mặt': 1, '12 - Pin sạc dự phòng': 3.37, '571 - UDDĐ': 1, '58 - Miếng dán mặt sau': 3.37, '1231 - Miếng dán mặt trước': 3.37, '1491 - Smartphone': 1, '1891 - Sim Online': 5.45, '4479 - Dịch Vụ Bảo Hiểm': 4.18, '3359 - Phụ kiện đồng hồ': 3, '2391 - Smartwatch': 3, '911 - Máy nước nóng': 1, '4499 - Thu Hộ Phí Bảo Hiểm': 4.18, '4142 - Bình đun siêu tốc': 1.85, '4153 - Xay Sinh tố': 1.85, '15 - Tai nghe dây': 3.37, '1412 - Dịch vụ bảo trì': 1, '3345 - Cáp': 3.37, '2312 - Mã nạp thẻ game': 1, '4900 - Bàn phím': 3.37, '4141 - Bàn ủi khô': 1.85, '4156 - Nồi cơm nắp gài/nắp rời': 1.85, '14 - Sạc/ Adapter': 3.37, '42 - Laptop': 1.2, '751 - Khuyến mãi ba lô, túi xách': 1, '1031 - Loa di động': 3.37, '4199 - Miếng Dán Kính': 3.37, '3346 - Tai Nghe Bluetooth': 3.37, '931 - Máy tính bảng': 1.2, '19 - Khuyến mãi ĐTDĐ': 1, '10 - Chuột': 3.37, '4060 - Đồng hồ Nam Dây da': 3, '880 - Loa Karaoke': 1.29, '851 - Khuyến mãi Điện Tử': 1, '4169 - Lõi lọc': 1.85, '4540 - Tai Nghe Bluetooth - imei': 3.37, '4062 - Đồng hồ Nữ Dây kim loại': 3, '2831 - Phụ kiện Apple': 3.37, '2691 - Bộ Sạc/Cáp/Adaptor (Giá Rẻ)': 3.37, '1351 - Loa vi tính (imei)': 3.37, '1094 - Tivi LED (IMEI)': 1, '4324 - Khung treo, giá đỡ': 3.37, '1099 - Máy giặt (IMEI)': 1, '1097 - Tủ lạnh (IMEI)': 1, '4099 - Nồi chiên': 1.85, '4070 - Đồng hồ Trẻ em': 3, '967 - Sấy tóc': 1.85, '957 - Lò nướng': 1.85, '958 - Lò vi sóng': 1.85, '4158 - Nồi cơm điện tử': 1.85, '3241 - Dao/Kéo/Thớt': 1.92, '3240 - Hộp/Hũ': 1.92, '3265 - Nồi': 1.92, '4139 - Đèn bàn/Đèn Sạc/Đèn bắt muỗi': 1.85, '73 - Phụ kiện điện máy': 3.37, '4171 - Lọc nước dạng tủ đứng': 1.85, '3384 - Đồ nghề sử dụng điện': 1, '4147 - Bếp điện đơn': 1.85, '4063 - Đồng hồ Nữ Dây da': 3, '3263 - Chảo': 1.92, '3185 - Vệ sinh nhà cửa': 1.92, '4143 - Bàn ủi hơi nước đứng': 1.85, '4146 - Bếp gas đôi': 1.85, '1052 - Khuyến mãi Điện Lạnh': 1, '3799 - Quạt điều hòa': 1.85, '1951 - Software (số Lượng)': 1, '6000 - Máy ép trái cây': 1.85, '4059 - Đồng hồ Nam Dây kim loại': 3, '4160 - Quạt bàn/hộp/sạc': 1.85, '4162 - Bình/Ca đựng nước': 1.92, '4660 - Quạt lửng': 1.85, '17 - Phụ kiện IT khác': 3.37, '4145 - Bếp gas đơn': 1.85, '875 - Dàn máy': 1, '1071 - Phụ kiện điện tử': 3.37, '891 - Micro': 1, '4152 - Ổ cắm điện/vợt muỗi': 1.85, '4154 - Xay ép/Khác': 1.85, '5975 - Balo Túi Chống Sốc': 3.37, '893 - Tủ đông': 1, '2531 - Thu hộ Mservice': 1, '4019 - Sim trắng điện tử': 1, '4320 - Đồng hồ - Khuyến mãi mua': 1, '3187 - Bình/Ly/Ca giữ nhiệt': 1.92, '4159 - Quạt đứng': 1.85, '4157 - Nồi cơm cao tần': 1.85, '16 - Thẻ Nhớ': 3.37, '4140 - Bàn ủi hơi nước': 1.85, '4150 - Máy nước nóng lạnh': 1.85, '591 - Thay sim': 1, '2999 - Dụng cụ nhà bếp khác': 1.92, '4779 - Loa di động - imei': 3.37, '4440 - Gói Cước Và Dịch Vụ GTGT': 1, '4121 - Máy Bơm Nước': 1, '4161 - Quạt treo': 1.85, '4961 - Quần bó & legging nữ Thể Thao': 1, '4151 - Áp suất/lẩu/chiên/nướng': 1.85, '4144 - Bếp gas âm': 1.85, '871 - USB': 3.37, '6479 - Camera IP Trong nhà': 3.37, '4219 - Camera IP Ngoài trời': 3.37, '4659 - Phụ kiện tiện ích Apple': 3.37, '531 - Pin, 4095 - Cáp (Giá Rẻ)': 3.37, '2791 - Kinh doanh mùa vụ': 3.37, '2771 - Giá treo màn hình máy tính': 3.37, '80 - Khuyến mãi Khác': 1, '1131 - Máy in, Fax': 2, '4125 - Smartband': 3, '743 - Quạt sưởi': 1.85, '4659 - Phụ kiện Apple - Imei': 3.37, '4064 - Đồng hồ Nữ Dây khác': 3, '956 - Hút bụi': 1.85, '4172 - Lọc nước âm tủ/trên bàn': 1.85, '3779 - Bếp điện âm': 1.85, '4061 - Đồng hồ Nam Dây khác': 3, '4067 - Đồng hồ Unisex Dây khác': 3, '1411 - Dịch vụ lắp đặt': 1, '4149 - Bình thủy điện': 1.85, '4148 - Bếp điện đôi': 1.85, '955 - Hút mùi/ hút khói': 1.85, '4699 - Gia dụng không điện khác': 1.92, '4859 - Xe đạp đường phố cổ điển': 1, '4759 - Phụ Kiện Xe Đạp': 1, '2471 - Thu hộ cước VinaPhone': 1, '3719 - Quần dài nữ Thể Thao': 1, '1051 - Khuyến mãi Điện gia dụng': 1, '3721 - Quần ngắn & váy nữ Thể Thao': 1, '410 - Phụ kiện TT khác': 3.37, '4155 - Hút bụi cây': 1.85, '3563 - Máy tính nguyên bộ': 1, '894 - Tủ mát': 1, '3639 - Máy lọc không khí': 1.85, '611 - Ứng dụng PC & Laptop': 1, '4089 - Đồng hồ Unisex Dây kim loại': 3, '4439 - Hút Bụi Robot': 1.85, '3740 - Áo T-shirt nam Thể Thao': 1, '4339 - Ổn Áp': 1, '4459 - Quạt Trần': 1.85, '2351 - Router - Imei': 3.37, '3159 - DV Internet và Truyền hình thu tiền': 1, '3659 - Máy sấy lồng ngang': 1, '3519 - Áo Bra Thể Thao': 1, '3479 - Thiết bị mạng khác': 3.37, '3859 - Máy rửa chén': 1 }
        }
    };

// Dòng cuối cùng này rất quan trọng. Nó "xuất khẩu" đối tượng config 
// để các file JavaScript khác có thể "nhập khẩu" và sử dụng.
export { config };

--- END FILE: ./config.js ---

--- START FILE: ./cors-config.json ---
[
  {
    "origin": [
      "http://127.0.0.1:5505",
      "https://4qlstmwg.netlify.app"
    ],
    "method": ["GET", "OPTIONS"],
    "responseHeader": ["Content-Type"],
    "maxAgeSeconds": 3600
  }
]
--- END FILE: ./cors-config.json ---

--- START FILE: ./create_snapshot.js ---
// Kịch bản Node.js chuyên dụng để tạo snapshot toàn diện cho dự án
// Phiên bản 1.1 - Mở rộng các loại file được hỗ trợ

const fs = require('fs');
const path = require('path');

// --- CẤU HÌNH ---
const config = {
    // Thư mục gốc để bắt đầu quét
    rootDirectory: '.', 
    // Tên file output
    outputFile: 'project_snapshot.txt',
    // ====> THAY ĐỔI QUAN TRỌNG <====
    // Các đuôi file cần lấy nội dung. Đã bổ sung .json, .svg, .md
    includeExtensions: ['.js', '.html', '.css', '.txt', '.json', '.svg', '.md'],
    // Các thư mục cần bỏ qua
    excludeDirectories: ['node_modules', '.git', '.history'] 
};

// --- LOGIC CHÍNH ---

// Hàm đệ quy để duyệt qua các thư mục
function walkDirectory(dir, filelist = []) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
        const filepath = path.join(dir, file);
        const stat = fs.statSync(filepath);

        // Nếu là thư mục và không nằm trong danh sách loại trừ -> tiếp tục duyệt
        if (stat.isDirectory() && !config.excludeDirectories.includes(file)) {
            filelist = walkDirectory(filepath, filelist);
        } 
        // Nếu là file và có đuôi file nằm trong danh sách cho phép -> thêm vào danh sách
        else if (stat.isFile() && config.includeExtensions.includes(path.extname(file))) {
            filelist.push(filepath);
        }
    });
    return filelist;
}

// Hàm chính để chạy kịch bản
function createSnapshot() {
    console.log('Bắt đầu quá trình tạo snapshot (phiên bản nâng cao)...');
    
    const allFiles = walkDirectory(config.rootDirectory);

    if (fs.existsSync(config.outputFile)) {
        fs.unlinkSync(config.outputFile);
    }

    allFiles.forEach(filepath => {
        try {
            const content = fs.readFileSync(filepath, 'utf8');
            // Chuẩn hóa đường dẫn để luôn dùng dấu gạch chéo '/'
            const normalizedPath = path.normalize(filepath).replace(/\\/g, '/');
            const fileHeader = `--- START FILE: ./${normalizedPath} ---\n`;
            const fileFooter = `\n--- END FILE: ./${normalizedPath} ---\n\n`;
            
            fs.appendFileSync(config.outputFile, fileHeader);
            fs.appendFileSync(config.outputFile, content);
            fs.appendFileSync(config.outputFile, fileFooter);
        } catch (err) {
            console.error(`Lỗi khi đọc file ${filepath}:`, err);
        }
    });

    console.log(`\x1b[32m%s\x1b[0m`, `✅ Đã tạo thành công file '${config.outputFile}' với ${allFiles.length} file.`);
}

// Chạy hàm chính
createSnapshot();
--- END FILE: ./create_snapshot.js ---

--- START FILE: ./dashboard.css ---
/* Version 6.11 - Add styles for declaration accordion */
/* Version 6.10 - Fix CSS selector for Thi đua vùng 4-column layout */
/* Version 6.9 - Fix missing curly brace for .modal__container--large */
/* Version 6.8 - Adjust Thi đua vùng layout (4 cols) & summary colors */
/* Version 6.7 - Add login modal styles to v6.6 base */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

:root {
    --global-font-size: 18px;
    --kpi-main-font-size: 36px;
    --bg-lightness-1: 98%; --header-lightness-1: 96%; --header-text-lightness-1: 25%; --special-header-lightness-1: 92%; --below-target-lightness-1: 96%;
    --bg-lightness-2: 96%; --header-lightness-2: 94%; --header-text-lightness-2: 22%; --special-header-lightness-2: 88%; --below-target-lightness-2: 94%;
    --bg-lightness-3: 94%; --header-lightness-3: 92%; --header-text-lightness-3: 18%; --special-header-lightness-3: 85%; --below-target-lightness-3: 92%; /* Normal */
    --bg-lightness-4: 92%; --header-lightness-4: 88%; --header-text-lightness-4: 15%; --special-header-lightness-4: 80%; --below-target-lightness-4: 88%;
    --bg-lightness-5: 90%; --header-lightness-5: 84%; --header-text-lightness-5: 12%; --special-header-lightness-5: 75%; --below-target-lightness-5: 84%;
    --bg-lightness-6: 88%; --header-lightness-6: 80%; --header-text-lightness-6: 10%; --special-header-lightness-6: 70%; --below-target-lightness-6: 80%;
    --kpi-card-1-bg: #38bdf8;
    --kpi-card-2-bg: #34d399; --kpi-card-3-bg: #fbbf24;
    --kpi-card-4-bg: #2dd4bf; --kpi-card-5-bg: #a78bfa; --kpi-card-6-bg: #f472b6;
    --kpi-card-7-bg: #818cf8;
    --kpi-card-8-bg: #f87171;
    --kpi-title-color: #ffffff;
    --kpi-main-color: #ffffff;
    --kpi-sub-color: #ffffff;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: #f3f4f6;
    font-size: var(--global-font-size);
}

html[data-contrast="1"] { --bg-lightness: var(--bg-lightness-1); --header-lightness: var(--header-lightness-1); --header-text-lightness: var(--header-text-lightness-1); --special-header-lightness: var(--special-header-lightness-1); --below-target-lightness: var(--below-target-lightness-1); }
html[data-contrast="2"] { --bg-lightness: var(--bg-lightness-2); --header-lightness: var(--header-lightness-2); --header-text-lightness: var(--header-text-lightness-2); --special-header-lightness: var(--special-header-lightness-2); --below-target-lightness: var(--below-target-lightness-2); }
html[data-contrast="3"] { --bg-lightness: var(--bg-lightness-3); --header-lightness: var(--header-lightness-3); --header-text-lightness: var(--header-text-lightness-3); --special-header-lightness: var(--special-header-lightness-3); --below-target-lightness: var(--below-target-lightness-3); }
html[data-contrast="4"] { --bg-lightness: var(--bg-lightness-4); --header-lightness: var(--header-lightness-4); --header-text-lightness: var(--header-text-lightness-4); --special-header-lightness: var(--special-header-lightness-4); --below-target-lightness: var(--below-target-lightness-4); }
html[data-contrast="5"] { --bg-lightness: var(--bg-lightness-5); --header-lightness: var(--header-lightness-5); --header-text-lightness: var(--header-text-lightness-5); --special-header-lightness: var(--special-header-lightness-5); --below-target-lightness: var(--below-target-lightness-5); }
html[data-contrast="6"] { --bg-lightness: var(--bg-lightness-6); --header-lightness: var(--header-lightness-6); --header-text-lightness: var(--header-text-lightness-6); --special-header-lightness: var(--special-header-lightness-6); --below-target-lightness: var(--below-target-lightness-6); }


::-webkit-scrollbar { width: 8px; }
::-webkit-scrollbar-track { background: #f1f1f1; }
::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
::-webkit-scrollbar-thumb:hover { background: #555; }

#sidebar { width: 68px; transition: width 0.3s ease-in-out; overflow-x: hidden; }
#sidebar:hover { width: 256px; }
#sidebar.menu-locked:hover { width: 68px; }

#sidebar .nav-link, #sidebar button {
    white-space: nowrap;
    gap: 1rem;
    justify-content: flex-start; /* FIX: Canh lề trái cho icon và text */
}

.menu-text {
    transition: opacity 0.2s ease-in-out, width 0.3s ease-in-out;
    opacity: 0;
    white-space: nowrap;
    width: 0;
    overflow: hidden;
}
#sidebar:hover .menu-text {
    opacity: 1;
    transition-delay: 0.1s;
    width: auto;
}
#sidebar.menu-locked:hover .menu-text {
    opacity: 0;
    width: 0;
}

#main-content { transition: margin-left 0.3s ease-in-out; margin-left: 68px; }

.nav-link,
.action-btn,
.kpi-card,
.content-card,
.tdv-item-card,
.data-input-group,
.toggle-filters-btn,
.page-header__help-btn,
.column-toggle-btn {
    transition: all 0.2s ease-in-out;
}

/* === BẮT ĐẦU: NÂNG CẤP UI CHO SUB-TAB (V5.9) === */
.sub-tab-btn {
    border-bottom: 3px solid transparent;
    padding: 0.75rem 0.5rem;
    transition: all 0.2s ease-in-out;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}
.sub-tab-btn:not(.active):hover {
    background-color: #f3f4f6;
    border-bottom-color: #d1d5db;
    transform: translateY(-2px);
}
.sub-tab-btn.active {
    border-color: #3b82f6;
    color: #2563eb;
    background-color: transparent;
}
.sub-tab-btn .feather {
    width: 1.2rem;
    height: 1.2rem;
    stroke-width: 2.5;
    transition: all 0.2s ease-in-out;
}
.sub-tab-btn.active .feather {
    color: white;
    background-color: #3b82f6;
    border-radius: 9999px;
    padding: 4px;
}
/* Tô màu icon theo từng tab */
.sub-tab-btn[data-title*="SieuThi"].active .feather,
.sub-tab-btn[data-title*="Vung"].active .feather { background-color: #3b82f6; } /* Blue */

.sub-tab-btn[data-title*="SKNV"].active .feather,
.sub-tab-btn[data-title*="ThuNhap"].active .feather,
.sub-tab-btn[data-title*="DoanhThuLK"].active .feather,
.sub-tab-btn[data-title*="DTNVRealtime"].active .feather { background-color: #16a34a; } /* Green */

.sub-tab-btn[data-title*="ThiDua"].active .feather { background-color: #8b5cf6; } /* Violet */

.sub-tab-btn[data-title*="HieuQua"].active .feather,
.sub-tab-btn[data-title*="NganhHang"].active .feather,
.sub-tab-btn[data-title*="HangRealtime"].active .feather { background-color: #f97316; } /* Orange */
/* === KẾT THÚC: NÂNG CẤP UI CHO SUB-TAB === */


.nav-link:hover,
.action-btn:hover,
.kpi-card:hover,
.content-card:hover,
.data-input-group:hover,
.toggle-filters-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.tdv-item-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}
.page-header__help-btn:hover {
    transform: scale(1.1) translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.settings-drawer { width: 400px; max-width: 90vw; transform: translateX(-100%); transition: transform 0.3s ease-in-out; }
.settings-drawer.open { transform: translateX(0); }
.close-drawer-btn { font-size: 2rem; line-height: 1; }
input[type="range"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: #e5e7eb; border-radius: 5px; outline: none; transition: background 0.2s; }
input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 20px; height: 20px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.2); }
input[type="range"]::-moz-range-thumb { width: 20px; height: 20px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.2); }

.page-header { display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center; gap: 1rem; margin-bottom: 1.5rem; }
.page-header__title { font-size: 1.75rem; font-weight: 700; color: #1f2937; }
.content-card { background-color: white; border-radius: 0.75rem; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); padding: 1rem 1.5rem; margin-bottom: 2rem; border: 1px solid #e5e7eb; }
.content-card__header { display: flex; align-items: center; justify-content: space-between; font-size: 1.125rem; font-weight: 600; color: #374151; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid #e5e7eb; }

#notification { position: fixed; bottom: 20px; right: 20px; padding: 1rem 1.5rem; border-radius: 0.5rem; color: white; z-index: 1200; opacity: 0; transition: opacity 0.5s, transform 0.5s; transform: translateY(100px); }
#notification.show { opacity: 1; transform: translateY(0); }
.notification-success { background-color: #28a745; }
.notification-error { background-color: #dc3545; }
.placeholder-message { border: 2px dashed #f59e0b; background-color: #fffbeb; color: #b45309; padding: 2rem; border-radius: 0.75rem; text-align: center; font-weight: 600; }

[id$='-subtabs-nav'] { flex-wrap: wrap; }
.sortable { cursor: pointer; position: relative; user-select: none; }
.sort-indicator { display: inline-flex; flex-direction: column; align-items: center; justify-content: center; width: 1em; height: 1em; margin-left: 4px; vertical-align: middle; color: #9ca3af; transition: color 0.2s ease-in-out; }
.sortable .sort-indicator::before { content: '▲'; font-size: 0.8em; line-height: 0.5; opacity: 0.4; }
.sortable .sort-indicator::after { content: '▼'; font-size: 0.8em; line-height: 0.5; opacity: 0.4; }
.sortable:hover .sort-indicator { color: #374151; }
.sortable.sorted-asc .sort-indicator::before { opacity: 1; color: #3b82f6; }
.sortable.sorted-asc .sort-indicator::after { opacity: 0.4; }
.sortable.sorted-desc .sort-indicator::after { opacity: 1; color: #3b82f6; }
.sortable.sorted-desc .sort-indicator::before { opacity: 0.4; }

.data-input-group {
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 1rem;
    background-color: #f9fafb;
    display: flex;
    flex-direction: column;
    border-top: 4px solid #9ca3af;
}

#data-section > .content-card:nth-of-type(1) .data-input-group { border-top-color: #3b82f6; }
#data-section > .content-card:nth-of-type(3) .data-input-group { border-top-color: #8b5cf6; }
.data-input-group__label { font-weight: 600; color: #4b5563; margin-bottom: 0.75rem; }
.data-input-group__label--link { text-decoration: none; display: inline-block; }
.data-input-group__label--link:hover { text-decoration: underline; color: #2563eb; }
.data-input-group__label--link > .font-normal { font-weight: 400; }
.data-input-group__content { display: flex; flex-direction: column; gap: 0.5rem; flex-grow: 1; }
.data-input-group__file-trigger { cursor: pointer; background-color: #e5e7eb; color: #374151; padding: 0.5rem 1rem; border-radius: 0.375rem; font-size: 0.875em; font-weight: 500; white-space: nowrap; }
.data-input-group__file-trigger:hover { background-color: #d1d5db; }
.data-input-group__file-name { font-size: 0.875em; color: #6b7280; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
.data-input-group__link { color: #2563eb; text-decoration: none; font-size: 0.875em; }
.data-input-group__link:hover { text-decoration: underline; }
.data-input-group__status-wrapper { min-height: 1rem; margin-top: 0.25rem; }
.data-input-group__status-text { font-size: 0.875em; font-weight: 500; }
.data-input-group__status-text--default { color: #6b7280;
}
.data-input-group__status-text--success { color: #16a34a; }
.data-input-group__status-text--error { color: #dc2626; }
.data-textarea { width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.375rem; font-size: 0.875em; font-family: 'Inter', sans-serif; }
.data-textarea:focus { outline: 2px solid transparent; outline-offset: 2px; border-color: #3b82f6; box-shadow: 0 0 0 1px #3b82f6; }
.progress-bar-container { overflow: hidden; }
.progress-bar { background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent); background-size: 1rem 1rem; animation: progress-bar-stripes 1s linear infinite; }
@keyframes progress-bar-stripes { from { background-position: 1rem 0; } to { background-position: 0 0; } }

.table-bordered { border-collapse: collapse; }
.table-bordered th, .table-bordered td { border: 1px solid #e5e7eb; }
.table-striped tbody tr:nth-child(even) { background-color: #f9fafb; }
.table-footer { background-color: hsl(210, 20%, var(--header-lightness));
border-top: 2px solid #9ca3af; }
.cell-performance.is-below { background-color: hsl(0, 80%, var(--below-target-lightness)) !important; }
.header-bg-blue { background-color: hsl(217, 95%, var(--special-header-lightness)) !important; color: hsl(217, 80%, var(--header-text-lightness)) !important; }
.header-bg-green { background-color: hsl(145, 80%, var(--special-header-lightness)) !important; color: hsl(145, 70%, var(--header-text-lightness)) !important; }
.header-bg-yellow { background-color: hsl(45, 95%, var(--special-header-lightness)) !important; color: hsl(45, 80%, var(--header-text-lightness)) !important; }

.interactive-row {
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
    cursor: pointer; /* Ensure interactive rows are clickable */
}
.interactive-row:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    background-color: #eff6ff;
}
.interactive-row .employee-name-cell {
    cursor: pointer;
    color: #2563eb;
    transition: color 0.2s ease-out;
}
.interactive-row:hover .employee-name-cell {
    text-decoration: underline;
    color: #1d4ed8;
}

.header-group-1 { background-color: hsl(30, 90%, var(--header-lightness)); }
.header-group-2 { background-color: hsl(90, 90%, var(--header-lightness)); }
.header-group-3 { background-color: hsl(180, 90%, var(--header-lightness)); }
.header-group-4 { background-color: hsl(240, 90%, var(--header-lightness)); }
.header-group-5 { background-color: hsl(300, 90%, var(--header-lightness)); }
.header-group-6 { background-color: hsl(0, 90%, var(--header-lightness)); }
.header-group-7 { background-color: hsl(160, 80%, var(--header-lightness)) !important; }
.header-group-8 { background-color: hsl(280, 80%, var(--header-lightness)) !important; }
.header-group-9 { background-color: hsl(70, 80%, var(--header-lightness)) !important; }
.header-group-10 { background-color: hsl(190, 80%, var(--header-lightness)) !important; }
.header-group-11 { background-color: hsl(340, 80%, var(--header-lightness)) !important; }
.header-group-12 { background-color: hsl(20, 80%, var(--header-lightness)) !important; }

.income-positive { color: #16a34a; }
.income-negative { color: #dc2626; }
.line-clamp-2 { display: -webkit-box; -webkit-line-clamp: 2; line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
.department-header-tv { background-color: #e0e7ff;
color: #3730a3; }
.department-header-kho { background-color: #d1fae5; color: #065f46; }
.department-header-tt { background-color: #fef3c7; color: #92400e; }
.category-header-ict { background-color: #dbeafe; color: #1e40af; }
.category-header-phukien { background-color: #fee2e2; color: #991b1b; }
.category-header-giadung { background-color: #fef9c3; color: #854d0e; }
.category-header-ce { background-color: #e0f2fe; color: #0c4a6e; }
.category-header-baohiem { background-color: #f3e8ff; color: #6b21a8; }
.header-bg-indigo { background-color: #e0e7ff; color: #3730a3; }
.header-bg-purple { background-color: #f3e8ff; color: #6b21a8; }
.qdc-group-title { font-weight: 600; }
.qdc-group-ict { background-color: hsl(190, 80%, var(--special-header-lightness)); }
.qdc-group-vas { background-color: hsl(140, 80%, var(--special-header-lightness)); }
.qdc-group-giadung { background-color: hsl(0, 80%, var(--special-header-lightness)); }
.qdc-group-sim { background-color: hsl(40, 80%, var(--special-header-lightness)); }
.competition-header-doanhthu { border-color: #a78bfa; background-color: hsl(260, 90%, var(--bg-lightness)); }
.competition-header-soluong { border-color: #facc15; background-color: hsl(50, 90%, var(--bg-lightness)); }
.header-highlight-special { background-color: hsl(25, 90%, var(--header-lightness)) !important; }
.competition-row-below-100 td { background-color: #fee2e2; color: #991b1b; }

.header-highlight { background-color: hsl(50, 95%, var(--special-header-lightness)) !important; }

#dtnv-realtime-employee-selector-container .choices__inner { min-width: 300px; }
#dtnv-realtime-employee-selector-container .choices__list--single { min-width: 300px; }

.kpi-card-title { color: var(--kpi-title-color); opacity: 0.8; font-size: 1em; }
.kpi-card p[id$="-main"] { color: var(--kpi-main-color); font-size: var(--kpi-main-font-size);
transition: font-size 0.2s ease-in-out; }
.kpi-card p[id$="-sub"], .kpi-card p[id$="-sub1"], .kpi-card p[id$="-sub2"] { color: var(--kpi-sub-color); font-size: 1em; }

.kpi-percentage, .kpi-percentage-value { font-weight: 700; }
.kpi-sub-value { opacity: 0.9; }
#luyke-kpi-cards-container .kpi-card:nth-child(1), #realtime-kpi-cards-container .kpi-card:nth-child(1) { background-color: var(--kpi-card-1-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(2), #realtime-kpi-cards-container .kpi-card:nth-child(2) { background-color: var(--kpi-card-2-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(3), #realtime-kpi-cards-container .kpi-card:nth-child(3) { background-color: var(--kpi-card-3-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(4), #realtime-kpi-cards-container .kpi-card:nth-child(4) { background-color: var(--kpi-card-4-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(5) { background-color: var(--kpi-card-5-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(6) { background-color: var(--kpi-card-6-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(7) { background-color: var(--kpi-card-7-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(8) { background-color: var(--kpi-card-8-bg); }

#sknv-details-container .sknv-subtable-header th { font-size: 0.875em; font-weight: 600; background-color: #f3f4f6; }
.choices__inner { min-height: 42px; }
.choices__list--multiple .choices__item { background-color: #3b82f6; border-color:
#2563eb; }
.toggle-filters-btn { display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.5rem 1rem; border-radius: 0.5rem; background-color: #f3f4f6; color: #4b5563; font-weight: 500; font-size: 0.875em; cursor: pointer; margin-bottom: 1rem; border: 1px solid #e5e7eb; }
.toggle-filters-btn .icon { width: 1rem; height: 1rem; transition: transform 0.3s ease-in-out; }
.toggle-filters-btn.active .icon { transform: rotate(180deg); }
.highlight-trigger { background: none; border: none; cursor: pointer; color: #6b7280; }
.highlight-trigger:hover { color: #1d4ed8; }
.highlighted-row td { animation: pulse-bg 2s infinite; }
@keyframes pulse-bg { 0% { background-color: var(--highlight-color, #ffff99); } 50% { background-color: var(--highlight-color-light, #ffffcc); } 100% { background-color: var(--highlight-color, #ffff99); } }

.action-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    font-size: 0.875em;
    cursor: pointer;
    border: 1px solid transparent;
}
.action-btn--composer {
background-color: #ede9fe; color: #5b21b6; border-color: #c4b5fd; }
.action-btn--composer:hover { background-color: #d8b4fe; }
.action-btn--export { background-color: #dcfce7; color: #166534; border-color: #86efac; }
.action-btn--export:hover { background-color: #bbf7d0; }
.action-btn--capture { background-color: #dbeafe; color: #1e40af; border-color: #93c5fd; }
.action-btn--capture:hover { background-color: #bfdbfe; }
.action-btn--save { background-color: #16a34a; color: white; }
.action-btn--save:hover { background-color: #15803d; }
.action-btn--copy { background-color: #2563eb; color: white; }
.action-btn--copy:hover { background-color: #1d4ed8; }
.page-header__help-btn { background-color: #fee2e2; color: #991b1b; border-radius: 9999px; width: 2rem; height: 2rem; display: inline-flex; align-items: center; justify-content: center; border: none; }

.modal { position: fixed; inset: 0; z-index: 1000; display: flex; align-items: center; justify-content: center; }
.modal.hidden { display: none; }
.modal__overlay { position: absolute; inset: 0; background-color: rgba(17, 24, 39, 0.6); backdrop-filter: blur(4px); cursor: pointer; }
.modal__container { position: relative; z-index: 1001; background-color: white; border-radius: 0.75rem; box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1); width: 90%; max-width: 600px; max-height: 90vh; display: flex; flex-direction: column; }

#force-update-modal .modal__overlay { cursor: not-allowed; }

.modal__container--large {
    max-width: 900px;
}
.modal__header { padding: 1rem 1.5rem; border-bottom: 1px solid #e5e7eb; display: flex; justify-content: space-between; align-items: center; flex-shrink: 0; }
.modal__title { font-size: 1.25rem; font-weight: 600; color: #1f2937; }
.modal__close-btn { font-size: 1.75rem; line-height: 1; color: #6b7280; background: none; border: none; cursor: pointer; }
.modal__close-btn:hover { color: #111827; }
.modal__content { padding: 1.5rem; overflow-y: auto; flex-grow: 1; }
.modal__content h4 { font-size: 1.125rem; font-weight: 600; color: #1e3a8a; margin-bottom: 0.75rem; }
.modal__content p { margin-bottom: 0.75rem; color: #374151; line-height: 1.6; }
.modal__content ul { list-style-type: disc; list-style-position: inside; margin-left: 0.5rem; }
.modal__content ul > *
+ * { margin-top: 0.5rem; }
.modal__footer { padding: 1rem 1.5rem; border-top: 1px solid #e5e7eb; background-color: #f9fafb; display: flex; justify-content: flex-end; gap: 0.75rem; flex-shrink: 0; }

.composer { display: flex; flex-direction: column; gap: 1.5rem; }
.composer__editor { flex-grow: 1; }
.composer__tags { width: 100%; }
.composer__label { display: block; font-weight: 500; color: #374151; margin-bottom: 0.5rem; }
.composer__textarea { width: 100%; border: 1px solid #d1d5db; border-radius: 0.5rem; padding: 0.75rem; font-size: 0.875em; resize: vertical; }
.composer__textarea:focus { border-color: #3b82f6; box-shadow: 0 0 0 1px #3b82f6; outline: none; }
.composer__nav { display: flex; border-bottom: 1px solid #e5e7eb; margin-bottom: 1rem; }
.composer__tab-btn { padding: 0.5rem 1rem; border: none; background-color: transparent; cursor: pointer; font-weight: 500; color: #6b7280; border-bottom: 2px solid transparent; margin-bottom: -1px; font-size: 0.875em; }
.composer__tab-btn.active { color: #3b82f6; border-bottom-color: #3b82f6; }
.composer__tab-pane {
display: none; }
.composer__tab-pane.active { display: block; }
.composer__tag-group { margin-bottom: 1rem; }
.composer__tag-group:last-child { margin-bottom: 0; }
.composer__tag-group-title { font-weight: 600; font-size: 0.875em; color: #4b5563; margin-bottom: 0.75rem; border-bottom: 1px solid #e5e7eb; padding-bottom: 0.5rem; }
.composer__tag-btn { background-color: #e0e7ff; color: #3730a3; border: 1px solid #c7d2fe; border-radius: 9999px; padding: 0.25rem 0.75rem; font-size: 0.8rem; font-weight: 500; cursor: pointer; margin: 0.25rem; }
.composer__icon-btn { background-color: #f3f4f6; color: #1f2937; border: 1px solid #d1d5db; border-radius: 9999px; padding: 0.25rem 0.75rem; font-size: 1.1rem; font-weight: 500; cursor: pointer; margin: 0.25rem; line-height: 1; }
.composer__filter-group { margin-bottom: 1rem;
padding-bottom: 1rem; border-bottom: 1px solid #e5e7eb; }
.composer__select { width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.375rem; background-color: white; }
@media (min-width: 768px) { .composer { flex-direction: row; } .composer__tags { width: 350px; flex-shrink: 0; border-left: 1px
solid #e5e7eb; padding-left: 1.5rem; } }

.view-switcher { display: flex; align-items: center; padding: 0.25rem; background-color: #e5e7eb; border-radius: 0.5rem; }
.view-switcher__btn { padding: 0.5rem 1rem; border: none; background-color: transparent; border-radius: 0.375rem; font-weight: 500; color: #4b5563; cursor: pointer; }
.view-switcher__btn.active { background-color: white; color: #3b82f6; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1); }
.infographic-card { border: 1px solid #e5e7eb; border-radius: 0.5rem; overflow: hidden; }
.infographic-card__header { padding: 0.75rem 1rem; font-weight: 700; }
.infographic-card__header--completed { background-color: #dcfce7; color: #166534; }
.infographic-card__header--pending { background-color: #fee2e2; color: #991b1b; }
.infographic-card__body { padding: 1rem; background-color: #f9fafb; }
.infographic-card__item { border-bottom: 1px dashed #d1d5db; padding: 0.75rem 0; }
.infographic-card__item:last-child { border-bottom: none; }
.infographic-card__title { font-weight: 600; color: #1f2937; margin-bottom: 0.5rem; }
.infographic-card__metrics { display: grid; grid-template-columns: repeat(2, minmax(0, 1fr)); gap: 0.5rem 1rem; font-size:
0.875em; }
.metric-label { color: #6b7280; }
.metric-value { font-weight: 600; color: #111827; text-align: right; }
.metric-value.is-negative { color: #ef4444; }
.metric-value.is-positive { color: #22c55e; }

.rt-infographic-container { background-color: #f9fafb; border-radius: 0.75rem; border: 1px solid #e5e7eb; padding: 1.5rem; }
.rt-infographic-header .employee-name { font-size: 1.5rem; font-weight: 800; color: #111827; }
.rt-infographic-header .employee-title { font-size: 1rem; font-weight: 500; color: #6b7280; }
.rt-infographic-summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-top: 1.5rem; }
.rt-infographic-summary-card { background-color: white; border-radius: 0.5rem; padding: 1rem; text-align: center; border: 1px solid #e5e7eb; }
.rt-infographic-summary-card .label { font-size: 0.875em; color: #4b5563; font-weight: 500; }
.rt-infographic-summary-card .value { font-size: 1.75rem; font-weight: 700; color: #3b82f6; margin-top: 0.25rem; }
.rt-infographic-summary-card .value.is-positive { color: #2563eb; }
.rt-infographic-summary-card .value.is-negative { color: #dc2626; }
.rt-infographic-grid { display: grid; grid-template-columns: repeat(1, minmax(0, 1fr)); gap: 1.5rem; margin-top: 1.5rem; }
@media
(min-width: 1024px) { .rt-infographic-grid { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
.rt-infographic-section h4 { font-size: 1.125rem; font-weight: 700; color: #1f2937; margin-bottom: 1rem; }
.rt-progress-bar-item { margin-bottom: 0.75rem; }
.rt-progress-bar-label { display: flex; justify-content: space-between; font-size: 0.875em; font-weight: 500; margin-bottom: 0.25rem; }
.rt-progress-bar-container { background-color: #e5e7eb; border-radius: 9999px; height: 0.75rem; overflow: hidden; }
.rt-progress-bar { background-color: #22c55e; height: 100%; border-radius: 9999px; transition: width 0.5s ease-in-out; }
.rt-customer-accordion { max-height: 400px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 0.5rem; }
.rt-customer-header { background-color: white; padding: 0.75rem 1rem; border-bottom: 1px solid #e5e7eb; cursor: pointer; display: flex; justify-content: space-between; align-items: center; font-weight: 600; list-style: none; }
.rt-customer-header::-webkit-details-marker { display: none; }
.rt-customer-header:hover { background-color: #f9fafb; }
.rt-customer-header .arrow { transition: transform 0.3s; }
.rt-customer-header .product-count { color: #dc2626; font-weight: bold; }
details[open] > summary
.arrow { transform: rotate(180deg); }
.rt-customer-details { background-color: #f9fafb; padding: 1rem; }
.rt-customer-details table { font-size: 0.8rem; }
.preview-content { background-color: #f3f4f6; padding: 1rem; border-radius: 0.5rem; white-space: pre-wrap; word-wrap: break-word; font-size: 0.875em; line-height: 1.6; color: #1f2937; font-family: 'Inter', sans-serif; }

/* === BẮT ĐẦU: BỐ CỤC CHO THI ĐUA VÙNG & THI ĐUA LŨY KẾ (V5.9) === */
.tdv-rows-container { display: flex; flex-direction: column; gap: 1.5rem; }
#subtab-luyke-thi-dua .tdv-row-body {
    display: grid;
    grid-template-columns: 1fr; /* Mặc định 1 cột cho mobile */
    gap: 1rem;
}
@media (min-width: 768px) { /* 2 cột cho tablet trở lên */
    #subtab-luyke-thi-dua .tdv-row-body {
        grid-template-columns: repeat(2, 1fr);
    }
}
/* === END: BỐ CỤC MỚI === */

.tdv-infographic-card {
    background-color: transparent;
    border: none;
    box-shadow: none;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.tdv-header { text-align: center; margin-bottom: 2rem; }
.tdv-supermarket-name { font-size: 2em; font-weight: bold; color: #005f73; }
.tdv-total-prize-container { margin-top: 0.5rem; font-size: 1.5em; font-weight: bold; }
.tdv-total-prize-label { color: #6b7280; font-weight: normal; }
.tdv-total-prize-value { color: #d90429; margin-left: 0.5rem; }

.tdv-summary-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-top: 1.5rem; margin-bottom: 2rem; }
@media (min-width: 768px) { .tdv-summary-grid { grid-template-columns: repeat(5, 1fr); } }
.tdv-summary-item { background-color: #ffffff; border-radius: 8px;
padding: 1rem; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.05); border: 1px solid #e5e7eb; }
/* === START: Sửa màu và font-weight cho .tdv-summary-value === */
.tdv-summary-value {
    display: block;
    font-size: 1.75em;
    font-weight: 800; /* Tăng độ đậm */
    color: #005f73; /* Đổi màu xanh đậm hơn */
}
/* === END: Sửa màu === */
.tdv-summary-label { display: block; font-size: 0.9em; color: #4a5568; margin-top: 0.25rem; }
/* === START: Thêm class màu cho tỷ lệ đạt === */
.tdv-tyledat-high { color: #2563eb !important; } /* blue-600 */
.tdv-tyledat-low { color: #dc2626 !important; } /* red-600 */
/* === END: Thêm class màu === */

.tdv-row { background-color: #fdfdfd; border-radius: 8px; padding: 1rem; border: 1px solid #dee2e6; }
.tdv-row-title { font-size: 1.2em; font-weight: bold; padding-bottom: 0.75rem; margin-bottom: 1rem; border-bottom: 2px solid; line-height: 1.3; }
.tdv-row-title--prize { border-color: #0d6efd; color: #0d6efd; }
.tdv-row-title--soon-prize { border-color: #e9c46a; color: #e9c46a; }
.tdv-row-title--effort { border-color: #6c757d; color: #6c757d; }
.tdv-row-subtitle { font-size: 0.8em; font-weight: normal; color: #d90429; }

/* === START: Sửa layout 4 cột cho Thi đua vùng (SỬA LẠI SELECTOR) === */
/* *** FIX: Corrected CSS selector to use #subtab-luyke-thidua-vung *** */
#subtab-luyke-thidua-vung .tdv-row-body {
    display: grid;
    grid-template-columns: repeat(1, 1fr); /* 1 cột cho mobile */
    gap: 1rem;
}
@media (min-width: 768px) { /* 2 cột cho tablet */
    #subtab-luyke-thidua-vung .tdv-row-body {
        grid-template-columns: repeat(2, 1fr);
    }
}
@media (min-width: 1280px) { /* 4 cột cho desktop lớn */
    #subtab-luyke-thidua-vung .tdv-row-body {
        grid-template-columns: repeat(4, 1fr);
    }
}
/* === END: Sửa layout === */
.tdv-row-body--effort { display: block; }

.tdv-item-card { background: #fff; border: 1px solid #e0e0e0; border-radius: 6px;
padding: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.05); overflow: hidden; }
.tdv-item-card__title { font-weight: bold;
margin: 0 0 10px 0; color: #333; }
.tdv-progress-bar-container {
    width: 100%;
    background-color: #e9ecef;
    border-radius: 20px;
    height: 28px;
    position: relative;
    font-size: 0.85em;
    font-weight: bold;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}
.tdv-progress-bar { height: 100%; transition: width 0.5s ease; position: absolute; top: 0; left: 0; }
.tdv-progress-bar--blue { background-color: #0d6efd; }
.tdv-progress-bar--yellow { background-color: #e9c46a; }
.tdv-progress-bar__text {
    position: relative;
    z-index: 1;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.4);
    color: white;
}
.tdv-item-card__details { font-size: 0.85em; color: #555; margin-top: 8px; display: grid; grid-template-columns: repeat(3, 1fr); gap: 5px; }
.tdv-item-card__details span { display: block; }
.tdv-item-card__details strong { color: #000; }
.tdv-item-card__prize { grid-column: 1 / -1; font-weight:
bold !important; color: #d90429; margin-top: 4px; }

.tdv-effort-subgroup { margin-bottom: 1rem; }
.tdv-effort-subgroup:last-child { margin-bottom: 0; }
.tdv-effort-subgroup__title { font-weight: bold; margin: 0 0 10px 0; padding-bottom: 5px; border-bottom: 1px solid #dee2e6; }
.tdv-effort-subgroup__title--potential { color: #fd7e14; }
.tdv-effort-subgroup__title--major { color: #6c757d; }
.tdv-effort-list { display: flex; flex-wrap: wrap; gap: 8px; }
.tdv-effort-item { background-color: #f1f3f5; color: #495057; padding: 5px 10px; border-radius: 15px; font-size: 0.9em; }

#video-container iframe {
    aspect-ratio: 16 / 9;
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
}

#feedback-list-container {
    max-height: 600px;
    overflow-y: auto;
}
#goal-drawer .choices__inner {
    min-width: 250px;
}

#goal-drawer .choices__list--dropdown,
#goal-drawer .choices__list[aria-expanded] {
    min-width: 100%;
    width: auto;
    word-break: normal;
}

#goal-drawer .choices__list--multiple .choices__item {
    display: inline-flex;
    align-items: center;
    background-color: #3b82f6;
    border: 1px
solid #2563eb;
    color: white;
    border-radius: 9999px;
    padding: 2px 8px;
    font-size: 0.8em;
    font-weight: 500;
    margin: 2px 4px 2px 0;
}
#goal-drawer .choices__inner {
    height: auto !important;
    min-height: 42px !important;
    display: flex !important;
    flex-wrap: wrap !important;
}
.header-qr-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  border: 2px solid #ef4444; /* red-500 */
  padding: 4px;
  border-radius: 8px;
  background-color: white;
}
.header-qr-container span {
  font-size: 0.75rem; /* 12px */
  font-weight: 600;
  color: #b91c1c; /* red-700 */
}
.header-qr-image {
  width: 50px;
  height: 50px;
  background-color: #f3f4f6;
  border-radius: 4px;
}
.selection-item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
}
.selection-item:hover {
    background-color: #f3f4f6; /* gray-100 */
}
.selection-item input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
    margin-right: 0.75rem;
}
.selection-item label {
    flex-grow: 1;
    cursor: pointer;
}
.settings-trigger-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: #9ca3af; /* gray-400 */
    transition: color 0.2s ease-in-out, transform 0.2s ease-in-out;
    padding: 2px;
}
.settings-trigger-btn:hover {
    color: #3b82f6; /* blue-500 */
    transform: rotate(45deg);
}
.settings-trigger-btn svg {
    width: 18px;
    height: 18px;
    display: block;
}

#version-marquee-container {
    flex-grow: 1;
    margin: 0 1.5rem;
    overflow: hidden;
    position: relative;
    background-color: #eef2ff;
    border: 1px solid #c7d2fe;
    border-radius: 9999px;
    cursor: pointer;
    height: 38px;
}
#version-marquee-container:hover .marquee-text {
    animation-play-state: paused;
    color: #312e81;
}
.marquee-text {
    position: absolute;
    white-space: nowrap;
    will-change: transform;
    animation: marquee-scroll 25s linear infinite;
    font-weight: 600;
    color: #4338ca;
    line-height: 36px;
}
@keyframes marquee-scroll {
    from {
        transform: translateX(100%);
    }
    to {
        transform: translateX(-100%);
    }
}

.competition-summary-counter strong {
    font-size: 1.15rem !important;
    font-weight: 800 !important;
    white-space: nowrap;
}
.competition-summary-counter .text-blue-600 {
    color: #2563eb !important;
}
.competition-summary-counter .text-red-600 {
    color: #dc2626 !important;
}

.column-toggle-btn {
    padding: 4px 12px;
    font-size: 12px;
    font-weight: 500;
    border: 1px solid;
    border-radius: 9999px;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    user-select: none;
}

.column-toggle-btn.active {
    background-color: #3b82f6; /* blue-500 */
    color: white;
    border-color: #3b82f6;
}

.column-toggle-btn:not(.active) {
    background-color: #e5e7eb; /* gray-200 */
    color: #374151; /* gray-700 */
    border-color: #d1d5db; /* gray-300 */
}

.column-toggle-btn:not(.active):hover {
    background-color: #d1d5db; /* gray-300 */
}

.draggable-header {
    cursor: move;
    cursor: grab;
}
.draggable-header:active {
    cursor: grabbing;
}
.sortable-ghost {
    opacity: 0.4;
    background-color: #c7d2fe; /* indigo-200 */
}

.column-toggle-btn.draggable-tag {
    cursor: grab;
}
.column-toggle-btn.draggable-tag:active {
    cursor: grabbing;
}
.column-toggle-btn.draggable-tag:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.drag-handle-icon {
    color: #6b7280;
    transition: color 0.2s ease-in-out;
}
.column-toggle-btn.draggable-tag:hover .drag-handle-icon {
    color: #1f2937;
}
.sortable-drag {
    opacity: 0.95;
    transform: rotate(-2deg);
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
}

.action-btn,
.nav-link,
.view-switcher__btn,
.toggle-filters-btn,
.page-header__help-btn
{
    display: inline-flex;
    align-items: center;
    /* justify-content: center; */ /* Bị loại bỏ để sửa lỗi sidebar */
    gap: 0.5rem;
}

.feather {
    width: 1.1rem;
    height: 1.1rem;
    stroke-width: 1.5;
    flex-shrink: 0;
}

#sidebar .feather {
    width: 1.5rem;
    height: 1.5rem;
    stroke-width: 2;
}

.page-header__help-btn .feather {
    width: 1.25rem;
    height: 1.25rem;
}

.luyke-detail-header h3 {
    font-size: 1.75rem; font-weight: 800; color: #111827; text-align: center;
}
.luyke-detail-progress-item {
    display: flex; flex-direction: column; gap: 4px;
}
.luyke-detail-progress-label {
    display: flex; justify-content: space-between; align-items: baseline; font-size: 0.875rem;
}
.luyke-detail-progress-values {
    display: flex; justify-content: space-between; font-size: 0.75rem; color: #4b5563;
}
.luyke-detail-chart-container {
    position: relative; height: 350px; width: 100%;
}
.customer-accordion-luyke summary {
    display: flex; flex-wrap: wrap; align-items: center; gap: 1rem; padding: 0.5rem 1rem; cursor: pointer; list-style: none;
}
.customer-accordion-luyke summary:hover {
    background-color: #f9fafb;
}
.customer-accordion-luyke .customer-name-small {
    font-weight: 600;
font-size: 0.9rem; color: #1f2937; flex-grow:
1; min-width: 120px;
}
.customer-accordion-luyke .order-metrics {
    display: flex; align-items: center; gap: 1rem; flex-shrink: 0; font-size: 0.75rem;
}
.customer-accordion-luyke .order-metrics span {
    white-space: nowrap;
}
.customer-accordion-luyke .accordion-arrow {
    margin-left: auto; color: #9ca3af; transition: transform 0.2s ease-in-out;
}
.customer-accordion-luyke details[open] > summary .accordion-arrow {
    transform: rotate(180deg);
}
.customer-accordion-luyke .product-list-scrollable {
    display: block;
    max-height: 200px;
    overflow-y: auto;
}
.customer-accordion-luyke .product-list-table {
    width: 100%;
}
.customer-accordion-luyke .qd-below-target { color: #b91c1c; }
.customer-accordion-luyke .qd-above-target { color: #1d4ed8; }

/* === START: SKNV INFOGRAPHIC CARD STYLES (V6.0) === */
.sknv-summary-grid {
    display: grid;
    grid-template-columns: 1fr; /* Default to 1 column for mobile */
    gap: 1.5rem;
}

@media (min-width: 768px) { /* 2 columns for tablets */
    .sknv-summary-grid {
        grid-template-columns: repeat(2, 1fr);
}
}

@media (min-width: 1280px) { /* 4 columns for large desktops */
    .sknv-summary-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}

.sknv-card {
    background-color: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 0.75rem;
    padding: 1rem; /* UPDATED: Compact padding */
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); /* UPDATED: Softer shadow */
    display: flex;
    flex-direction: column;
    gap: 0.75rem; /* UPDATED: Reduced gap */
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
    cursor: pointer;
    position: relative; /* Added for medal positioning */
}
.sknv-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.04);
}

.sknv-card__header {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.sknv-card__avatar {
    width: 48px;
    height: 48px;
    border-radius: 9999px;
    background-color: #eef2ff;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.sknv-card__avatar svg {
    width: 24px;
    height: 24px;
    color: #4338ca;
}

.sknv-card__info {
    flex-grow: 1;
    min-width: 0;
}
.sknv-card__info .name {
    font-weight: 700;
    color: #111827;
    line-height: 1.25;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: flex;
    align-items: center;
}

.sknv-card__info .id {
    font-size: 0.875rem;
    color: #6b7280;
}

.sknv-card__main-kpi {
    text-align: center;
    margin: 0.25rem 0; /* UPDATED: Reduced margin */
}

.sknv-card__main-kpi .value {
    font-size: 2.5rem; /* UPDATED: Reduced font size */
    font-weight: 800;
    line-height: 1;
    color: #4b5563;
}

.sknv-card__main-kpi .total {
    font-size: 1.25rem; /* UPDATED */
    font-weight: 600;
    color: #9ca3af;
}

.sknv-card__main-kpi .label {
    display: block;
    font-size: 0.875rem;
    color: #6b7280;
    margin-top: 0.25rem;
    font-weight: 500;
}

.sknv-card-kpi-strong { border-top: 4px solid #16a34a; } /* UPDATED: Added top border */
.sknv-card-kpi-medium { border-top: 4px solid #f59e0b; } /* UPDATED: Added top border */
.sknv-card-kpi-weak { border-top: 4px solid #ef4444; } /* UPDATED: Added top border */
.sknv-card-kpi-strong .value { color: #16a34a; }
.sknv-card-kpi-medium .value { color: #f59e0b; }
.sknv-card-kpi-weak .value { color: #ef4444; }

.sknv-card__sub-kpi-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem; /* UPDATED: Reduced gap */
    border-top: 1px solid #f3f4f6;
    padding-top: 0.75rem; /* UPDATED: Reduced padding */
}

.sknv-card__sub-kpi-item {
    background-color: #f9fafb;
    border-radius: 0.5rem;
    padding: 0.5rem; /* UPDATED: Reduced padding */
    text-align: center;
    transition: background-color 0.2s ease-in-out;
}

/* === START: NEW SUB-KPI LAYOUT === */
.sknv-card__sub-kpi-header {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
}
.sknv-card__sub-kpi-header .feather {
    width: 1rem;
    height: 1rem;
    stroke-width: 2;
    color: #6b7280;
}
.sknv-card__sub-kpi-header .label {
    font-size: 0.7rem;
    font-weight: 600;
    color: #4b5563;
}
.sknv-card__sub-kpi-item .value {
    font-size: 0.875rem;
    font-weight: 700;
    margin-top: 2px;
    display: block; /* Ensures it's on a new line */
}
/* === END: NEW SUB-KPI LAYOUT === */

.sknv-card__sub-kpi-item.strong { border-bottom: 3px solid #22c55e; }
.sknv-card__sub-kpi-item.medium { border-bottom: 3px solid #f59e0b; }
.sknv-card__sub-kpi-item.weak { border-bottom: 3px solid #ef4444; }
/* === END: SKNV INFOGRAPHIC CARD STYLES === */

/* === START: SKNV Department Grouping Styles (V6.1) === */
.sknv-department-group {
    margin-bottom: 2.5rem; /* Space between department groups */
}

.sknv-department-group:last-child {
    margin-bottom: 1rem; /* Less space for the last group */
}

.sknv-department-header {
    font-size: 1.6rem;
    font-weight: 700;
    color: #1f2937; /* Dark gray for general headers */
    padding-bottom: 0.75rem;
    margin-bottom: 1.5rem;
    border-bottom: 3px solid #d1d5db; /* Light gray border */
    position: relative;
    padding-left: 0.5rem;
}

.sknv-department-header--priority {
    color: #2563eb; /* Blue for priority department */
    border-bottom-color: #3b82f6; /* Matching blue border */
    background-color: #e0f2fe; /* Light blue background */
    padding: 0.75rem 1rem;
    border-radius: 0.5rem 0.5rem 0 0;
    margin-bottom: 0; /* Remove bottom margin to connect with cards */
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.sknv-department-header--priority::before {
    content: '\f02e'; /* Font Awesome 'flag' icon - if Font Awesome is available */
    font-family: 'Font Awesome 5 Free'; /* Specify font family */
    font-weight: 900; /* For solid icon style */
    font-size: 1.25rem;
    color: #2563eb;
}

/* Adjust grid gap and padding for priority department to integrate better */
.sknv-department-header--priority + .sknv-summary-grid {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    margin-top: 0; /* Remove top margin */
    padding-top: 1.5rem; /* Add padding inside grid */
    border: 1px solid #c7d2fe;
    background-color: #f3f4f6; /* Slightly different background */
    padding-left: 1rem;
    padding-right: 1rem;
    padding-bottom: 1rem;
    border-top: none;
}
/* === END: SKNV Department Grouping Styles === */

/* === START: SKNV DETAIL VIEW & MEDALS (V6.4) === */
/* NEW: Wrapper for compact detail view */
#sknv-detail-capture-area {
    max-width: 1100px;
    margin: 0 auto;
}
.sknv-detail-header-card {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    padding: 1rem; /* UPDATED: Compact padding */
    background-color: #eff6ff; /* blue-50 */
    border: 1px solid #dbeafe; /* blue-200 */
    border-top: 4px solid #3b82f6; /* blue-500 */
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
}
.sknv-detail-avatar {
    width: 64px;
    height: 64px;
    border-radius: 9999px;
    background-color: #dbeafe; /* blue-200 */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}
.sknv-detail-avatar svg {
    width: 32px;
    height: 32px;
    color: #1e40af; /* blue-800 */
}
.sknv-detail-info .name {
    color: #1e40af; /* UPDATED: Dark blue color */
}
.sknv-detail-info .department,
.sknv-detail-info .kpi-summary {
    color: #1f2937; /* dark text */
}
.sknv-detail-info .kpi-summary .font-bold {
    color: #1d4ed8; /* darker blue */
}
.sknv-detail-info .name {
    font-size: 1.5rem;
    font-weight: 800;
    line-height: 1.2;
}
.sknv-detail-info .department {
    font-size: 1rem;
    font-weight: 500;
}
.sknv-detail-info .kpi-summary {
    margin-top: 0.5rem;
    font-weight: 600;
}

.sknv-detail-card-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem; /* UPDATED: Compact padding */
    color: #ffffff;
}
.sknv-detail-card-header .header-icon {
    width: 20px;
    height: 20px;
}
.sknv-header-blue { background-color: #2563eb; }
.sknv-header-green { background-color: #16a34a; }
.sknv-header-orange { background-color: #f97316; }
.sknv-header-yellow { background-color: #ca8a04; }
.sknv-header-indigo { background-color: #4f46e5; }
.sknv-header-purple { background-color: #7e22ce; }

.sknv-detail-grid-body {
    padding: 0.75rem 1rem; /* UPDATED: Compact padding */
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); /* UPDATED */
    gap: 0.75rem; /* UPDATED */
}
.sknv-detail-metric-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 0.5rem; /* UPDATED: Compact padding */
    background-color: #f9fafb;
    border-radius: 0.5rem;
    border: 1px solid #f3f4f6;
    transition: all 0.2s ease-in-out;
}
.sknv-detail-metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
}
.sknv-detail-metric-card .label {
    font-weight: 600;
    font-size: 0.8rem; /* UPDATED */
    color: #374151;
}
.sknv-detail-metric-card .value {
    font-weight: 700; /* UPDATED */
    font-size: 1.375rem; /* UPDATED: Reduced font size */
    line-height: 1.2;
    color: #111827;
    margin: 0.25rem 0;
}
.sknv-detail-metric-card .average {
    font-size: 0.7rem; /* UPDATED */
    color: #6b7280;
    font-style: italic;
}
.sknv-detail-metric-card .evaluation-badge {
    margin-top: 0.5rem;
    font-weight: 700;
    padding: 2px 8px;
    border-radius: 9999px;
    font-size: 0.7rem; /* UPDATED */
}
.evaluation-badge.text-green-600 { background-color: #dcfce7; }
.evaluation-badge.text-yellow-600 { background-color: #fef9c3; }

.medal-container {
    position: absolute; /* Changed for positioning */
    top: -8px; /* Position it slightly outside the card */
    left: 12px;
    width: 32px; /* Reduced size */
    height: 32px;
    flex-shrink: 0;
}
.medal-container svg {
    width: 100%;
    height: 100%;
    display: block;
    filter: drop-shadow(0 2px 2px rgba(0,0,0,0.3)); /* Add a nice shadow */
}

/* NEW: Compact tables in detail view */
#sknv-details-container .sknv-subtable-header {
    font-size: 0.8rem;
}
#sknv-details-container .table-bordered td,
#sknv-details-container .table-bordered th {
    padding: 0.5rem;
}
/* === END: SKNV DETAIL VIEW & MEDALS === */

/* === START: LOGIN MODAL STYLES (V6.7) === */
#login-modal .modal__overlay {
    cursor: not-allowed;
}

#login-modal .modal__container {
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
}

#login-modal input[type="email"]:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.4);
    outline: none;
}
/* === END: LOGIN MODAL STYLES === */

/* === START: Declaration Accordion Styles (v6.11) === */
.declaration-group {
    border-bottom: 1px solid #e5e7eb; /* gray-200 */
}
.declaration-group:last-child {
    border-bottom: none;
}
.declaration-group summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0.5rem;
    cursor: pointer;
    font-size: 1.125rem; /* text-lg */
    font-weight: 700; /* font-bold */
    color: #374151; /* gray-700 */
    list-style: none; /* Hide default marker */
}
.declaration-group summary::-webkit-details-marker {
    display: none; /* Hide default marker for Chrome */
}
.declaration-group summary:hover {
    background-color: #f9fafb; /* gray-50 */
}
.declaration-group summary::after {
    content: '+';
    font-size: 1.5rem;
    font-weight: 500;
    color: #6b7280; /* gray-500 */
    transition: transform 0.2s ease-in-out;
}
.declaration-group[open] > summary::after {
    transform: rotate(45deg);
    content: '×';
}
.declaration-content {
    padding: 1rem 0.5rem 1.5rem 0.5rem;
}
/* === END: Declaration Accordion Styles === */
--- END FILE: ./dashboard.css ---

--- START FILE: ./event-listeners/listeners-actions.js ---
// Version 1.1 - Fix capture/export logic for sknv-thidua view switcher
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - ACTIONS
// Chứa logic đăng ký sự kiện cho các nút hành động chung (Chụp ảnh, Xuất Excel).

import { ui } from '../ui.js';
import { utils } from '../utils.js';
import { captureService } from '../modules/capture.service.js';

export function initializeActionListeners() {
    ['luyke', 'sknv', 'realtime'].forEach(prefix => {
        const captureBtn = document.getElementById(`capture-${prefix}-btn`);
        if (captureBtn) {
            captureBtn.addEventListener('click', () => {
                const navId = prefix === 'luyke' ? 'luyke-subtabs-nav' : (prefix === 'sknv' ? 'employee-subtabs-nav' : 'realtime-subtabs-nav');
                const contentContainerId = prefix === 'luyke' ? 'luyke-subtabs-content' : (prefix === 'sknv' ? 'employee-subtabs-content' : 'realtime-subtabs-content');

                const activeTabButton = document.querySelector(`#${navId} .sub-tab-btn.active`);
                if (!activeTabButton) {
                    ui.showNotification('Không tìm thấy tab đang hoạt động.', 'error');
                    return;
                }
                
                const title = activeTabButton.dataset.title || 'BaoCao';
                let elementToCapture;

                // *** START BUG 4 FIX (v1.1) ***
                // Logic đặc biệt cho tab Thi đua NV LK có view switcher
                if (prefix === 'sknv' && activeTabButton.dataset.target === 'subtab-hieu-qua-thi-dua-lk') {
                    const activeViewBtn = document.querySelector('#sknv-thidua-view-selector .view-switcher__btn.active');
                    const viewType = activeViewBtn ? activeViewBtn.dataset.view : 'program';
                    
                    if (viewType === 'program') {
                        elementToCapture = document.getElementById('competition-report-container-lk');
                    } else { // 'employee'
                        elementToCapture = document.getElementById('pasted-competition-report-container');
                    }
                } 
                // Logic đặc biệt cho tab Thi đua Vùng (Lũy kế)
                else if (prefix === 'luyke' && activeTabButton.dataset.target === 'subtab-luyke-thidua-vung') {
                    elementToCapture = document.getElementById('thidua-vung-infographic-container');
                } 
                // Logic gốc cho tất cả các tab khác
                else {
                    elementToCapture = document.querySelector(`#${contentContainerId} .sub-tab-content:not(.hidden)`);
                }
                // *** END BUG 4 FIX (v1.1) ***

                if (!elementToCapture || elementToCapture.children.length === 0) {
                    ui.showNotification('Không có nội dung để chụp.', 'error');
                    return;
                }

                captureService.captureDashboardInParts(elementToCapture, title);
            });
        }

        const exportBtn = document.getElementById(`export-${prefix}-btn`);
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                const navId = prefix === 'sknv' ? 'employee-subtabs-nav' : `${prefix}-subtabs-nav`;
                const contentContainerId = prefix === 'sknv' ? 'employee-subtabs-content' : `${prefix}-subtabs-content`;
                
                const activeTabButton = document.querySelector(`#${navId} .sub-tab-btn.active`);
                let activeTabContent; // Thay đổi từ const sang let

                // *** START BUG 4 FIX (v1.1) ***
                // Logic đặc biệt cho tab Thi đua NV LK có view switcher
                if (prefix === 'sknv' && activeTabButton?.dataset.target === 'subtab-hieu-qua-thi-dua-lk') {
                    const activeViewBtn = document.querySelector('#sknv-thidua-view-selector .view-switcher__btn.active');
                    const viewType = activeViewBtn ? activeViewBtn.dataset.view : 'program';

                    if (viewType === 'program') {
                        activeTabContent = document.getElementById('competition-report-container-lk');
                    } else { // 'employee'
                        activeTabContent = document.getElementById('pasted-competition-report-container');
                    }
                } 
                // Logic gốc cho tất cả các tab khác
                else {
                    activeTabContent = document.querySelector(`#${contentContainerId} .sub-tab-content:not(.hidden)`);
                }
                // *** END BUG 4 FIX (v1.1) ***

                if (activeTabContent && activeTabButton) {
                    const title = activeTabButton.dataset.title || 'BaoCao';
                    const timestamp = new Date().toLocaleDateString('vi-VN').replace(/\//g, '-');
                    utils.exportTableToExcel(activeTabContent, `${title}_${timestamp}`);
                } else {
                     ui.showNotification('Không tìm thấy tab để xuất.', 'error');
                }
            });
        }
    });
}
--- END FILE: ./event-listeners/listeners-actions.js ---

--- START FILE: ./event-listeners/listeners-collaboration.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - COLLABORATION
// Chứa logic sự kiện cho các tính năng hợp tác (Góp ý, Nhận xét).

import { ui } from '../ui.js';

export function initializeCollaborationListeners(appController) {
    document.body.addEventListener('click', async (e) => {
        const target = e.target;

        // --- Feedback System ---
        if (target.id === 'submit-feedback-btn') {
            appController.handleSubmitFeedback();
        }
        const feedbackItem = target.closest('.feedback-item');
        if (feedbackItem) {
            appController.handleFeedbackReplyActions(e, feedbackItem);
        }
        
        // --- Composer System ---
        const composerTrigger = target.closest('.action-btn--composer');
        if (composerTrigger) {
            const sectionId = composerTrigger.id.split('-')[1];
            appController.prepareAndShowComposer(sectionId);
        }
        const composerModal = target.closest('#composer-modal');
        if (composerModal) {
            appController.handleComposerActions(e, composerModal);
        }
        if (target.id === 'copy-from-preview-btn') {
            ui.copyFromPreview();
        }

        // --- Admin/Declaration System ---
        if (target.id === 'save-help-content-btn') {
            appController.saveHelpContent();
        }
    });
}
--- END FILE: ./event-listeners/listeners-collaboration.js ---

--- START FILE: ./event-listeners/listeners-competition.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - COMPETITION
// Chứa logic sự kiện cho việc quản lý các chương trình thi đua.

import { appState } from '../state.js';

export function initializeCompetitionListeners(appController) {
    const goalDrawer = document.getElementById('goal-drawer');
    if (!goalDrawer) return;

    // Sử dụng event delegation cho các nút trong danh sách
    goalDrawer.addEventListener('click', (e) => {
        const addBtn = e.target.closest('#add-competition-btn');
        const cancelBtn = e.target.closest('#cancel-competition-btn');
        const editBtn = e.target.closest('.edit-competition-btn');
        const deleteBtn = e.target.closest('.delete-competition-btn');

        if (addBtn) appController._handleCompetitionFormShow(true);
        if (cancelBtn) appController._handleCompetitionFormShow(false);
        if (editBtn) {
            const index = parseInt(editBtn.dataset.index, 10);
            appController._handleCompetitionFormEdit(index);
        }
        if (deleteBtn) {
            const index = parseInt(deleteBtn.dataset.index, 10);
            if (confirm('Bạn có chắc chắn muốn xóa chương trình này?')) {
                appController._handleCompetitionDelete(index);
            }
        }
    });

    // Gắn sự kiện cho form
    const form = document.getElementById('competition-form');
    form?.addEventListener('submit', (e) => appController._handleCompetitionFormSubmit(e));
    
    // Gắn sự kiện cho select loại thi đua
    const competitionTypeSelect = document.getElementById('competition-type');
    competitionTypeSelect?.addEventListener('change', (e) => {
        const priceSegment = document.getElementById('price-segment');
        if(priceSegment) {
            priceSegment.classList.toggle('hidden', e.target.value !== 'soluong');
        }
    });

    // Sử dụng event delegation trên body cho các input target được tạo động
    document.body.addEventListener('change', (e) => {
        if (e.target.classList.contains('competition-target-input')) {
            const competitionId = e.target.dataset.competitionId;
            const config = appState.competitionConfigs.find(c => c.id === competitionId);
            if (config) {
                config.target = e.target.value; 
            }
            appController.updateAndRenderCurrentTab(); 
        }
    });
}
--- END FILE: ./event-listeners/listeners-competition.js ---

--- START FILE: ./event-listeners/listeners-dragdrop.js ---
// Version 2.1 - Add logging to diagnose re-render issue on drop
// MODULE: LISTENERS - DRAG & DROP
// Chứa logic khởi tạo và xử lý sự kiện kéo-thả cột bằng SortableJS.

import { settingsService } from '../modules/settings.service.js';

let appController = null;

/**
 * Khởi tạo SortableJS trên khu vực chứa các thẻ tùy chỉnh cột.
 * @param {HTMLElement} container - Phần tử DOM chứa bảng và các nút tùy chỉnh.
 */
function activateSortableOnColumnToggles(container) {
    if (!container) return;

    const toggleContainer = container.querySelector('#efficiency-column-toggles');
    if (!toggleContainer) return;

    // Hủy bỏ instance cũ nếu có để tránh lỗi khởi tạo nhiều lần
    if (toggleContainer.sortable) {
        toggleContainer.sortable.destroy();
    }

    // Tạo instance mới
    toggleContainer.sortable = new Sortable(toggleContainer, {
        animation: 150, // Hiệu ứng chuyển động mượt mà
        filter: '.non-draggable', // Bỏ qua các phần tử có class này (ví dụ: label "Tùy chỉnh cột:")
        handle: '.drag-handle-icon', // Chỉ cho phép kéo khi bấm vào icon
        onEnd: (evt) => {
            // Lấy danh sách các thẻ <button> theo thứ tự mới
            const newButtonOrder = Array.from(evt.target.querySelectorAll('button.column-toggle-btn'));
            
            // Lấy ra ID của các cột theo thứ tự mới từ thuộc tính data-column-id
            const newColumnIdOrder = newButtonOrder.map(btn => btn.dataset.columnId).filter(Boolean);

            // Tải cài đặt hiện tại
            const currentSettings = settingsService.loadEfficiencyViewSettings();
             
            // Tạo một Map để truy cập nhanh các đối tượng cài đặt theo ID
            const settingsMap = new Map(currentSettings.map(s => [s.id, s]));

            // Tạo lại mảng cài đặt theo thứ tự mới
            const reorderedSettings = newColumnIdOrder.map(id => settingsMap.get(id));
               
            // Thêm lại các cột đã bị ẩn (nếu có) vào cuối danh sách để không làm mất chúng
            currentSettings.forEach(setting => {
                if (!reorderedSettings.find(s => s.id === setting.id)) {
                    reorderedSettings.push(setting);
                }
            });

            // Lưu lại cấu hình mới
            settingsService.saveEfficiencyViewSettings(reorderedSettings);

            // Vẽ lại toàn bộ tab để đồng bộ header, body, và footer của bảng
            if (appController) {
                console.log("LOG: Yêu cầu render lại tab sau khi kéo thả."); // <<< THÊM DÒNG NÀY ĐỂ GỠ LỖI
                appController.updateAndRenderCurrentTab();
            }
        }
    });
}


export const dragDroplisteners = {
    /**
     * Hàm khởi tạo chính, nhận vào controller của ứng dụng.
     * @param {object} mainAppController - Controller chính của ứng dụng.
     */
    init(mainAppController) {
        appController = mainAppController;
    },
    
    /**
     * Hàm được gọi sau mỗi lần render để kích hoạt lại tính năng kéo-thả.
     * @param {string} containerId - ID của container chứa bảng (ví dụ: 'efficiency-report-container').
     */
    initializeForContainer(containerId) {
        const container = document.getElementById(containerId);
        activateSortableOnColumnToggles(container);
    }
};
--- END FILE: ./event-listeners/listeners-dragdrop.js ---

--- START FILE: ./event-listeners/listeners-highlighting.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - HIGHLIGHTING
// Chứa logic sự kiện cho tính năng tô màu (highlight).

import { appState } from '../state.js';
import { highlightService } from '../modules/highlight.service.js';

/**
 * Xử lý khi người dùng thay đổi lựa chọn trong các bộ lọc highlight.
 * @param {string} prefix - 'luyke', 'sknv', hoặc 'realtime'.
 * @param {string} type - 'nhanhang', 'nhomhang', hoặc 'employee'.
 */
function handleHighlightFilterChange(prefix, type) {
    const choicesInstance = appState.choices[`${prefix}_highlight_${type}`];
    if (!choicesInstance) return;

    const values = choicesInstance.getValue(true);
    const color = document.getElementById(`${prefix}-highlight-color`).value;
    
    appState.highlightSettings[prefix] = { type, values, color };
    localStorage.setItem('highlightSettings', JSON.stringify(appState.highlightSettings));
    
    highlightService.applyHighlights(prefix);
}

export function initializeHighlightingListeners(appController) {
    ['luyke', 'sknv', 'realtime'].forEach(prefix => {
        const nhanhangFilter = document.getElementById(`${prefix}-highlight-nhanhang`);
        if (nhanhangFilter) {
            nhanhangFilter.addEventListener('change', () => handleHighlightFilterChange(prefix, 'nhanhang'));
        }

        const nhomhangFilter = document.getElementById(`${prefix}-highlight-nhomhang`);
        if (nhomhangFilter) {
            nhomhangFilter.addEventListener('change', () => handleHighlightFilterChange(prefix, 'nhomhang'));
        }

        const employeeFilter = document.getElementById(`${prefix}-highlight-employee`);
        if (employeeFilter) {
            employeeFilter.addEventListener('change', () => handleHighlightFilterChange(prefix, 'employee'));
        }

        const colorInput = document.getElementById(`${prefix}-highlight-color`);
        if (colorInput) {
            colorInput.addEventListener('input', () => appController.handleHighlightColorChange(prefix));
        }
        
        const clearButton = document.getElementById(`${prefix}-clear-highlight`);
        if (clearButton) {
            clearButton.addEventListener('click', () => appController.handleClearHighlight(prefix));
        }
    });
}
--- END FILE: ./event-listeners/listeners-highlighting.js ---

--- START FILE: ./event-listeners/listeners-settings.js ---
// Version 1.5 - Save competition name mapping to Firestore (debounced) & re-process data
// Version 1.4 - Add auto-save listener for competition name mapping
// Version 1.3 - Add event listener for efficiency column toggles
// MODULE: LISTENERS - SETTINGS
// Chứa logic sự kiện cho các drawers Cài đặt và các Modals.

import { ui } from '../ui.js';
import { settingsService } from '../modules/settings.service.js';
import { appState } from '../state.js';
import { firebase } from '../firebase.js'; // *** NEW (v1.5) ***
import { services } from '../services.js'; // *** NEW (v1.5) ***

export function initializeSettingsListeners(appController) {
    // *** NEW (v1.5): Helper debounce function ***
    let debounceTimer;
    const debounce = (func, delay) => {
        return (...args) => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    };

    // *** NEW (v1.5): Create a debounced save function (e.g., wait 1 second after last keystroke) ***
    const debouncedSaveMappings = debounce((mappings) => {
        // 1. Save to Firestore
        firebase.saveCompetitionNameMappings(mappings);
        ui.showNotification('Đã tự động lưu tên rút gọn lên Cloud!', 'success');
        
        // 2. (Bug 1 Fix) Re-process pasted data with new names
        const pastedText = document.getElementById('paste-thiduanv')?.value || '';
        
        // Chỉ xử lý lại nếu đã có dữ liệu được dán và xử lý trước đó
        // `appState.pastedThiDuaReportData` sẽ có dữ liệu sau lần dán đầu tiên
        if (pastedText && appState.pastedThiDuaReportData) { 
            console.log("Re-processing pasted thi dua data after name change...");
            try {
                const parsedData = services.parsePastedThiDuaTableData(pastedText);
                if (parsedData.success) {
                    // Use the NEW mappings from appState
                    appState.pastedThiDuaReportData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
                    // Save the re-processed data to localStorage
                    localStorage.setItem('daily_paste_thiduanv', JSON.stringify(appState.pastedThiDuaReportData));
                    
                    // Re-render the current tab if it's the SKNV tab
                    const activeTab = document.querySelector('.page-section:not(.hidden)');
                    if (activeTab && activeTab.id === 'health-employee-section') {
                        appController.updateAndRenderCurrentTab();
                    }
                }
            } catch (e) {
                console.error("Error re-processing pasted data after name mapping change:", e);
            }
        }
    }, 1000); // 1000ms (1 second) delay

    // --- Open/Close Modals & Drawers --- [cite: 206-207, 795-796]
    document.getElementById('admin-access-btn')?.addEventListener('click', () => ui.toggleModal('admin-modal', true));
    document.getElementById('admin-submit-btn')?.addEventListener('click', () => appController.handleAdminLogin());
    document.getElementById('admin-cancel-btn')?.addEventListener('click', () => ui.toggleModal('admin-modal', false));
    document.getElementById('interface-settings-btn')?.addEventListener('click', () => ui.toggleDrawer('interface-drawer', true));
    document.getElementById('goal-settings-btn')?.addEventListener('click', () => ui.toggleDrawer('goal-drawer', true));
    document.querySelectorAll('.close-drawer-btn, #drawer-overlay').forEach(el => el.addEventListener('click', () => ui.closeAllDrawers()));

    // --- Interface Settings --- [cite: 207, 796-797]
    document.querySelectorAll('.contrast-selector').forEach(sel => sel.addEventListener('change', (e) => appController.handleContrastChange(e)));
    document.getElementById('global-font-size-slider')?.addEventListener('input', (e) => settingsService.handleFontSizeChange(e, 'global'));
    document.getElementById('kpi-font-size-slider')?.addEventListener('input', (e) => settingsService.handleFontSizeChange(e, 'kpi'));
    document.querySelectorAll('.kpi-color-input').forEach(picker => picker.addEventListener('input', () => settingsService.saveInterfaceSettings()));

    // --- Goal Settings --- [cite: 207-208, 797-798]
    document.getElementById('rt-goal-warehouse-select')?.addEventListener('change', () => settingsService.loadAndApplyRealtimeGoalSettings());
    document.getElementById('luyke-goal-warehouse-select')?.addEventListener('change', () => settingsService.loadAndApplyLuykeGoalSettings());
    document.querySelectorAll('.rt-goal-input, .rt-setting-input').forEach(input => input.addEventListener('input', () => {
        settingsService.saveRealtimeGoalSettings();
        appController.updateAndRenderCurrentTab();
    }));
    document.querySelectorAll('.luyke-goal-input').forEach(input => input.addEventListener('input', () => {
         settingsService.saveLuykeGoalSettings();
         appController.updateAndRenderCurrentTab();
    }));
    
    // --- Declaration Settings --- [cite: 208, 798]
    document.getElementById('save-declaration-btn')?.addEventListener('click', () => appController.saveDeclarations());

    // --- Global Modals (Help, etc.) & Debug Tool --- [cite: 208, 798]
    document.getElementById('toggle-debug-btn')?.addEventListener('click', (e) => ui.toggleDebugTool(e.currentTarget));
    
    // --- Event Delegation for dynamically added elements --- [cite: 209-212, 798-801]
    document.body.addEventListener('click', (e) => {
        const helpTrigger = e.target.closest('.page-header__help-btn');
        if(helpTrigger) {
            ui.showHelpModal(helpTrigger.dataset.helpId);
        }

        const closeModalTrigger = e.target.closest('[data-close-modal]');
        if (closeModalTrigger) {
            const modal = closeModalTrigger.closest('.modal');
            if(modal) {
                 ui.toggleModal(modal.id, false);
            }
        }
        
        const selectionSaveBtn = e.target.closest('#selection-modal-save-btn');
        if (selectionSaveBtn) {
            const modal = document.getElementById('selection-modal');
            const settingType = modal.dataset.settingType;

            const selectedItems = [];
            document.querySelectorAll('#selection-modal-list input[type="checkbox"]:checked').forEach(checkbox => {
                selectedItems.push(checkbox.value);
            });

            if (settingType === 'efficiencyView') {
                // Logic cũ này vẫn có thể được sử dụng bởi modal, nhưng UI mới sẽ dùng logic riêng
                const allItems = settingsService.loadEfficiencyViewSettings();
                const updatedItems = allItems.map(item => ({...item, visible: selectedItems.includes(item.id)}));
                settingsService.saveEfficiencyViewSettings(updatedItems);
            } else if (settingType === 'qdcView') {
                settingsService.saveQdcViewSettings(selectedItems);
            } else if (settingType === 'categoryView') {
                settingsService.saveCategoryViewSettings(selectedItems);
            }

            ui.toggleModal('selection-modal', false);
            ui.showNotification('Đã lưu cài đặt hiển thị!', 'success');
            appController.updateAndRenderCurrentTab();
        }

        // === BẮT ĐẦU LOGIC MỚI CHO TÙY CHỈNH CỘT === [cite: 210-212, 800-801]
        const columnToggleButton = e.target.closest('.column-toggle-btn');
        if (columnToggleButton && columnToggleButton.closest('#efficiency-column-toggles')) {
            e.preventDefault();
            const columnId = columnToggleButton.dataset.columnId;
            
            // 1. Tải cài đặt hiện tại
            const currentSettings = settingsService.loadEfficiencyViewSettings();
            
            // 2. Thay đổi trạng thái của cột được nhấp
            const newSettings = currentSettings.map(col => {
                if (col.id === columnId) {
                    return { ...col, visible: !col.visible };
                 }
                return col;
            });

            // 3. Lưu cài đặt mới
            settingsService.saveEfficiencyViewSettings(newSettings);
            
            // 4. Render lại tab để áp dụng thay đổi
            appController.updateAndRenderCurrentTab();
        }
        // === KẾT THÚC LOGIC MỚI ===
    });

    // *** MODIFIED (v1.5): Event delegation for auto-saving competition name mappings ***
    document.body.addEventListener('input', (e) => {
        const mappingInput = e.target.closest('.competition-name-input');
        
        if (mappingInput) {
            const originalName = mappingInput.dataset.originalName;
            const shortName = mappingInput.value.trim();
            
            if (originalName) {
                if (!appState.competitionNameMappings) {
                    appState.competitionNameMappings = {};
                }
                // 1. Update the state immediately
                appState.competitionNameMappings[originalName] = shortName;
                
                // 2. Call the debounced function to save to Firestore & re-process data
                debouncedSaveMappings(appState.competitionNameMappings);
            }
        }
    });
    // *** END MODIFIED ***

    const searchInput = document.getElementById('selection-modal-search'); // [cite: 214, 803]
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            document.querySelectorAll('#selection-modal-list .selection-item').forEach(item => {
                 const label = item.querySelector('label').textContent.toLowerCase();
                item.style.display = label.includes(searchTerm) ? '' : 'none';
            });
        });
    }
}
--- END FILE: ./event-listeners/listeners-settings.js ---

--- START FILE: ./event-listeners/listeners-sorting.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - SORTING
// Chứa logic sự kiện cho việc sắp xếp các bảng.

import { appState } from '../state.js';

export function initializeSortingListeners(appController) {
    document.body.addEventListener('click', (e) => {
        const header = e.target.closest('.sortable');
        if (!header) return;

        const table = header.closest('table');
        if (!table) return;
        
        const tableType = table.dataset.tableType;
        const sortKey = header.dataset.sort;

        if (!tableType || !sortKey) return;

        const currentState = appState.sortState[tableType] || { key: sortKey, direction: 'desc' };
        
        let newDirection;
        if (currentState.key === sortKey) {
            newDirection = currentState.direction === 'desc' ? 'asc' : 'desc';
        } else {
            newDirection = 'desc';
        }
        
        appState.sortState[tableType] = { key: sortKey, direction: newDirection };

        appController.updateAndRenderCurrentTab();
    });
}
--- END FILE: ./event-listeners/listeners-sorting.js ---

--- START FILE: ./event-listeners/ui-listeners.js ---
// Version 3.30 - Initialize choices.js for realtime brand/category filters
// Version 3.29 - Add event listener for sknv-thidua-view-selector
// Version 3.28 - Call incrementCounter with email for user-specific actionsTaken
// Version 3.27 - Add actionsTaken counter increment on successful file upload
// Version 3.26 - Fix incorrect import paths (./ changed to ../)
// Version 3.25 - Add event listener for download-data-btn
// Version 3.24 - Implement Cloud Storage upload and save metadata logic
// MODULE: EVENT LISTENERS INITIALIZER
// File này đóng vai trò là điểm khởi đầu, import và khởi chạy tất cả các module listener con.

import { appState } from '../state.js';
import { ui } from '../ui.js';
import { services } from '../services.js';
import { luykeTab } from '../tab-luyke.js';
import { sknvTab } from '../tab-sknv.js';
import { uiRealtime } from '../ui-realtime.js';
import { initializeActionListeners } from './listeners-actions.js';
import { initializeCollaborationListeners } from './listeners-collaboration.js';
import { initializeCompetitionListeners } from './listeners-competition.js';
import { initializeHighlightingListeners } from './listeners-highlighting.js';
import { initializeSettingsListeners } from './listeners-settings.js';
import { initializeSortingListeners } from './listeners-sorting.js';
import { dragDroplisteners } from './listeners-dragdrop.js';
import { captureService } from '../modules/capture.service.js';
import { firebase } from '../firebase.js';
import { uiComponents } from '../ui-components.js';

let appController = null;

// --- CONSTANTS ---
const LOCAL_DATA_VERSIONS_KEY = '_localDataVersions'; // Key for localStorage

// --- HELPERS / HANDLERS ---

async function handleFileInputChange(e) {
    const fileInput = e.target;
    const file = fileInput.files[0];
    if (!file) {
        // Clear status if user cancels file selection
        const fileType = fileInput.id.replace('file-', '');
        // Find mapping info using appController if available, otherwise might need direct access or different approach
         const mappingInfo = appController?.ALL_DATA_MAPPING
            ? Object.values(appController.ALL_DATA_MAPPING).find(m => m.uiId === fileType)
            : null; // Fallback if appController isn't ready or doesn't have the mapping yet
        if (mappingInfo && mappingInfo.uiId) {
            uiComponents.updateFileStatus(mappingInfo.uiId, '', 'Chưa thêm file', 'default');
        }
        return;
    }

    const fileType = fileInput.id.replace('file-', '');
    // Find mapping info using appController if available
     const mappingInfo = appController?.ALL_DATA_MAPPING
        ? Object.values(appController.ALL_DATA_MAPPING).find(m => m.uiId === fileType)
        : null; // Fallback

    if (!mappingInfo) {
        if (fileType === 'danhsachnv') {
            return appController.handleDsnvUpload(e, file);
        }
        console.error(`[handleFileInputChange] No mapping info found for fileType: ${fileType}`);
        uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Không tìm thấy cấu hình cho loại file '${fileType}'.`, 'error');
        return;
    }


    const { stateKey, saveKey, firestoreKey } = mappingInfo;
    const dataName = fileInput.dataset.name || fileType;

    uiComponents.updateFileStatus(fileType, file.name, 'Đang đọc & chuẩn hóa...', 'default');
    ui.showProgressBar(fileType);

    try {
        const workbook = await appController.handleFileRead(file);
        const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
        const normalizeType = fileType.replace('-thangtruoc', '');
        const { normalizedData, success, missingColumns } = services.normalizeData(rawData, normalizeType);
        ui.displayDebugInfo(fileType);

        if (!success) {
            const errorMessage = `Lỗi file "${dataName}": Thiếu cột: ${missingColumns.join(', ')}.`;
            uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Thiếu cột dữ liệu.`, 'error');
            ui.showNotification(errorMessage, 'error');
            if (document.getElementById('debug-tool-container')?.classList.contains('hidden')) {
                 document.getElementById('toggle-debug-btn')?.click();
            }
             fileInput.value = ''; // Reset input on error
            return;
        }

        // *** >>> SỬA ĐỂ GỌI HÀM ĐẾM VỚI EMAIL <<< ***
        if (appState.currentUser?.email) {
             firebase.incrementCounter('actionsTaken', appState.currentUser.email);
             console.log(`Incremented actionsTaken for ${appState.currentUser.email}`);
        } else {
             firebase.incrementCounter('actionsTaken'); // Fallback if email somehow isn't available
             console.warn("User email not found in appState, incrementing global actionsTaken.");
        }
        // *** >>> KẾT THÚC SỬA ĐỔI <<< ***

        appState[stateKey] = normalizedData;
        ui.showNotification(`Tải thành công file "${dataName}"!`, 'success');

        if (saveKey) {
            console.log(`[handleFileInputChange] Saving normalized data (${normalizedData.length} rows) to cache: ${saveKey}`);
            await appController.storage.setItem(saveKey, normalizedData);
            console.log(`%c[DEBUG POST-CACHE] Successfully saved ${fileType} to cache. Proceeding...`, "color: brown;");
        }

        // --- Cloud Synchronization ---
        const warehouseToSync = appState.selectedWarehouse;
        const currentFirestoreKey = firestoreKey;

        console.log(`%c[DEBUG PRE-SYNC CHECK] File Type: ${fileType}, Warehouse: ${warehouseToSync}, Firestore Key: ${currentFirestoreKey}`, "color: purple; font-weight: bold;");

        if (warehouseToSync && currentFirestoreKey) {
            console.log(`%c[DEBUG SYNC BLOCK START] Entering cloud sync block for ${fileType} (Firestore Key: ${currentFirestoreKey})`, "color: magenta;");

            uiComponents.updateFileStatus(fileType, file.name, `Đang chuẩn bị đồng bộ cloud...`, 'default');

            let localDataVersions = appController._localDataVersions;
            const currentVersion = localDataVersions?.[warehouseToSync]?.[currentFirestoreKey]?.version || 0;
            const newVersion = currentVersion + 1;
            const uploadTimestamp = Date.now();

            const fileExtension = file.name.substring(file.name.lastIndexOf('.'));
            const storagePath = `uploads/${warehouseToSync}/${currentFirestoreKey}_v${newVersion}${fileExtension}`;

            console.log(`%c[handleFileInputChange] Cloud Upload for ${currentFirestoreKey}:`, "color: magenta; font-weight: bold;");

            const onProgress = (progress) => {
                uiComponents.updateFileStatus(fileType, file.name, `Đang tải lên cloud... ${Math.round(progress)}%`, 'default');
            };

            try {
                const downloadURL = await firebase.uploadFileToStorage(file, storagePath, onProgress);
                uiComponents.updateFileStatus(fileType, file.name, `Upload xong, đang lưu thông tin...`, 'default');

                const metadata = {
                    storagePath: storagePath,
                    downloadURL: downloadURL,
                    version: newVersion,
                    timestamp: uploadTimestamp,
                    rowCount: normalizedData.length,
                    fileName: file.name
                };

                await firebase.saveMetadataToFirestore(warehouseToSync, currentFirestoreKey, metadata);

                const metadataKey = `${appController.LOCAL_METADATA_PREFIX}${warehouseToSync}_${currentFirestoreKey}`;
                const metadataToSaveLocally = { ...metadata, updatedAt: new Date() };
                try {
                    localStorage.setItem(metadataKey, JSON.stringify(metadataToSaveLocally));
                    console.log(`[handleFileInputChange] Saved metadata for ${currentFirestoreKey} to localStorage ('${metadataKey}') immediately.`);
                } catch (lsError) {
                    console.error(`[handleFileInputChange] Error saving metadata for ${currentFirestoreKey} to localStorage:`, lsError);
                }

                if (!localDataVersions[warehouseToSync]) localDataVersions[warehouseToSync] = {};
                localDataVersions[warehouseToSync][currentFirestoreKey] = { version: newVersion, timestamp: uploadTimestamp };
                localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(localDataVersions));
                appController._localDataVersions = localDataVersions;

                console.log(`%c[handleFileInputChange] Successfully uploaded ${currentFirestoreKey} (v${newVersion}).`, "color: magenta;");

                uiComponents.updateFileStatus(fileType, file.name, '', 'success', false, metadataToSaveLocally);

            } catch (syncError) {
                console.error(`%c[handleFileInputChange] Cloud sync failed for ${currentFirestoreKey}:`, "color: red;", syncError);
                uiComponents.updateFileStatus(fileType, file.name, `Lỗi đồng bộ cloud: ${syncError.message}`, 'error');
            }
            console.log(`%c[DEBUG SYNC BLOCK END] Finished cloud sync block for ${fileType}`, "color: magenta;");
        } else {
             console.log(`%c[DEBUG SYNC SKIP] Skipping cloud sync for ${fileType}. Warehouse selected: ${!!warehouseToSync}, Firestore key exists: ${!!currentFirestoreKey}`, "color: orange;");
            uiComponents.updateFileStatus(fileType, file.name, `✓ Đã tải ${normalizedData.length} dòng (Chưa đồng bộ).`, 'success', false, null);
        }

        console.log(`%c[DEBUG PRE-RENDER] About to call updateAndRenderCurrentTab for ${fileType}`, "color: blue;");
        appController.updateAndRenderCurrentTab();

    } catch (error) {
        console.error(`Lỗi xử lý file ${dataName}:`, error);
        uiComponents.updateFileStatus(fileType, file.name, `Lỗi đọc file: ${error.message}`, 'error');
        ui.showNotification(`Lỗi khi xử lý file "${dataName}".`, 'error');
    } finally {
        ui.hideProgressBar(fileType);
        fileInput.value = '';
        console.log(`%c[DEBUG FUNCTION END] handleFileInputChange finished for ${fileType}`, "color: gray;");
    }
}


function handleFilterChange(prefix) {
    appState.viewingDetailFor = null;
    uiComponents.updateEmployeeFilter(prefix);
    appController.updateAndRenderCurrentTab();
}

// --- MAIN INITIALIZER ---

export function initializeEventListeners(mainAppController) {
    appController = mainAppController;

    // Khởi tạo Choices.js và Flatpickr (Giữ nguyên)
    try {
        const multiSelectConfig = { removeItemButton: true, placeholder: true, placeholderValue: 'Chọn hoặc gõ để tìm...', searchPlaceholderValue: 'Tìm kiếm...' };
        const competitionMultiSelectConfig = { ...multiSelectConfig };

        ['luyke', 'sknv', 'realtime'].forEach(prefix => {
            const employeeEl = document.getElementById(`${prefix}-filter-name`);
            if (employeeEl) appState.choices[`${prefix}_employee`] = new Choices(employeeEl, multiSelectConfig);
            ['warehouse', 'department'].forEach(type => {
                 const el = document.getElementById(`${prefix}-filter-${type}`);
                if(el) appState.choices[`${prefix}_${type}`] = new Choices(el, { searchEnabled: true, removeItemButton: false, itemSelectText: 'Chọn' });
            });
            ['nhanhang', 'nhomhang', 'employee'].forEach(type => {
                const highlightEl = document.getElementById(`${prefix}-highlight-${type}`);
                if (highlightEl) appState.choices[`${prefix}_highlight_${type}`] = new Choices(highlightEl, multiSelectConfig);
            });
        });
        const competitionBrandEl = document.getElementById('competition-brand');
        if (competitionBrandEl) appState.choices['competition_brand'] = new Choices(competitionBrandEl, competitionMultiSelectConfig);
        const competitionGroupEl = document.getElementById('competition-group');
        if (competitionGroupEl) appState.choices['competition_group'] = new Choices(competitionGroupEl, competitionMultiSelectConfig);
        
        const singleSelectConfig = { searchEnabled: true, removeItemButton: false, itemSelectText: 'Chọn', searchPlaceholderValue: 'Tìm kiếm...' };
        
        // === FIX 4 (Sửa) ===
        // Thêm 2 ID bộ lọc của tab Realtime vào đây
        const singleSelects = {
             'thidua-employee-filter': 'thidua_employee_detail',
            'thidua-vung-filter-supermarket': 'thiDuaVung_sieuThi',
            'realtime-brand-category-filter': 'realtime_brand_category_filter', // Đã thêm
            'realtime-brand-filter': 'realtime_brand_filter' // Đã thêm
        };
        // === END FIX 4 ===

        for (const [id, key] of Object.entries(singleSelects)) {
             const el = document.getElementById(id);
             if (el) appState.choices[key] = new Choices(el, singleSelectConfig);
        }
    } catch (error) { console.error("Lỗi khi khởi tạo Choices.js:", error); }

    try {
        const initDatePicker = (prefix, renderFunc) => {
            const datePickerEl = document.getElementById(`${prefix}-filter-date`);
            if (!datePickerEl) return;
            const datePicker = flatpickr(datePickerEl, {
                mode: "multiple", dateFormat: "d/m", maxDate: "today",
                onClose: (selectedDates, dateStr, instance) => {
                    if (selectedDates.length === 2) {
                         const [start, end] = selectedDates.sort((a,b) => a - b);
                        const dateRange = Array.from({length: (end - start) / 86400000 + 1}, (_, i) => new Date(start.getTime() + i * 86400000));
                         instance.setDate(dateRange, false);
                    }
                    uiComponents.updateDateSummary(document.getElementById(`${prefix}-date-summary`), instance);
                    appState.viewingDetailFor = null;
                    renderFunc();
                }
            });
            appState.choices[`${prefix}_date_picker`] = datePicker;
            document.getElementById(`${prefix}-clear-date`)?.addEventListener('click', () => { datePicker.clear(); renderFunc(); });
        };
        initDatePicker('luyke', luykeTab.render);
        initDatePicker('sknv', sknvTab.render);
    } catch (error) { console.error("Lỗi khi khởi tạo Flatpickr:", error); }


    // Gọi các hàm khởi tạo listener con
    initializeSettingsListeners(appController);
    initializeHighlightingListeners(appController);
    initializeActionListeners();
    initializeCollaborationListeners(appController);
    initializeSortingListeners(appController);
    initializeCompetitionListeners(appController);
    dragDroplisteners.init(appController);

    // General UI Listeners (Giữ nguyên)
    document.getElementById('force-reload-btn')?.addEventListener('click', () => window.location.reload());
    document.querySelectorAll('a.nav-link').forEach(link => link.addEventListener('click', (e) => { e.preventDefault(); appController.switchTab(link.getAttribute('href').substring(1)); }));
    document.querySelectorAll('.sub-tab-btn').forEach(btn => btn.addEventListener('click', (e) => {
        ui.handleSubTabClick(e.currentTarget);
        appState.viewingDetailFor = null;
        const mainTabId = e.currentTarget.closest('.page-section')?.id || e.currentTarget.closest('.settings-drawer')?.id;
        if (mainTabId === 'health-section') luykeTab.render();
        else if (mainTabId === 'health-employee-section') sknvTab.render();
        else if (mainTabId === 'realtime-section') uiRealtime.render();
    }));
    document.querySelectorAll('.toggle-filters-btn').forEach(button => button.addEventListener('click', () => ui.toggleFilterSection(button.dataset.target)));

    // File input listeners - Gán hàm xử lý chung đã sửa
    document.querySelectorAll('.file-input').forEach(input => {
        if (input.id !== 'file-thidua-vung' && input.id !== 'file-category-structure' && input.id !== 'realtime-file-input' && input.id !== 'debug-competition-file-input') {
            input.addEventListener('change', handleFileInputChange); // Gán hàm đã định nghĩa ở trên
        }
    });
    // Gán các handler đặc biệt (Giữ nguyên)
    document.getElementById('file-category-structure')?.addEventListener('change', (e) => appController.handleCategoryFile(e));
    document.getElementById('paste-luyke')?.addEventListener('input', () => appController.handleLuykePaste());
    document.getElementById('paste-thiduanv')?.addEventListener('input', () => appController.handleThiduaNVPaste());
    document.getElementById('paste-thuongerp')?.addEventListener('input', () => appController.handleErpPaste());
    document.getElementById('paste-thuongerp-thangtruoc')?.addEventListener('input', (e) => appController.handleErpThangTruocPaste(e));
    document.getElementById('realtime-file-input')?.addEventListener('change', (e) => appController.handleRealtimeFileInput(e));
    document.getElementById('download-danhsachnv-template-btn')?.addEventListener('click', () => appController.handleTemplateDownload());
    document.getElementById('file-thidua-vung')?.addEventListener('change', (e) => appController.handleThiDuaVungFileInput(e));
    document.getElementById('thidua-vung-filter-supermarket')?.addEventListener('change', () => appController.handleThiDuaVungFilterChange());
    document.getElementById('debug-competition-file-input')?.addEventListener('change', (e) => appController.handleCompetitionDebugFile(e));

    // Filter change listeners (Giữ nguyên)
    ['luyke', 'sknv', 'realtime'].forEach(prefix => {
        document.getElementById(`${prefix}-filter-warehouse`)?.addEventListener('change', () => handleFilterChange(prefix));
        document.getElementById(`${prefix}-filter-department`)?.addEventListener('change', () => handleFilterChange(prefix));
         document.getElementById(`${prefix}-filter-name`)?.addEventListener('change', () => handleFilterChange(prefix));
    });

    // Warehouse selector listener (Giữ nguyên)
    document.getElementById('data-warehouse-selector')?.addEventListener('change', (e) => {
        const selectedKho = e.target.value;
        console.log("[DEBUG] Kho selection changed. Selected:", selectedKho);
        if (selectedKho) {
            appState.selectedWarehouse = selectedKho;
            localStorage.setItem('selectedWarehouse', selectedKho);
            ui.showNotification(`Đã chuyển sang làm việc với kho ${selectedKho}.`, 'success');
             if(appController.unsubscribeDataListener) {
                console.log("[DEBUG] Unsubscribing from previous warehouse listener.");
                appController.unsubscribeDataListener();
            }
            appController.unsubscribeDataListener = firebase.listenForDataChanges(selectedKho, (cloudData) => {
                appController.handleCloudDataUpdate(cloudData);
            });
            ['ycx', 'giocong', 'thuongnong'].forEach(ft => {
                const versionInfo = appController._localDataVersions?.[selectedKho]?.[ft];
                if (!versionInfo || !versionInfo.version || versionInfo.version === 0) {
                     uiComponents.updateFileStatus(ft, 'Cloud', `Đang chờ đồng bộ từ kho ${selectedKho}...`, 'default');
                }
            });
        } else {
            appState.selectedWarehouse = null;
            localStorage.removeItem('selectedWarehouse');
            ui.showNotification(`Đã bỏ chọn kho. Đồng bộ cloud tạm dừng.`, 'success');
            if(appController.unsubscribeDataListener) {
                 console.log("[DEBUG] Unsubscribing warehouse listener (no warehouse selected).");
                appController.unsubscribeDataListener();
                appController.unsubscribeDataListener = null;
            }
             ['ycx', 'giocong', 'thuongnong'].forEach(ft => uiComponents.updateFileStatus(ft, '', 'Chọn kho để đồng bộ...', 'default'));
        }
        appController.updateAndRenderCurrentTab();
    });

    // Other specific listeners (Giữ nguyên)
    document.getElementById('sknv-view-selector')?.addEventListener('click', (e) => appController.handleSknvViewChange(e));
    document.getElementById('sknv-employee-filter')?.addEventListener('change', () => sknvTab.render());

    // Body click listener (Giữ nguyên)
    document.body.addEventListener('click', (e) => {
        const interactiveRow = e.target.closest('.interactive-row');
        if (interactiveRow && interactiveRow.dataset.employeeId) {
            e.preventDefault();
            if (appState.viewingDetailFor && appState.viewingDetailFor.employeeId === interactiveRow.dataset.employeeId) return;
            appState.viewingDetailFor = { employeeId: interactiveRow.dataset.employeeId, sourceTab: interactiveRow.dataset.sourceTab };
            appController.updateAndRenderCurrentTab();
            return;
        }
        const backButton = e.target.closest('.back-to-summary-btn');
        if (backButton) {
            e.preventDefault();
            appState.viewingDetailFor = null;
            appController.updateAndRenderCurrentTab();
            return;
        }
        const captureDetailBtn = e.target.closest('#capture-sknv-detail-btn, #capture-dtnv-lk-detail-btn, #capture-dtnv-rt-detail-btn');
        if (captureDetailBtn) {
            e.preventDefault();
            const areaToCapture = captureDetailBtn.closest('.sub-tab-content')?.querySelector('[id$="-capture-area"]');
            const title = appState.viewingDetailFor?.employeeId || 'ChiTietNV';
            if (areaToCapture) captureService.captureDashboardInParts(areaToCapture, title);
            return;
        }
        const luykeViewSwitcherBtn = e.target.closest('#luyke-thidua-view-selector .view-switcher__btn');
        if (luykeViewSwitcherBtn) {
            e.preventDefault();
            appController.handleLuykeThiDuaViewChange(e);
            return;
        }

        // *** NEW (v3.29) ***
        const sknvThiDuaViewSwitcherBtn = e.target.closest('#sknv-thidua-view-selector .view-switcher__btn');
        if (sknvThiDuaViewSwitcherBtn) {
            e.preventDefault();
            // Xử lý chuyển đổi view trực tiếp
            const viewSelector = sknvThiDuaViewSwitcherBtn.closest('#sknv-thidua-view-selector');
            if (viewSelector) {
                 viewSelector.querySelectorAll('.view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            }
            sknvThiDuaViewSwitcherBtn.classList.add('active');
            
            // Render lại tab SKNV (nó sẽ đọc nút active này)
            appController.updateAndRenderCurrentTab(); 
            return;
        }
        // *** END NEW ***

        const thiDuaViewSwitcherBtn = e.target.closest('#thidua-view-selector .view-switcher__btn');
        if (thiDuaViewSwitcherBtn) {
            e.preventDefault();
            appController.handleThiDuaViewChange(e);
            return;
        }
        const dtHangViewSwitcherBtn = e.target.closest('#dthang-realtime-view-selector .view-switcher__btn');
        if (dtHangViewSwitcherBtn) {
            e.preventDefault();
            appController.handleDthangRealtimeViewChange(e);
            return;
        }

        const downloadBtn = e.target.closest('.download-data-btn');
        if (downloadBtn) {
            e.preventDefault();
            const dataType = downloadBtn.dataset.type;
            const warehouse = downloadBtn.dataset.warehouse;
            if (dataType && warehouse && appController) {
                console.log(`[Body Click Listener] Download button clicked for ${dataType} @ ${warehouse}`);
                appController.handleDownloadAndProcessData(dataType, warehouse);
            } else {
                console.error("Download button clicked but missing data-type or data-warehouse.", downloadBtn);
            }
            return;
        }
    });

    // Specific filter listeners (Giữ nguyên)
    document.getElementById('thidua-employee-filter')?.addEventListener('change', () => ui.displayCompetitionReport('employee'));
    document.getElementById('realtime-brand-category-filter')?.addEventListener('change', () => uiRealtime.handleBrandFilterChange());
    document.getElementById('realtime-brand-filter')?.addEventListener('change', () => uiRealtime.handleBrandFilterChange());
}
--- END FILE: ./event-listeners/ui-listeners.js ---

--- START FILE: ./index.html ---
<!DOCTYPE html>
<html lang="vi" data-contrast="3">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Công cụ phân tích số cho QLST MWG 5.0</title>

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>

    <script src="https://unpkg.com/feather-icons"></script>

    <link rel="stylesheet" href="./dashboard.css">

     <style>
       #luyke-category-details-content td:first-child,
        #luyke-unexported-revenue-content td:first-child {
            text-transform: capitalize;
        }

       /* === START: Declaration Accordion Styles === */
       .declaration-group {
            border-bottom: 1px solid #e5e7eb; /* gray-200 */
       }
       .declaration-group:last-child {
            border-bottom: none;
       }
       .declaration-group summary {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0.5rem;
            cursor: pointer;
            font-size: 1.125rem; /* text-lg */
            font-weight: 700; /* font-bold */
            color: #374151; /* gray-700 */
            list-style: none; /* Hide default marker */
       }
       .declaration-group summary::-webkit-details-marker {
            display: none; /* Hide default marker for Chrome */
       }
       .declaration-group summary:hover {
            background-color: #f9fafb; /* gray-50 */
       }
       .declaration-group summary::after {
            content: '+';
            font-size: 1.5rem;
            font-weight: 500;
            color: #6b7280; /* gray-500 */
            transition: transform 0.2s ease-in-out;
       }
       .declaration-group[open] > summary::after {
            transform: rotate(45deg);
            content: '×';
       }
       .declaration-content {
            padding: 1rem 0.5rem 1.5rem 0.5rem;
       }
       /* === END: Declaration Accordion Styles === */
    </style>
</head>
<body class="overflow-x-hidden">

    <div id="update-notification" class="hidden fixed bottom-5 right-5 bg-blue-600 text-white py-3 px-5 rounded-lg shadow-lg z-[1001] flex items-center gap-4">
        <p class="font-semibold">Đã có phiên bản mới! Xem chi tiết nội dung cập nhật ở tab "Hướng Dẫn & Góp Ý"</p>
     
   <button onclick="window.location.reload()" class="bg-white text-blue-600 font-bold py-1 px-3 rounded-md hover:bg-blue-100 transition">Tải lại trang</button>
    </div>

    <div id="interface-drawer-container"></div>
    <div id="goal-drawer-container"></div>
    <div id="drawer-overlay" class="hidden fixed inset-0 bg-black bg-opacity-40 z-40"></div>

    <div class="flex min-h-screen">
        <div id="sidebar-container"></div>
         <main id="main-content" class="flex-1 p-6">

            <div class="max-w-full mx-auto">

                <section id="home-section" class="page-section hidden">
                    <div class="page-header">
                        
 <h2 class="page-header__title">Hướng Dẫn & Góp Ý</h2>
                
                        <div id="usage-counter-display" class="text-sm font-semibold">
                            <span class="text-blue-600">Người dùng:</span>
                            <span id="user-count" class="text-red-600 font-bold">-</span>
                            <span class="text-blue-600 ml-4">Lượt truy cập:</span>
                 
           <span id="visitor-count" class="text-red-600 font-bold">-</span>
                  
                            <span class="text-blue-600 ml-4">Lượt sử dụng:</span>
                            <span id="action-count" class="text-red-600 font-bold">-</span>
                        </div>
                    </div>


                    <div class="content-card">
 
                        <h3 class="content-card__header">Video Hướng Dẫn Sử Dụng Nhanh</h3>
            
                             
  <div id="video-container" class="bg-gray-200 rounded-lg">
                             <iframe
                                class="w-full h-full aspect-video"
                      
          src="https://www.youtube.com/embed/bmImlht_yB4?si=iIo9NZ7wc9FvKZKf"
                                title="YouTube video player"
       
                                 frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                              
  allowfullscreen>
                            </iframe>

                        
 </div>
     
                    </div>


                   <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
                        <div class="flex flex-col">
                   
         <h2 class="text-2xl font-bold text-gray-800 mb-6">Góp ý & Thảo luận</h2>

                            <div id="feedback-composer" class="bg-white rounded-xl shadow-md p-6 border border-gray-200 flex-grow">

 
               
                             </div>
                        </div>

                        <div class="flex flex-col">

            
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Danh sách góp ý</h2>
                            <div id="feedback-list-container" class="bg-white rounded-xl shadow-md p-6 border border-gray-200 flex-grow">
                   
                             <div id="feedback-list" class="space-y-6">

                                </div>
                  
          </div>
                        </div>
                    
  </div>

                    <div class="mt-12">

           
                             <h2 class="text-2xl font-bold text-gray-800 mb-6">Lịch sử cập nhật</h2>
                         <div id="update-history-list" class="space-y-6">

         
                </div>
                    </div>
                </section>

  
               <section id="data-section" class="page-section">
                        <div class="page-header">

 
                             <div class="flex items-center gap-x-3">
                
                <h2 class="page-header__title">Cập nhật dữ liệu</h2>
                                <button class="page-header__help-btn" data-help-id="data"
    title="Xem hướng dẫn">
                                    <i data-feather="help-circle"></i>
         
                                 </button>
             
               </div>
                        <div id="version-marquee-container" class="marquee-container">

             
                           <p class="marquee-text"></p>
                        </div>


          
                        <div class="header-qr-container">

                        
    <span>THAM GIA THẢO LUẬN - GÓP Ý</span>
                             <img id="header-qr-image" src="" alt="Mã QR" class="header-qr-image">

          
               </div>
                    </div>

                    <div id="warehouse-selection-container" class="content-card bg-blue-50 border-blue-300">
 
                        <h3 class="content-card__header !border-blue-300">Kho Làm Việc Hiện Tại</h3>
 
                       <p class="text-sm text-gray-700 mb-2">Chọn kho bạn muốn làm việc. Lựa chọn này sẽ được ghi nhớ. Mọi dữ liệu tải lên sẽ được đồng bộ cho kho đã chọn.</p>
   
                         <div class="max-w-xs">
                            <label for="data-warehouse-selector" class="block text-sm font-medium text-gray-700 mb-1">Mã Kho</label>
        
                             <select id="data-warehouse-selector" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full" disabled>
                                <option>Vui lòng tải file DSNV để chọn kho...</option>
          
                           </select>
                        </div>
                    </div>
    
                    <div class="content-card">

      
                  <div class="flex justify-start items-baseline gap-x-4">
                            <h3 class="content-card__header !mb-0 !border-b-0">DỮ LIỆU CẬP NHẬT HÀNG NGÀY</h3>

                           <a href="#" id="download-bookmark-link" download="QLST_Bookmark.zip" class="data-input-group__link">
                                Tải Bookmark Chrome

       
              
        </a>
                        </div>



                      
   <div class="flex flex-col gap-6 pt-4">

                            <div class="grid md:grid-cols-3 gap-6">
                                <div class="data-input-group">

               
     
                   <a href="https://report.mwgroup.vn/home/dashboard/077" target="_blank" class="data-input-group__label data-input-group__label--link">📄 Yêu cầu xuất lũy kế:</a>

                          
           <div class="data-input-group__content">
                                        <div class="flex items-center gap-2">

                                   
     
                   <label for="file-ycx" class="data-input-group__file-trigger">Thêm file</label>

                                       
     <span id="file-name-ycx" class="data-input-group__file-name">Chưa thêm file</span>
                                        </div>

                                        
   <input type="file" id="file-ycx" class="hidden file-input" data-name="Yêu cầu xuất lũy
    kế" data-state-key="ycxData" data-save-key="saved_ycx" accept=".xlsx, .xls, .csv">
                                  
      <div class="data-input-group__status-wrapper"><span id="file-status-ycx" class="data-input-group__status-text"></span></div>
                                        <div id="progress-ycx" class="progress-bar-container hidden"><div class="progress-bar"></div></div>


                                    
</div>
                                </div>
                      
           <div class="data-input-group">

                                      <a href="https://reports.thegioididong.com/#/viewreport/168754" target="_blank" class="data-input-group__label data-input-group__label--link">📄 Giờ công:</a>

                                  
  <div class="data-input-group__content">

                                         <div class="flex items-center gap-2">

       
                                      <label for="file-giocong" class="data-input-group__file-trigger">Thêm file</label>

                                            <span id="file-name-giocong" class="data-input-group__file-name">Chưa thêm file</span>
 
                                       </div>

    
               
                         <input type="file" id="file-giocong" class="hidden file-input" data-name="Giờ công" data-state-key="rawGioCongData" data-save-key="saved_giocong" accept=".xlsx, .xls, .csv">
                                        <div class="data-input-group__status-wrapper">
            
                                 <span id="file-status-giocong" class="data-input-group__status-text"></span>

                  
  
                     </div>

                                     <div id="progress-giocong" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
                           
         </div>

                                </div>
             
         
                   <div class="data-input-group">

                                      <a href="https://report.mwgroup.vn/home/dashboard/105" target="_blank" class="data-input-group__label data-input-group__label--link">📄 Thưởng nóng:</a>

                         
           <div class="data-input-group__content">
                                        <div class="flex items-center gap-2">

                  
                                      <label for="file-thuongnong" class="data-input-group__file-trigger">Thêm file</label>

                                        
    <span id="file-name-thuongnong" class="data-input-group__file-name">Chưa thêm file</span>
                                        </div>

      
                             
                   <input
    type="file" id="file-thuongnong" class="hidden file-input" data-name="Thưởng nóng" data-state-key="thuongNongData" data-save-key="saved_thuongnong" accept=".xlsx, .xls, .csv">
                                      
  <div class="data-input-group__status-wrapper">
                                             <span id="file-status-thuongnong" class="data-input-group__status-text"></span>


    
                                     </div>
 
                                        <div id="progress-thuongnong" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
         
                           </div>


                           
     </div>
                            </div>
                             <div class="grid md:grid-cols-3 gap-6">
                         
       <div class="data-input-group h-full">

                                    <a href="https://bi.thegioididong.com/reward?id=-1&tab=1" target="_blank" class="data-input-group__label data-input-group__label--link">📋 Thưởng ERP:<br><span class="font-normal">(Copy từ BI)</span></a>
                                    <div class="data-input-group__content">
                    
                                     <textarea id="paste-thuongerp" rows="5" class="data-textarea" placeholder="Dán toàn bộ dữ liệu thưởng ERP..."></textarea>

  
                                      <div class="data-input-group__status-wrapper"><span id="status-thuongerp" class="data-input-group__status-text"></span></div>

             
                         </div>
                                </div>

          
                               <div class="data-input-group h-full">
                                    <a href="https://bi.thegioididong.com/sieu-thi-con?id=16612&tab=1" target="_blank" class="data-input-group__label data-input-group__label--link">📋 Data lũy kế:<br><span class="font-normal">(Copy từ BI)</span></a>

       
                               <div class="data-input-group__content">

                                        <textarea id="paste-luyke" rows="5" class="data-textarea" placeholder="Dán dữ liệu đã sao chép..."></textarea>
         
                               <div class="data-input-group__status-wrapper"><span id="status-luyke" class="data-input-group__status-text"></span></div>

                    
                </div>

                                </div>
                                <div class="data-input-group h-full">
   
           
                            <a href="https://bi.thegioididong.com/sieu-thi-con?id=16758&tab=bcdtnv&rt=2&dm=1" target="_blank" class="data-input-group__label data-input-group__label--link">📋 Thi đua nhân viên:<br><span class="font-normal">(Copy từ BI)</span></a>

               
                     <div class="data-input-group__content">


                                        <textarea id="paste-thiduanv" rows="5" class="data-textarea" placeholder="Dán dữ liệu đã sao chép..."></textarea>
                  
     
                                     <div class="data-input-group__status-wrapper"><span
    id="status-thiduanv" class="data-input-group__status-text"></span></div>


                           
           </div>
                                </div>
                            </div>

                   
     </div>
                    </div>


                    <div class="mb-6">
                        <button id="toggle-debug-btn" class="text-sm text-blue-600 hover:underline">Hiển thị Công cụ Gỡ lỗi</button>
                        <div id="debug-tool-container" class="hidden mt-4 p-4 border-2 border-dashed border-red-300 rounded-lg bg-red-50">

                            <h3 class="text-lg font-bold text-red-700 mb-2">Công cụ Gỡ lỗi & Chẩn đoán</h3>


                
                               <p class="text-sm text-gray-600 mb-4">Công cụ này sẽ tự động kiểm tra các file bạn tải lên và dữ liệu bạn dán vào. Nếu có cột báo <span class="font-bold text-red-600">LỖI</span>, vui lòng kiểm tra lại file hoặc dữ liệu copy.</p>

                            <div id="debug-results-container" class="space-y-4">

                                  <p class="text-gray-500">Chưa có file nào được tải lên để kiểm tra.</p>
                            </div>
                         <div id="pasted-debug-results-container" class="space-y-4 mt-4"></div>

                        </div>
                    </div>



                    <div class="content-card">
             
           <h3 class="content-card__header">DỮ LIỆU CẬP NHẬT 1 THÁNG 1 LẦN</h3>

                        <p class="text-sm text-yellow-600 bg-yellow-50 p-3 rounded-lg mb-4">Lưu ý: Dữ liệu trong phần này sẽ được lưu vào trình duyệt của bạn. Dữ liệu sẽ tồn tại cho đến khi bạn cập nhật lại.</p>



                        <div class="grid md:grid-cols-3 gap-6">

                            <div class="space-y-4">
            
                    <div class="data-input-group">

                                 
  
         <label class="data-input-group__label">📄 Danh sách nhân viên:</label>
                                     <div class="data-input-group__content">

                                        <div class="flex items-center gap-2">

                                              <label for="file-danhsachnv" class="data-input-group__file-trigger">Thêm file</label>

    
           
                                               <span id="file-name-danhsachnv" class="data-input-group__file-name">Chưa thêm file</span>
                                        </div>

     
                                    <button id="download-danhsachnv-template-btn" class="data-input-group__link text-left">Tải file mẫu</button>

             
                 
                       <input type="file" id="file-danhsachnv" class="hidden file-input" data-name="Danh sách nhân viên" data-state-key="danhSachNhanVien" data-save-key="saved_danhsachnv" accept=".xlsx, .xls, .csv">
                                        <div class="data-input-group__status-wrapper">

        
                                   <span
    id="file-status-danhsachnv" class="data-input-group__status-text"></span>
              
                           
 </div>
                                        <div id="progress-danhsachnv" class="progress-bar-container hidden"><div class="progress-bar"></div></div>


                   
                 </div>
                                </div>
     
                           <div class="data-input-group">

        
                                      <label class="data-input-group__label">📄 YCX Lũy Kế tháng trước:</label>

                 
                   <div class="data-input-group__content">
                                  
      <div class="flex items-center gap-2">

                                            <label for="file-ycx-thangtroc" class="data-input-group__file-trigger">Thêm file</label>

                                 
           <span id="file-name-ycx-thangtruoc" class="data-input-group__file-name">Chưa thêm file</span>
                                       
 </div>

                                        <input type="file" id="file-ycx-thangtruoc" class="hidden file-input" data-name="YCX Lũy Kế tháng trước" data-state-key="ycxDataThangTruoc" data-save-key="saved_ycx_thangtruoc" accept=".xlsx, .xls, .csv">

 
                                  
   <div class="data-input-group__status-wrapper">
                                            <span id="file-status-ycx-thangtruoc" class="data-input-group__status-text"></span>

    
                                     </div>

                                          <div id="progress-ycx-thangtruoc" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
       
                             </div>

                         
        </div>
                            </div>

                              <div class="space-y-4">
                       
         <div class="data-input-group">

                                    <label class="data-input-group__label">📄 Thưởng nóng tháng trước:</label>
   
                                  <div class="data-input-group__content">

                                           <div class="flex items-center gap-2">

         
                                   <label for="file-thuongnong-thangtruoc" class="data-input-group__file-trigger">Thêm file</label>
                
                             <span id="file-name-thuongnong-thangtruoc" class="data-input-group__file-name">Chưa thêm file</span>

                                        </div>

                 
                         <input type="file" id="file-thuongnong-thangtruoc" class="hidden file-input" data-name="Thưởng nóng tháng trước" data-state-key="thuongNongDataThangTruoc" data-save-key="saved_thuongnong_thangtruoc" accept=".xlsx, .xls, .csv">
                
                         <div class="data-input-group__status-wrapper">

                                            <span id="file-status-thuongnong-thangtruoc" class="data-input-group__status-text"></span>

                  
                       </div>
                               
         <div id="progress-thuongnong-thangtruoc" class="progress-bar-container hidden"><div class="progress-bar"></div></div>

                                    </div>
                                </div>

        
                          </div>

                            
 <div class="space-y-4">
                                <div class="data-input-group h-full">

                                     <label class="data-input-group__label">📋 Thưởng ERP tháng trước:</label>
            
                        <div class="data-input-group__content">

                             
           <textarea id="paste-thuongerp-thangtruoc" rows="5" class="data-textarea" placeholder="Dán dữ liệu thưởng ERP tháng trước..."></textarea>
                                        <div class="data-input-group__status-wrapper">



                           
                                     <span id="status-thuongerp-thangtruoc" class="data-input-group__status-text"></span>
                                  
       </div>
                                    </div>


                                </div>
               
             </div>
                        </div>
                 
   </div>
                </section>
                <section id="health-section" class="page-section hidden">


                    <div id="health-section-placeholder" class="placeholder-message hidden">Vui lòng cập nhật danh sách nhân viên để xem kết quả.</div>
                 
   <div id="health-section-content">
                        <div class="content-card">
                         
     <div class="page-header border-b pb-4 mb-6">

                                <h2 class="page-header__title">Sức khỏe siêu thị</h2>
                                <button class="page-header__help-btn" data-help-id="luyke" title="Xem hướng dẫn">
        
                            <i data-feather="help-circle"></i>

                         
        </button>


                             </div>
                            <button class="toggle-filters-btn" data-target="luyke-filter-container">
                        
        <span class="text">Hiện bộ lọc nâng cao</span>

                                <i data-feather="chevron-down" class="icon"></i>

       
                        </button>
                            <div id="luyke-filter-container" class="advanced-filters hidden">
                                <div id="luyke-filter-bar" class="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-4">

                                    <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">

        
                                    <div class="md:col-span-2">

                                            <label for="luyke-filter-date" class="block text-sm font-medium text-gray-600 mb-1">Ngày tạo</label>
  
                                          <div class="relative">

           
                                                      <input type="text" id="luyke-filter-date" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full" placeholder="Chọn ngày...">

                           
                     <button id="luyke-clear-date" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-red-500 text-xs">Bỏ chọn</button>
                        
                     </div>


                                            <span id="luyke-date-summary" class="text-xs text-red-500 mt-1 block"></span>
                    
                    </div>
                                  
       <div class="md:col-span-2"><label for="luyke-filter-warehouse" class="block text-sm font-medium text-gray-600 mb-1">Mã Kho</label><select id="luyke-filter-warehouse" class="p-2 border
    rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
                                        <div class="md:col-span-2"><label for="luyke-filter-department" class="block text-sm font-medium text-gray-600 mb-1">Bộ Phận</label><select id="luyke-filter-department" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
        
                                <div class="md:col-span-6"><label for="luyke-filter-name" class="block text-sm font-medium text-gray-600 mb-1">Nhân Viên</label><select id="luyke-filter-name" multiple></select></div>


            
                         </div>
                                    <div class="border-t pt-4 grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
                      
                  <div class="md:col-span-3"><label for="luyke-highlight-nhanhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu
    ngành hàng</label><select id="luyke-highlight-nhanhang" multiple></select></div>

                     
                     <div class="md:col-span-3"><label for="luyke-highlight-nhomhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhóm hàng</label><select id="luyke-highlight-nhomhang" multiple></select></div>
                                        <div class="md:col-span-3"><label for="luyke-highlight-employee" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhân viên</label><select id="luyke-highlight-employee" multiple></select></div>

     
                                   <div class="md:col-span-3 flex items-end gap-2">

               
                                 <div><label for="luyke-highlight-color" class="block text-sm font-medium text-gray-600 mb-1">Chọn màu</label><input type="color" id="luyke-highlight-color" value="#ffff00" class="p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg"></div>

                                      
      <button id="luyke-clear-highlight" class="bg-red-500 text-white px-4 h-10 rounded-lg hover:bg-red-600 transition text-sm">Xóa màu</button>

                                      
     </div>
                                    </div>

                                </div>
                 
           </div>

                         </div>

                  
       <div class="flex justify-between items-center mb-8">

                            <nav id="luyke-subtabs-nav" class="border-b border-gray-200 -mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs" data-content-container="luyke-subtabs-content">
                                <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-luyke-sieu-thi" data-title="SieuThiLuyKe">
                                    <i data-feather="home"></i>
                                     <span>Siêu thị Lũy kế</span>
                                </button>
                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-luyke-thi-dua" data-title="ThiDuaLuyKe">
                                    <i data-feather="award"></i>
           
                             <span>Thi đua Lũy kế</span>
                                </button>
                             
   <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-luyke-thidua-vung" data-title="ThiDuaVung">
                                    <i data-feather="map"></i>
     
                                <span>Thi Đua Vùng TNB</span>
                                </button>
                       
     </nav>
                             <div class="flex items-center gap-x-2">

                 
                  <button id="compose-luyke-notification-btn" class="action-btn action-btn--composer" title="Nhận xét">
                                    <i data-feather="pen-tool"></i>
                              
      <span>Nhận xét</span>
                                </button>


          
            
               <button id="export-luyke-btn" class="action-btn action-btn--export" title="Xuất Excel tab hiện tại">
                                    <i data-feather="download"></i>
                              
      <span>Xuất Excel</span>
                                </button>


               
    
                  <button id="capture-luyke-btn" class="action-btn action-btn--capture" title="Chụp ảnh tab hiện tại">
                                    <i data-feather="camera"></i>
                           
         <span>Chụp màn hình</span>
                                </button>
           
                  </div>
                        </div>

                        <div id="luyke-subtabs-content">

                       
      <div id="subtab-luyke-sieu-thi" class="sub-tab-content space-y-8">

                                <h2 id="luyke-supermarket-title" class="text-2xl font-bold text-center text-gray-700"></h2>
        
                         <div id="luyke-kpi-cards-container" data-capture-group="kpi" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Doanh thu thực</h4>
              
                          <p id="luyke-kpi-dt-thuc-main" class="font-bold mt-2 mb-3">0</p>
                        
                 <p id="luyke-kpi-dt-thuc-sub1" class="text-sm">DK: 0 / Target: 0</p>
                                    </div>
                               
     <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Doanh thu Quy đổi</h4>
                                        
 <p id="luyke-kpi-dt-qd-main" class="font-bold mt-2 mb-3">0</p>
                                        <p id="luyke-kpi-dt-qd-sub1" class="text-sm">DK: 0 / Target: 0</p>
                                    </div>
   
                                 <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Tỷ lệ hoàn thành Target</h4>
           
                                     <p id="luyke-kpi-ht-target-qd-main" class="font-bold mt-2 mb-3">0%</p>
                                        <p id="luyke-kpi-ht-target-thuc-sub" class="text-sm">DT Thực: 0%</p>
            
                        </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Tỷ lệ quy đổi</h4>
                    
                     <p id="luyke-kpi-tl-qd-main" class="font-bold mt-2 mb-3">0%</p>
                                        <p id="luyke-kpi-tl-qd-sub" class="text-sm">Mục tiêu: 0%</p>
                     
               </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Doanh thu trả chậm</h4>
                             
           <p id="luyke-kpi-dt-tc-main" class="font-bold mt-2 mb-3">0</p>
                                        <p id="luyke-kpi-dt-tc-sub" class="text-sm">% thực trả chậm: 0%</p>
                            
        </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">DTQĐ Chưa xuất</h4>
                                     
   <p id="luyke-kpi-dtqd-chua-xuat-main" class="font-bold mt-2 mb-3">0</p>
                                    </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Thi đua ngành hàng</h4>
                 
                                    
    <p id="luyke-kpi-thidua-main" class="font-bold mt-2 mb-3">0%</p>
                                        <p id="luyke-kpi-thidua-sub" class="text-sm">0/0 Ngành</p>
   
                                  </div>
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Tăng/giảm cùng kỳ</h4>
            
                            <p id="luyke-kpi-dtck-main" class="font-bold mt-2 mb-3">N/A</p>
                      
                   <p id="luyke-kpi-dtck-sub" class="text-sm">Doanh thu: 0 | 0%</p>
                                        <p id="luyke-kpi-lkck-sub" class="text-sm">Lượt khách: 0 | 0%</p>
                   
                 </div>
                                </div>
     
                               <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">

                                     <div data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold text-gray-700 mb-4 uppercase">Hiệu quả khai thác</h3><div
    
id="luyke-efficiency-content"></div></div>
                                    <div data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold text-gray-700 mb-4 uppercase">Nhóm hàng quy đổi cao</h3><div id="luyke-qdc-content"></div></div>
                                </div>

                                 <div
    class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
                
                    <div data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold text-gray-700 mb-4 uppercase">Ngành hàng chi tiết</h3><div id="luyke-category-details-content"></div></div>

                 
                   <div data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold uppercase mb-4">Doanh thu chưa xuất</h3><div id="luyke-unexported-revenue-content"></div></div>

                                </div>
                      
      </div>
                             <div id="subtab-luyke-thi-dua" class="sub-tab-content hidden space-y-4">
                                 <div class="flex flex-wrap items-center justify-between gap-4">
                                    <div class="flex flex-wrap items-center gap-4">
                            
            <h3 class="text-xl font-bold text-gray-800 uppercase">Thi đua lũy kế <span id="luyke-competition-summary" class="text-sm font-normal"></span></h3>
                                         <div id="luyke-thidua-view-selector" class="view-switcher">
                                            <button data-view="summary" class="view-switcher__btn active">Theo Phân Loại</button>
                             
               <button data-view="completion" class="view-switcher__btn">Theo % Hoàn Thành</button>
                                        </div>
                                    </div>
                                    <div id="luyke-competition-content"></div>
          
                       </div>
                            </div>
    
                         <div id="subtab-luyke-thidua-vung" class="sub-tab-content hidden">
                                <div class="content-card">
                             
       <div class="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                                        <div class="data-input-group">
                                             <div class="flex flex-col sm:flex-row sm:items-center sm:gap-4">
                                         
       <label class="data-input-group__label !mb-2 sm:!mb-0 flex-shrink-0">File Thi Đua Vùng:</label>
                                                 <div class="flex items-center gap-2">
                                                    <label for="file-thidua-vung" class="data-input-group__file-trigger">Thêm file</label>
                       
                             <span id="file-name-thidua-vung" class="data-input-group__file-name">Chưa thêm file</span>
                                                  </div>
                                            </div>
                  
                          <input type="file" id="file-thidua-vung" class="hidden file-input" data-name="Thi đua vùng" accept=".xlsx, .xls, .csv">
                                           <div class="data-input-group__status-wrapper mt-2"><span id="file-status-thidua-vung" class="data-input-group__status-text"></span></div>
                                        </div>
                   
                     <div>
                                             <label for="thidua-vung-filter-supermarket" class="block text-sm font-medium text-gray-600 mb-1">Chọn Siêu thị</label>
                                            <select id="thidua-vung-filter-supermarket"></select>
                         
               </div>
                                    </div>
                                 </div>
                                <div id="thidua-vung-infographic-container">
                           
         <div class="placeholder-message">Vui lòng tải file và chọn một siêu thị để xem báo cáo.</div>
                                
 </div>
                             </div>
                             </div>
                    </div>
           
     </section>

                <section id="health-employee-section" class="page-section hidden">

                      <div id="health-employee-section-placeholder" class="placeholder-message hidden">Vui lòng cập nhật danh sách nhân viên để xem kết quả.</div>
                    <div id="health-employee-section-content">
                        <div class="content-card">

                            <div class="page-header border-b pb-4 mb-6">

     
                          <h2 class="page-header__title">Sức khỏe nhân viên</h2>
                                 <button class="page-header__help-btn" data-help-id="sknv" title="Xem hướng dẫn">
                                    <i data-feather="help-circle"></i>

                                
 </button>

       
                    </div>

                            <button class="toggle-filters-btn" data-target="sknv-filter-container">

    
                             <span class="text">Hiện bộ lọc nâng cao</span>

                                  <i data-feather="chevron-down" class="icon"></i>
                    
        </button>
                            <div id="sknv-filter-container" class="advanced-filters hidden">

               
                 <div id="sknv-filter-bar" class="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-4">

                                       <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
                     
                   <div class="md:col-span-2">

                                  
           <label for="sknv-filter-date" class="block text-sm font-medium text-gray-600 mb-1">Ngày tạo</label>

                                           <div class="relative">

                            
                    <input type="text" id="sknv-filter-date" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full" placeholder="Chọn ngày...">

                                              <button id="sknv-clear-date" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-red-500 text-xs">Bỏ chọn</button>

                                            </div>
          
                                  <span id="sknv-date-summary" class="text-xs text-red-500 mt-1 block"></span>

               
                               </div>

                                        <div class="md:col-span-2"><label for="sknv-filter-warehouse" class="block text-sm font-medium text-gray-600 mb-1">Mã Kho</label><select id="sknv-filter-warehouse" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
   
                                     <div class="md:col-span-2"><label for="sknv-filter-department" class="block text-sm font-medium text-gray-600 mb-1">Bộ Phận</label><select id="sknv-filter-department" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>

 
                                        <div class="md:col-span-6"><label for="sknv-filter-name" class="block text-sm font-medium text-gray-600 mb-1">Nhân Viên</label><select id="sknv-filter-name" multiple></select></div>
                                    </div>

    
                                   <div class="border-t pt-4 grid grid-cols-1 md:grid-cols-12 gap-4 items-end">

            
                                     <div class="md:col-span-3"><label for="sknv-highlight-nhanhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu ngành hàng</label><select id="sknv-highlight-nhanhang" multiple></select></div>
                                        <div class="md:col-span-3"><label for="sknv-highlight-nhomhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhóm hàng</label><select id="sknv-highlight-nhomhang" multiple></select></div>

                                             <div
    class="md:col-span-3"><label for="sknv-highlight-employee" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhân viên</label><select id="sknv-highlight-employee" multiple></select></div>
                                        <div class="md:col-span-3 flex items-end gap-2">

                                    
           <div><label for="sknv-highlight-color" class="block text-sm font-medium text-gray-600 mb-1">Chọn màu</label><input type="color" id="sknv-highlight-color" value="#ffff00" class="p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg"></div>

                        
                     <button id="sknv-clear-highlight" class="bg-red-500 text-white px-4 h-10 rounded-lg hover:bg-red-600 transition text-sm">Xóa màu</button>
                                        </div>


                   
                 </div>
                                </div>
     
                         </div>
                        </div>



                        <div class="content-card">
                 
           <div class="flex justify-between items-center mb-8">
                                <nav id="employee-subtabs-nav" class="border-b border-gray-200 -mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs" data-content-container="employee-subtabs-content">
                                    <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-sknv" data-title="SKNV">
                                        <i data-feather="users"></i>
                                        <span>SKNV</span>

              
                        </button>
                                    <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-doanhthu-lk" data-title="DoanhThuLK">
                     
                   <i data-feather="dollar-sign"></i>


                                  
        <span>Doanh thu LK</span>
                                     </button>
                                    <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-thunhap" data-title="ThuNhap">


                                        <i data-feather="briefcase"></i>
            
                                     <span>Thu nhập</span>
                                     </button>


                       
             <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-hieu-qua-khai-thac-luy-ke" data-title="HieuQuaKhaiThacLuyKe">
                                
         <i data-feather="bar-chart-2"></i>

                                         <span>Hiệu quả NV LK</span>
 
                                    
</button>
                                    <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-doanhthu-nganhhang" data-title="DTNganhHang">

         
                                         <i data-feather="layers"></i>

                                         <span>DT ngành hàng</span>
             
                       </button>

                               
        <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-hieu-qua-thi-dua-lk" data-title="HieuQuaThiDuaLK">
                                         <i data-feather="award"></i>
                               
          <span>Thi đua NV LK</span>

                                     </button>
    
                                 </nav>
                                 <div class="flex items-center gap-x-2">

                         
           <button id="compose-sknv-notification-btn" class="action-btn action-btn--composer" title="Nhận xét">
                                      
   <i data-feather="pen-tool"></i>
                                         <span>Nhận xét</span>

                                       </button>
      
                              <button id="export-sknv-btn" class="action-btn action-btn--export" title="Xuất Excel tab hiện tại">


                
                           <i data-feather="download"></i>
                                           <span>Xuất Excel</span>
                  
                  </button>

                                    
    <button id="capture-sknv-btn" class="action-btn action-btn--capture" title="Chụp ảnh tab hiện tại">
                                         <i data-feather="camera"></i>
                                    
     <span>Chụp màn hình</span>

                                     </button>
          
                       </div>
                            </div>

                            <div id="employee-subtabs-content">

          
                        <div id="subtab-sknv" class="sub-tab-content">
                            
         <div id="sknv-summary-container"></div>

                                    <div id="sknv-details-container" class="mt-6 hidden">
                                        <p class="text-gray-500">Vui lòng chọn một nhân viên để xem chi tiết.</p>

                                         </div>

    
                             </div>
                                <div id="subtab-doanhthu-lk" class="sub-tab-content hidden space-y-6" data-capture-preset="landscape-table">

                        
            <div id="revenue-report-container-lk"></div>

                                    <div id="dtnv-lk-details-container"></div>
    
                             </div>
                                <div id="subtab-thunhap" class="sub-tab-content hidden space-y-6" data-capture-preset="landscape-table">


                        
               <div id="income-report-placeholder">

                                      
   <p class="text-gray-500 mb-4">Vui lòng tải đủ các file: <b>Danh sách nhân viên, Yêu cầu xuất lũy kế, Giờ công, Thưởng nóng</b> và xử lý <b>Thưởng ERP</b> ở tab Data để xem báo cáo thu nhập.</p>
                                    </div>


                 
                   <div id="income-report-container"></div>
                                </div>
  
                               <div id="subtab-hieu-qua-khai-thac-luy-ke" class="sub-tab-content hidden space-y-6" data-capture-preset="landscape-table">

                                    <div id="efficiency-report-container"></div>

                 
                  </div>
                                <div id="subtab-doanhthu-nganhhang" class="sub-tab-content hidden space-y-6" data-capture-preset="mobile-portrait">
                                    <div id="category-revenue-report-container"></div>

                                </div>


                   
              <div id="subtab-hieu-qua-thi-dua-lk" class="sub-tab-content hidden space-y-6">
                
                <div class="flex justify-start items-center">
                    <div id="sknv-thidua-view-selector" class="view-switcher">
                        <button data-view="program" class="view-switcher__btn active">Theo Chương Trình (Mục tiêu)</button>
                        <button data-view="employee" class="view-switcher__btn">Theo Nhân Viên (Dữ liệu dán)</button>
                    </div>
                </div>

                <div id="competition-report-container-lk" class="mt-4 view-content-program">
                    <p class="text-gray-500">Vui lòng khai báo chương trình thi đua trong "Thiết lập mục tiêu" để xem báo cáo.</p>
                </div>

                <div class="overflow-x-auto">
                    <div id="pasted-competition-report-container" class="mt-4 view-content-employee hidden">
                        <p class="text-gray-500">Vui lòng dán dữ liệu "Thi đua nhân viên" ở tab "Cập nhật dữ liệu" để xem báo cáo.</p>
                    </div>
                </div>

              </div>
              </div>
                        </div>
                    </div>

                </section>
                <section id="realtime-section" class="page-section hidden">
                    <div
    id="realtime-section-placeholder" class="placeholder-message hidden">Vui lòng cập nhật danh sách nhân viên để xem kết quả.</div>
               
     <div id="realtime-section-content">
                        <div class="content-card">

                             <div class="page-header border-b pb-4 mb-6">

                         
       <div class="flex items-center gap-x-3">
                                    <h2 class="page-header__title">Phân Tích Doanh Thu Realtime</h2>

   
                                     <button class="page-header__help-btn" data-help-id="realtime" title="Xem hướng dẫn">
                                        <i data-feather="help-circle"></i>

        
                            </button>

                          
       </div>
                                <div class="flex-shrink-0 flex items-center gap-x-4 ml-auto">

                                    <label for="realtime-file-input" class="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition text-sm font-medium whitespace-nowrap">Thêm file Realtime</label>
                                    <input type="file" id="realtime-file-input" class="hidden" accept=".xlsx, .xls, .csv">


        
                             <a href="https://report.mwgroup.vn/home/dashboard/077" target="_blank" class="text-blue-600 hover:underline whitespace-nowrap text-sm">Lấy file tại đây</a>
                                </div>
                    
        </div>


                              <button class="toggle-filters-btn" data-target="realtime-filter-container">

              
                   <span class="text">Hiện bộ lọc nâng cao</span>

                                <i data-feather="chevron-down" class="icon"></i>
                            </button>
    
                        <div id="realtime-filter-container" class="advanced-filters hidden">

                           
     <div id="realtime-filter-bar" class="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-4">
                                    <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
                                    
    <div class="md:col-span-3"><label
    for="realtime-filter-warehouse" class="block text-sm font-medium text-gray-600 mb-1">Mã Kho</label><select id="realtime-filter-warehouse" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>

                               
             <div class="md:col-span-3"><label for="realtime-filter-department" class="block text-sm font-medium text-gray-600 mb-1">Bộ Phận</label><select id="realtime-filter-department" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
                                        <div class="md:col-span-6"><label for="realtime-filter-name" class="block text-sm font-medium text-gray-600 mb-1">Nhân Viên</label><select
    id="realtime-filter-name" multiple></select></div>

        
                              </div>
                        
             <div class="border-t pt-4 grid grid-cols-1 md:grid-cols-12 gap-4 items-end">

                                        <div class="md:col-span-3"><label for="realtime-highlight-nhanhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu ngành hàng</label><select id="realtime-highlight-nhanhang" multiple></select></div>

                  
                      <div class="md:col-span-3"><label for="realtime-highlight-nhomhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhóm hàng</label><select id="realtime-highlight-nhomhang" multiple></select></div>
                    
                     <div class="md:col-span-3"><label for="realtime-highlight-employee" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhân viên</label><select id="realtime-highlight-employee" multiple></select></div>

                                        <div class="md:col-span-3 flex items-end gap-2">

             
                                <div><label for="realtime-highlight-color" class="block text-sm font-medium text-gray-600 mb-1">Chọn màu</label><input type="color" id="realtime-highlight-color" value="#ffff00" class="p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg"></div>

   
                                          <button id="realtime-clear-highlight" class="bg-red-500 text-white px-4 h-10 rounded-lg hover:bg-red-600 transition text-sm">Xóa màu</button>


                                      
     </div>
                                    </div>

             
                   </div>
                            </div>
                         </div>


                  
         <div class="flex justify-between items-center mb-8">

                                <nav id="realtime-subtabs-nav" class="border-b border-gray-200 -mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs" data-content-container="realtime-subtabs-content">
                                <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-sieu-thi" data-title="SieuThiRealtime">
                                    <i data-feather="zap"></i>


          
                          <span>Siêu thị Realtime</span>
                          
       </button>
                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-nhan-vien" data-title="DTNVRealtime">

                                    <i data-feather="pie-chart"></i>


     
                              <span>DT NV Realtime</span>
                      
           </button>
                                <button
    class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-hieu-qua" data-title="HieuQuaKhaiThacRealtime">

                                   
  <i data-feather="bar-chart-2"></i>
                                    <span>Hiệu quả NV Realtime</span>
            
                     </button>

                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-nganh-hang" data-title="NganhHangRealtime">

                            
          <i data-feather="tag"></i>
                                    <span>Ngành hàng Realtime</span>

     
                            </button>
                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-hang" data-title="HangRealtime">


                     
               <i data-feather="globe"></i>

                                    <span>DT Hãng Realtime</span>
                                </button>


                                  <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-hieu-qua-thi-dua-realtime" data-title="HieuQuaThiDuaRealtime">

              
                      <i data-feather="award"></i>
                               
      <span>Thi đua NV Realtime</span>
                                </button>


                             </nav>

                    
            <div class="flex items-center gap-x-2">
                                <button id="compose-realtime-notification-btn" class="action-btn action-btn--composer" title="Nhận xét">
  
                                   <i data-feather="pen-tool"></i>


                                     <span>Nhận xét</span>
                
                </button>
                                <button id="export-realtime-btn" class="action-btn action-btn--export" title="Xuất Excel tab hiện tại">

                                    <i data-feather="download"></i>

                                         <span>Xuất Excel</span>
        
                        </button>
                              
   <button id="capture-realtime-btn" class="action-btn action-btn--capture" title="Chụp ảnh tab hiện tại">

                                    <i data-feather="camera"></i>


                                         <span>Chụp màn hình</span>
                                </button>

                     
        </div>
                        </div>


                         <div id="realtime-subtabs-content">
                             <div id="subtab-realtime-sieu-thi" class="sub-tab-content space-y-8">

                                <h2 id="realtime-supermarket-title" class="text-2xl font-bold text-center text-gray-700"></h2>

                 
                      <div id="realtime-kpi-cards-container" data-capture-group="kpi" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg">

                      
                  <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Doanh thu thực</h4>

                              
                 <p id="rt-kpi-dt-thuc-main" class="font-bold mt-2 mb-3">0</p>
                                        <p id="rt-kpi-dt-thuc-sub1" class="text-sm">% HT: <span class="kpi-percentage-value">0%</span> / Target: 0</p>

                     
                   <p id="rt-kpi-dt-thuc-sub2" class="text-sm mt-1">DT Chưa xuất: 0</p>

                             
        </div>
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg">

                                        <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Doanh thu Quy đổi</h4>
                                        <p id="rt-kpi-dt-qd-main" class="font-bold mt-2 mb-3">0</p>


     
                                    <p id="rt-kpi-dt-qd-sub1" class="text-sm">% HT: <span class="kpi-percentage-value">0%</span> / Target: 0</p>
                                        <p id="rt-kpi-dt-qd-sub2" class="text-sm mt-1">DTQĐ Chưa xuất: 0</p>

                                    </div>


                  
                   <div class="kpi-card p-6 rounded-2xl shadow-lg">
                                         <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Tỷ lệ quy đổi</h4>
                   
                     <p id="rt-kpi-tl-qd-main" class="font-bold mt-2 mb-3 kpi-percentage-value">0%</p>


                            
             <p id="rt-kpi-tl-qd-sub" class="text-sm">Mục tiêu: 0%</p>
                                    </div>
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg">

         
                                        <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Doanh thu trả chậm</h4>

    
                                     <p id="rt-kpi-dt-tc-main" class="font-bold mt-2 mb-3">0</p>

                                        <p id="rt-kpi-dt-tc-sub" class="text-sm">% thực trả chậm: <span class="kpi-percentage-value">0%</span></p>


  
                                </div>
                      
           </div>


                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">

                                          
 <div id="realtime-qdc-panel" data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200">
                                        <h3 id="realtime-qdc-title" class="text-xl font-bold text-gray-700 mb-4 uppercase
    flex items-center gap-2"><span>NHÓM HÀNG QUY ĐỔI CAO</span></h3>
                                        <div id="realtime-qdc-content"><p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p></div>
                          
           </div>

                                    <div id="realtime-category-panel" data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200">


                                          <h3 id="realtime-category-title" class="text-xl font-bold text-gray-700 mb-4 uppercase flex items-center gap-2">
                                     
       <span>NGÀNH HÀNG CHI TIẾT</span>

                                         </h3>
    
                                     <div id="realtime-category-details-content"><p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p></div>



                                    </div>
      
                           </div>
                            
     <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">

                                          <div id="realtime-efficiency-panel" data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200">

                             
               <h3 id="realtime-efficiency-title" class="text-xl font-bold text-gray-700 mb-4 uppercase bg-yellow-100 text-yellow-800 p-2 rounded-md">HIỆU QUẢ KHAI THÁC</h3>
                           
                <div id="realtime-efficiency-content"><p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p></div>


                                    </div>
                            
        <div id="realtime-unexported-revenue-panel" data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200 flex flex-col">
                                   
       <h3 class="text-xl font-bold uppercase mb-4 bg-red-100 text-red-800 p-2 rounded-md">DOANH THU CHƯA
    XUẤT</h3>

                                          <div id="realtime-unexported-revenue-content" class="flex-grow"><p class="text-gray-500 font-bold text-center">Vui lòng tải file realtime để xem chi tiết.</p></div>
              
                      </div>

                                
 </div>
                            </div>

                             <div id="subtab-realtime-nhan-vien" class="sub-tab-content hidden space-y-4" data-capture-preset="large-font-report">
                           
     <div id="realtime-employee-detail-container"></div>

                                <div id="realtime-revenue-report-container"></div>
               
             </div>
                            <div id="subtab-realtime-hieu-qua" class="sub-tab-content hidden space-y-4" data-capture-preset="landscape-table">
                                <div id="realtime-efficiency-report-container"></div>

          
                  </div>
                            <div id="subtab-realtime-nganh-hang" class="sub-tab-content hidden space-y-4" data-capture-preset="mobile-portrait">
                                 <div id="realtime-category-revenue-report-container"></div>
                            </div>

                            <div id="subtab-realtime-hang" class="sub-tab-content hidden space-y-4">
                                <div class="content-card" data-capture-group="1">
                                  <div class="flex flex-wrap items-center justify-between gap-4 mb-4">

                                        <h3 class="text-xl font-bold text-gray-700 uppercase">Thống kê theo Hãng</h3>
                  
                      <div id="dthang-realtime-view-selector" class="view-switcher">
                                           <button data-view="brand" class="view-switcher__btn active">Theo Hãng</button>

                                            <button data-view="employee" class="view-switcher__btn">Theo Nhân viên</button>
                       
                 </div>

                                     </div>
                                     <div class="flex flex-wrap items-center gap-4 mb-4">
                                        <div>

 
         
                                   <label for="realtime-brand-category-filter" class="font-semibold text-sm text-gray-600">Ngành hàng:</label>
                                           <select id="realtime-brand-category-filter" class="p-2 border rounded-lg text-sm bg-white shadow-sm mt-1"></select>
                                        </div>

           
   
                             <div>

                         
                                     <label for="realtime-brand-filter" class="font-semibold text-sm text-gray-600">Hãng:</label>
                                            <select id="realtime-brand-filter"
    class="p-2 border rounded-lg text-sm bg-white shadow-sm mt-1"></select>
          
                              </div>
                        
             </div>


                                    <div id="realtime-brand-report-container">
                                        
 <div id="realtime-brand-table-container"></div>
                                        <div id="realtime-employee-table-container"
    class="hidden"></div>
       
                             </div>
                                </div>
                            
</div>

                             <div id="subtab-hieu-qua-thi-dua-realtime" class="sub-tab-content hidden space-y-6">
                      
           <div id="competition-report-container-rt">
                                     <p class="text-gray-500">Vui lòng khai báo chương trình thi đua trong "Thiết lập mục tiêu" để xem báo cáo.</p>

                        
        </div>
                            </div>
                  
           </div>
                    </div>
                </section>

                <section id="declaration-section" class="page-section hidden">
                    <h2 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-6">Khai báo dữ liệu</h2>
                    
                    <div class="content-card">
                         <p class="text-sm text-yellow-600 bg-yellow-50 p-3 rounded-lg mb-4">Lưu ý: Dữ liệu khai báo tại đây sẽ được lưu vào trình duyệt và sử dụng cho các logic tính toán. Chỉnh sửa và nhấn "Lưu" để cập nhật.</p>

                        <div class="space-y-0"> 
                            
                            <details class="declaration-group" open>
                                <summary>Khai báo Danh mục & Cấu trúc</summary>
                                <div class="declaration-content">
                                    <div class="grid md:grid-cols-2 gap-6 mt-4">
                                        <div class="data-input-group">
                                            <label class="data-input-group__label">Danh mục Ngành hàng - Nhóm hàng - Hãng:</label>
                                            <div class="data-input-group__content">
                                                <div class="flex items-center gap-2">
                                                    <label for="file-category-structure" class="data-input-group__file-trigger">Thêm file Excel</label>
                                                    <span id="file-name-category-structure" class="data-input-group__file-name">Chưa thêm file</span>
                                                </div>
                                                <p class="text-xs text-gray-500">File Excel có 2 sheet: sheet đầu tiên có cột "Ngành hàng", "Nhóm hàng"; sheet thứ hai tên là "Hãng" có 1 cột chứa tên các hãng.</p>
                                                <input type="file" id="file-category-structure" class="hidden file-input" data-name="Danh mục Ngành/Nhóm hàng" data-state-key="categoryStructure" data-save-key="saved_category_structure" accept=".xlsx, .xls, .csv">
                                                <div class="data-input-group__status-wrapper">
                                                    <span id="file-status-category-structure" class="data-input-group__status-text"></span>
                                                    <span id="category-structure-saved-status" class="data-input-group__status-text"></span>
                                                </div>
                                                <div id="progress-category-structure" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </details>

                            <details class="declaration-group">
                                <summary>Dữ liệu tính toán</summary>
                                <div class="declaration-content">
                                    <div class="grid md:grid-cols-2 gap-6 mt-4">
                                        <div>
                                            <label for="declaration-ycx" class="block text-md font-semibold text-gray-700 mb-2">Hình thức xuất (Tính doanh thu)</label>
                                            <textarea id="declaration-ycx" rows="8" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm" placeholder="Dán danh sách các loại YCX vào đây, mỗi loại một dòng..."></textarea>
                                        </div>
                                        <div>
                                            <label for="declaration-ycx-gop" class="block text-md font-semibold text-gray-700 mb-2">Hình thức xuất (Trả góp)</label>
                                            <textarea id="declaration-ycx-gop" rows="8" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm" placeholder="Dán danh sách các loại YCX Góp vào đây, mỗi loại một dòng..."></textarea>
                                        </div>
                                        <div class="md:col-span-2">
                                            <label for="declaration-heso" class="block text-md font-semibold text-gray-700 mb-2">Hệ số quy đổi</label>
                                            <textarea id="declaration-heso" rows="8" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm" placeholder="Dán danh sách hệ số quy đổi vào đây, định dạng: Tên nhóm hàng,Hệ số"></textarea>
                                        </div>
                                    </div>
                                    <div class="mt-4">
                                        <button id="save-declaration-btn" class="bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition">Lưu Dữ liệu tính toán</button>
                                    </div>
                                </div>
                            </details>

                            <details class="declaration-group">
                                <summary>Khai báo Tên Rút Gọn (Thi Đua NV)</summary>
                                <div class="declaration-content">
                                    <p class="text-sm text-gray-600 mt-4 mb-4">Dữ liệu dán ở tab "Cập nhật dữ liệu" sẽ tự động trích xuất tên chương trình thi đua gốc vào đây. Hãy nhập "Tên Rút Gọn" để bảng biểu hiển thị gọn gàng hơn. Thay đổi sẽ được <strong>tự động lưu</strong>.</p>
                                    <div id="competition-name-mapping-container" class="max-h-96 overflow-y-auto pr-2">
                                        <p class="text-gray-500 italic">Vui lòng dán dữ liệu "Thi đua nhân viên" ở tab "Cập nhật dữ liệu" để hệ thống tự động trích xuất tên...</p>
                                    </div>
                                </div>
                            </details>

                            <details class="declaration-group">
                                <summary>Nội dung Hướng dẫn</summary>
                                <div class="declaration-content">
                                    <div class="grid md:grid-cols-1 gap-6 mt-4">
                                        <div>
                                            <label for="edit-help-data" class="block text-md font-semibold text-gray-700 mb-2">Hướng dẫn Tab Cập nhật dữ liệu</label>
                                            <textarea id="edit-help-data" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Cập nhật dữ liệu..."></textarea>
                                        </div>
                                        <div>
                                            <label for="edit-help-luyke" class="block text-md font-semibold text-gray-700 mb-2">Hướng dẫn Tab Lũy kế</label>
                                            <textarea id="edit-help-luyke" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Lũy kế..."></textarea>
                                        </div>
                                        <div>
                                            <label for="edit-help-sknv" class="block text-md font-semibold text-gray-700 mb-2">Hướng dẫn Tab Sức khỏe NV</label>
                                            <textarea id="edit-help-sknv" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Sức khỏe NV..."></textarea>
                                        </div>
                                        <div>
                                            <label for="edit-help-realtime" class="block text-md font-medium text-gray-700 mb-2">Hướng dẫn Tab Realtime</label>
                                            <textarea id="edit-help-realtime" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Realtime..."></textarea>
                                        </div>
                                    </div>
                                    <div class="mt-4">
                                        <button id="save-help-content-btn" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition">Lưu Hướng dẫn</button>
                                    </div>
                                </div>
                            </details>

                        </div>
                    </div>

                    <details class="declaration-group content-card mt-8">
                        <summary>Thống kê Người dùng</summary>
                        <div class="declaration-content !p-0">
                            <div id="user-stats-container" class="mt-4">
                                <p class="text-gray-500">Đang tải danh sách người dùng...</p>
                            </div>
                        </div>
                    </details>
                </section>
                </div>
        </main>
    </div>

    <div id="modal-force-update-container"></div>
    <div id="notification"></div>
    <div id="modal-admin-container"></div>
    <div id="modal-login-container"></div>
    <div id="modal-help-container"></div>
   
 <div id="modal-chart-container"></div>
    <div id="modal-composer-container"></div>
    <div id="modal-preview-container"></div>
    <div id="modal-selection-container"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
        
     const tailwindScript = document.querySelector('script[src="https://cdn.tailwindcss.com"]');
            if (tailwindScript && window.location.protocol !== "file:") {
                console.warn("cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation");
            }
        });
    </script>
    <script type="module" src="./main.js?v=3.6"></script> </body>
</html>
--- END FILE: ./index.html ---

--- START FILE: ./main.js ---
// Version 4.43 - Add deep logging for saving/loading pasted data (Debug Problem 1)
// Version 4.42 - Fix restore pasted data (raw text) & luyke parsing on load; Fix "cache" status text; Update file status for cloud categories
// Version 4.41 - Load competitionNameMappings from Firestore in continueInit
// Version 4.40 - Update handleThiduaNVPaste with new parsing/mapping logic
// Version 4.39 - Load competitionNameMappings from localStorage
// MODULE 5: BỘ ĐIỀU KHIỂN TRUNG TÂM (MAIN)
// File này đóng vai trò điều phối, nhập khẩu các module khác và khởi chạy ứng dụng.

import { config } from './config.js';
import { appState } from './state.js';
import { services } from './services.js';
import { ui } from './ui.js';
import { firebase } from './firebase.js';
import { auth } from './auth.js';
import { luykeTab } from './tab-luyke.js';
import { sknvTab } from './tab-sknv.js';
import { uiRealtime } from './ui-realtime.js';
import { initializeEventListeners } from './event-listeners/ui-listeners.js';
import { sidebar } from './components/sidebar.js';
import { storage } from './modules/storage.js';
import { drawerInterface } from './components/drawer-interface.js';
import { drawerGoal } from './components/drawer-goal.js';
import { modalForceUpdate } from './components/modal-force-update.js';
import { modalAdmin } from './components/modal-admin.js';
import { modalLogin } from './components/modal-login.js';
import { modalHelp } from './components/modal-help.js';
import { modalChart } from './components/modal-chart.js';
import { modalComposer } from './components/modal-composer.js';
import { modalPreview } from './components/modal-preview.js';
import { modalSelection } from './components/modal-selection.js';
import { settingsService } from './modules/settings.service.js';
import { highlightService } from './modules/highlight.service.js';
import { uiComponents } from './ui-components.js';

const LOCAL_DATA_VERSIONS_KEY = '_localDataVersions';
const LOCAL_METADATA_PREFIX = '_localMetadata_';
const LOCAL_DSNV_FILENAME_KEY = '_localDsnvFilename'; // Key for DSNV filename
const RAW_PASTE_THIDUANV_KEY = 'raw_paste_thiduanv'; // === FIX 2a.2 (Thêm) ===

const ALL_DATA_MAPPING = {
    // Daily Files
    'ycx': { stateKey: 'ycxData', saveKey: 'saved_ycx', isPasted: false, uiId: 'ycx', firestoreKey: 'ycx' },
    'giocong': { stateKey: 'rawGioCongData', saveKey: 'saved_giocong', isPasted: false, uiId: 'giocong', firestoreKey: 'giocong' },
    'thuongnong': { stateKey: 'thuongNongData', saveKey: 'saved_thuongnong', isPasted: false, uiId: 'thuongnong', firestoreKey: 'thuongnong' },
    // Daily Pasted
    'pastedLuykeBI': { stateKey: null, saveKey: 'daily_paste_luyke', isPasted: true, uiId: 'status-luyke', firestoreKey: 'pastedLuykeBI' },
    'pastedThuongERP': { stateKey: 'thuongERPData', saveKey: 'daily_paste_thuongerp', isPasted: true, uiId: 'status-thuongerp', firestoreKey: 'pastedThuongERP', processFunc: services.processThuongERP },
    'pastedThiduaNVBI': { stateKey: 'pastedThiDuaReportData', saveKey: 'daily_paste_thiduanv', isPasted: true, uiId: 'status-thiduanv', firestoreKey: 'pastedThiduaNVBI' }, // *** MODIFIED (v4.40) ***
    // Previous Month Files
    'ycx-thangtruoc': { stateKey: 'ycxDataThangTruoc', saveKey: 'saved_ycx_thangtruoc', isPasted: false, uiId: 'ycx-thangtruoc', firestoreKey: 'ycx_thangtruoc' },
    'thuongnong-thangtruoc': { stateKey: 'thuongNongDataThangTruoc', saveKey: 'saved_thuongnong_thangtruoc', isPasted: false, uiId: 'thuongnong-thangtruoc', firestoreKey: 'thuongnong_thangtruoc' },
    // Previous Month Pasted
    'pastedThuongERPThangTruoc': { stateKey: 'thuongERPDataThangTruoc', saveKey: 'saved_thuongerp_thangtruoc', isPasted: true, uiId: 'status-thuongerp-thangtruoc', firestoreKey: 'pastedThuongERPThangTruoc', processFunc: services.processThuongERP }
};

const app = {
    currentVersion: '3.5', // Giữ nguyên version này, bạn có thể tự cập nhật sau khi tích hợp xong
    storage: storage,
    unsubscribeDataListener: null,
    _isInitialized: false,
    _localDataVersions: {},

    async init() {
        try {
            await firebase.initCore();
            console.log("Rendering static UI components...");
            sidebar.render('#sidebar-container');
            drawerInterface.render('#interface-drawer-container');
            drawerGoal.render('#goal-drawer-container');
            modalForceUpdate.render('#modal-force-update-container');
            modalAdmin.render('#modal-admin-container');
            await modalLogin.render('#modal-login-container');
            console.log("[main.js init] Finished awaiting modalLogin.render.");
            modalHelp.render('#modal-help-container');
            modalChart.render('#modal-chart-container');
            modalComposer.render('#modal-composer-container');
            modalPreview.render('#modal-preview-container');
            modalSelection.render('#modal-selection-container');
            feather.replace();
            console.log("Static UI components rendered.");

            console.log("Ensuring anonymous authentication...");
            const user = await auth.ensureAnonymousAuth();

            if (user && !this._isInitialized) {
                this._isInitialized = true;
                console.log("Anonymous auth confirmed. Setting up listeners and email identification...");
                firebase.setupListeners();
                console.log("[main.js init] Calling auth.initEmailIdentification...");
                auth.initEmailIdentification(this.continueInit.bind(this));
            } else if (user && this._isInitialized) {
                console.log("App already initialized, skipping init steps.");
            }

        } catch (error) {
            console.error("Lỗi nghiêm trọng trong quá trình khởi tạo ứng dụng:", error);
            ui.showNotification("Lỗi khởi tạo. Vui lòng thử tải lại trang.", "error");
            const mainContent = document.getElementById('main-content');
            if (mainContent) {
                 mainContent.innerHTML = '<div class="placeholder-message notification-error">Lỗi nghiêm trọng, không thể khởi động ứng dụng. Vui lòng kiểm tra kết nối mạng, cài đặt Firebase Rules và thử lại.</div>';
            }
        }
    },

    async continueInit() {
        if (!appState.currentUser || !appState.currentUser.email) {
             console.error("continueInit called without user email in appState.");
             ui.showNotification("Lỗi: Không tìm thấy thông tin người dùng.", "error");
             return;
        }
        console.log(`Email identification complete: ${appState.currentUser.email}. Continuing app initialization...`);

        // *** >>> SỬA LỖI ĐẾM LƯỢT TRUY CẬP: GỌI HÀM ĐẾM Ở ĐÂY <<< ***
        firebase.upsertUserRecord(appState.currentUser.email);
        // *** >>> KẾT THÚC SỬA LỖI <<< ***

        appState.competitionConfigs = [];
        appState.viewingDetailFor = null;

        try {
            const storedVersions = localStorage.getItem(LOCAL_DATA_VERSIONS_KEY);
            if (storedVersions) {
                this._localDataVersions = JSON.parse(storedVersions);
                console.log("%c[continueInit] Loaded _localDataVersions from localStorage:", "color: brown;", this._localDataVersions);
            } else {
                this._localDataVersions = {};
                console.log("%c[continueInit] No _localDataVersions found in localStorage, initialized as {}.", "color: brown;");
            }
        } catch (e) {
            console.error("%cError loading _localDataVersions from localStorage:", "color: red;", e);
            this._localDataVersions = {};
        }

        this.loadAndApplyBookmarkLink();
        this.loadAndDisplayQrCode();
        this.setupMarquee();
        await this.storage.openDB();
        console.log("Loading category data from Firestore...");
        try {
            const { categories, brands } = await firebase.loadCategoryDataFromFirestore();
            appState.categoryStructure = categories;
            appState.brandList = brands;
            console.log(`Successfully populated ${appState.categoryStructure.length} categories and ${appState.brandList.length} brands from Firestore.`);
            
            // === FIX 1a (Thêm) ===
            // Cập nhật trạng thái UI sau khi tải từ cloud, thay vì để trống
            uiComponents.updateFileStatus('category-structure', 'Tải từ Cloud', `✓ Đã tải ${categories.length} nhóm & ${brands.length} hãng.`, 'success', false);
            // === END FIX ===

        } catch (error) {
             console.error("Error loading category data after auth:", error);
             ui.showNotification("Không thể tải cấu trúc ngành hàng từ cloud.", "error");
        }

        console.log("Loading calculation declarations from Firestore...");
        try {
            const declarations = await firebase.loadDeclarationsFromFirestore();
            appState.declarations = declarations;
            const decYcxEl = document.getElementById('declaration-ycx');
            if (decYcxEl) decYcxEl.value = declarations.hinhThucXuat || config.DEFAULT_DATA.HINH_THUC_XUAT_TINH_DOANH_THU.join('\n');
            const decYcxGopEl = document.getElementById('declaration-ycx-gop');
            if (decYcxGopEl) decYcxGopEl.value = declarations.hinhThucXuatGop || config.DEFAULT_DATA.HINH_THUC_XUAT_TRA_GOP.join('\n');
            const decHeSoEl = document.getElementById('declaration-heso');
            if (decHeSoEl) decHeSoEl.value = declarations.heSoQuyDoi || Object.entries(config.DEFAULT_DATA.HE_SO_QUY_DOI).map(([k, v]) => `${k},${v}`).join('\n');
        } catch (error) {
             console.error("Error loading declarations after auth:", error);
             ui.showNotification("Không thể tải khai báo tính toán từ cloud.", "error");
        }
        
        // *** NEW (v4.41): Load competition name mappings from Firestore ***
        console.log("Loading competition name mappings from Firestore...");
        try {
            appState.competitionNameMappings = await firebase.loadCompetitionNameMappings();
            console.log("Successfully loaded competition name mappings from Firestore.");
        } catch (error) {
             console.error("Error loading competition name mappings:", error);
             ui.showNotification("Không thể tải tên rút gọn (thi đua) từ cloud.", "error");
             appState.competitionNameMappings = {}; // Ensure it's an object on failure
        }
        // *** END NEW ***

         initializeEventListeners(this);
        await this.loadDataFromStorage();

        const savedWarehouse = localStorage.getItem('selectedWarehouse');
        if (savedWarehouse) {
            appState.selectedWarehouse = savedWarehouse;
            if(this.unsubscribeDataListener) this.unsubscribeDataListener();
            console.log(`Re-attaching listener for saved warehouse: ${savedWarehouse}`);
            this.unsubscribeDataListener = firebase.listenForDataChanges(savedWarehouse, (cloudData) => {
                this.handleCloudDataUpdate(cloudData);
            });

            console.log(`%c[continueInit] Checking sync status for warehouse ${savedWarehouse} (AFTER loadDataFromStorage)...`, "color: teal; font-weight: bold;");

            const fileDataTypes = Object.keys(ALL_DATA_MAPPING).filter(k => !ALL_DATA_MAPPING[k].isPasted);

            fileDataTypes.forEach(fileTypeKey => {
                const mappingInfo = ALL_DATA_MAPPING[fileTypeKey];
                if (!mappingInfo) return;

                const { firestoreKey, uiId } = mappingInfo;
                const metadata = this._getSavedMetadata(savedWarehouse, firestoreKey);
                const localVersionInfo = this._localDataVersions?.[savedWarehouse]?.[firestoreKey] || { version: 0, timestamp: 0 };

                console.log(`%c[continueInit] --> Checking ${firestoreKey}:`, "color: teal;");
                console.log(`%c    Metadata (localStorage):`, "color: teal;", metadata ? `v${metadata.version}, ts ${metadata.timestamp}, by ${metadata.updatedBy}` : 'null');
                console.log(`%c    Local Version Info (_localDataVersions):`, "color: teal;", `v${localVersionInfo.version}, ts ${localVersionInfo.timestamp}`);

                const fileStatusSpan = document.getElementById(`file-status-${uiId}`);
                // === FIX 2b.1 (Sửa) ===
                // Thay đổi cách kiểm tra 'cache', vì chúng ta sẽ hiển thị số dòng
                const currentStatusIsCache = fileStatusSpan?.textContent?.includes('Đã tải');

                if (currentStatusIsCache) {
                     if (metadata && metadata.version > localVersionInfo.version) {
                        console.log(`%c[continueInit] Cache loaded for ${firestoreKey}, but cloud v${metadata.version} is newer. Showing download button.`, "color: orange;");
                        uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', '', 'default', true, metadata, firestoreKey, savedWarehouse);
                     } else {
                         console.log(`%c[continueInit] UI status for ${firestoreKey} was set by loadDataFromStorage (cache) and is up-to-date. Keeping it.`, "color: green;");
                     }
                } else if (metadata) {
                    if (metadata.version > localVersionInfo.version) {
                        uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', '', 'default', true, metadata, firestoreKey, savedWarehouse);
                        console.log(`%c[continueInit] UI status for ${firestoreKey} requires download (Cloud v${metadata.version} > Local v${localVersionInfo.version}).`, "color: green;");
                    } else {
                         uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', '', 'default', true, metadata, firestoreKey, savedWarehouse);
                        console.log(`%c[continueInit] UI status for ${firestoreKey} requires download (v${metadata.version}). Cache empty or not loaded.`, "color: orange;");
                    }
                } else {
                    uiComponents.updateFileStatus(uiId, '', `Đang chờ đồng bộ từ kho ${savedWarehouse}...`, 'default');
                    console.log(`%c[continueInit] No metadata for ${firestoreKey}, waiting for sync.`, "color: orange;");
                }
            });
            console.log(`%c[continueInit] Finished checking sync status.`, "color: teal; font-weight: bold;");

        } else {
             Object.keys(ALL_DATA_MAPPING).filter(k => !ALL_DATA_MAPPING[k].isPasted).forEach(fileTypeKey => {
                 uiComponents.updateFileStatus(ALL_DATA_MAPPING[fileTypeKey].uiId, '', 'Chọn kho để đồng bộ...', 'default');
             });
             const dsnvFilename = localStorage.getItem(LOCAL_DSNV_FILENAME_KEY);
             if (!dsnvFilename) {
                 uiComponents.updateFileStatus('danhsachnv', '', 'Chưa thêm file', 'default');
             }
        }

        if (appState.danhSachNhanVien.length > 0) {
            uiComponents.populateWarehouseSelector();
        } else {
             console.error("[main.js continueInit] CRITICAL: appState.danhSachNhanVien is empty! Warehouse selector cannot be populated.");
             const selector = document.getElementById('data-warehouse-selector');
             if (selector) {
                 selector.innerHTML = '<option value="">-- Vui lòng tải Danh sách Nhân viên --</option>';
                 selector.disabled = true;
             }
        }

        settingsService.loadInterfaceSettings();
        settingsService.applyContrastSetting();
        settingsService.loadHighlightSettings();
        ui.populateAllFilters();
        settingsService.loadAndApplyLuykeGoalSettings();
        settingsService.loadAndApplyRealtimeGoalSettings();
        this.loadPastedDataFromStorage();
        this.switchTab('data-section');
        this.checkForUpdates();
        setInterval(() => this.checkForUpdates(), 15 * 60 * 1000);
    },

    async handleCloudDataUpdate(cloudData) {
        // ... (Giữ nguyên)
        const receivedTime = new Date().toLocaleTimeString();
        console.log(`%c[handleCloudDataUpdate @ ${receivedTime}] Received data snapshot from Firestore listener:`, "color: blue; font-weight: bold;", JSON.stringify(cloudData).substring(0, 500) + "...");
        let showSyncNotification = false;

        const currentWarehouse = appState.selectedWarehouse;
        if (!currentWarehouse) {
            console.warn(`[handleCloudDataUpdate @ ${receivedTime}] Received update but no warehouse selected. Ignoring.`);
            return;
        }

        for (const [dataType, mappingInfo] of Object.entries(ALL_DATA_MAPPING)) {
            const cloudMetadata = cloudData[dataType];
            const { stateKey, saveKey, isPasted, uiId, processFunc } = mappingInfo;

            if (dataType === 'giocong' || dataType === 'thuongnong' || dataType.startsWith('pasted')) {
                console.log(`%c[handleCloudDataUpdate @ ${receivedTime}] --> Processing METADATA for WATCHED dataType: ${dataType}`, "color: fuchsia; font-weight: bold;", cloudMetadata);
            }

            if (cloudMetadata && typeof cloudMetadata === 'object' && cloudMetadata.version !== undefined && cloudMetadata.timestamp !== undefined) {

                const updatedBy = cloudMetadata.updatedBy;
                const cloudServerTimestampObj = cloudMetadata.updatedAt;
                 const updatedTime = cloudServerTimestampObj
                    ? ui.formatTimeAgo(cloudServerTimestampObj.toDate ? cloudServerTimestampObj.toDate() : new Date(cloudServerTimestampObj))
                    : 'vừa xong';


                const cloudVersion = cloudMetadata.version || 0;
                const cloudLocalTimestamp = cloudMetadata.timestamp || 0;
                const rowCount = cloudMetadata.rowCount || 0;
                const fileName = cloudMetadata.fileName || 'Cloud';

                const localVersionInfo = this._localDataVersions?.[currentWarehouse]?.[dataType] || { version: 0, timestamp: 0 };
                const lastLocalVersion = localVersionInfo.version;
                const lastLocalTimestamp = localVersionInfo.timestamp;

                let shouldUpdateLocalInfo = false;
                if (cloudVersion > lastLocalVersion) {
                    shouldUpdateLocalInfo = true;
                } else if (cloudVersion === lastLocalVersion && cloudLocalTimestamp > lastLocalTimestamp) {
                  shouldUpdateLocalInfo = true;
                }

                if (shouldUpdateLocalInfo) {
                    const metadataKey = `${LOCAL_METADATA_PREFIX}${currentWarehouse}_${dataType}`;
                    try {
                        localStorage.setItem(metadataKey, JSON.stringify(cloudMetadata));
                        console.log(`%c[handleCloudDataUpdate @ ${receivedTime}] Saved received metadata for ${dataType} @ ${currentWarehouse} to localStorage ('${metadataKey}').`, "color: green; font-weight: bold;");
                    } catch (e) {
                        console.error(`Error saving metadata for ${dataType} to localStorage:`, e);
                    }

                    if (appState.currentUser && updatedBy === appState.currentUser.email) {
                        if (isPasted) {
                            let processedCount = 0;
                            // *** MODIFIED (v4.40) ***
                            // Logic đếm số lượng cho pastedThiduaNVBI đã được chuyển sang hàm handleThiduaNVPaste
                            // Ở đây chỉ cần cập nhật trạng thái chung
                            if (stateKey && processFunc && cloudMetadata.content && dataType !== 'pastedThiduaNVBI') {
                                try {
                                     const processed = processFunc(cloudMetadata.content);
                                    processedCount = processed?.length || 0;
                                } catch (e) { console.error(`Error processing pasted content during status update for ${dataType}:`, e); }
                            } else if (dataType === 'pastedThiduaNVBI') {
                                // Tải lại dữ liệu đã xử lý từ localStorage (do chính người dùng này lưu)
                                const processedData = JSON.parse(localStorage.getItem(saveKey) || '[]');
                                processedCount = processedData.length;
                            }
                             uiComponents.updatePasteStatus(uiId, '', 'success', cloudMetadata, processedCount);
                        } else {
                             uiComponents.updateFileStatus(uiId, fileName, '', 'success', false, cloudMetadata);
                        }
                    } else {
                        showSyncNotification = true;
                        if (isPasted) {
                            console.log(`%c[handleCloudDataUpdate] Pasted data ${dataType} is new. Processing content...`, "color: darkcyan; font-weight: bold;");
                            const content = cloudMetadata.content || '';
                            let processedCount = 0;
                            try {
                                 // *** MODIFIED (v4.40) ***
                                 if (dataType === 'pastedThiduaNVBI') {
                                    // Đây là logic quan trọng: Dữ liệu thi đua cần chạy qua BỘ XỬ LÝ ĐẦY ĐỦ
                                    // 1. Phân tích cú pháp
                                    const parsedData = services.parsePastedThiDuaTableData(content);
                                    if (!parsedData.success) throw new Error(parsedData.error);
                                    
                                    // 2. Cập nhật Bảng Ánh Xạ (nhưng không ghi đè tên rút gọn đã có)
                                    services.updateCompetitionNameMappings(parsedData.mainHeaders);
                                    
                                    // 3. Chuẩn hóa (tra cứu DSNV, áp dụng tên rút gọn)
                                    const processedData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
                                    
                                    // 4. Lưu kết quả đã xử lý (KHÔNG LƯU NỘI DUNG THÔ)
                                    appState[stateKey] = processedData;
                                    localStorage.setItem(saveKey, JSON.stringify(processedData)); // Lưu mảng đã xử lý
                                    processedCount = processedData.length;

                                    // === FIX 2a.1 (Thêm) ===
                                    localStorage.setItem(RAW_PASTE_THIDUANV_KEY, content); // Lưu cả text thô
                                    const el = document.getElementById('paste-thiduanv');
                                    if (el) el.value = content;
                                    // === END FIX ===

                                } else {
                                    // Logic cũ cho các ô dán khác
                                    localStorage.setItem(saveKey, content);
                                    if (stateKey && processFunc) {
                                         const processedData = processFunc(content);
                                        appState[stateKey] = processedData;
                                        processedCount = processedData?.length || 0;
                                    } else if (stateKey) {
                                        console.warn(`Missing processFunc for pasted data ${dataType}`);
                                    } else if (uiId === 'status-luyke') {
                                        document.getElementById('paste-luyke').value = content;
                                    }
                                }
                                // *** END MODIFIED (v4.40) ***

                                if (!this._localDataVersions[currentWarehouse]) this._localDataVersions[currentWarehouse] = {};
                                this._localDataVersions[currentWarehouse][dataType] = { version: cloudVersion, timestamp: cloudLocalTimestamp };
                                localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(this._localDataVersions));

                                uiComponents.updatePasteStatus(uiId, '', 'success', cloudMetadata, processedCount);
                                this.updateAndRenderCurrentTab();
                                // Cập nhật bảng khai báo nếu admin đang mở
                                if (dataType === 'pastedThiduaNVBI' && appState.isAdmin && document.getElementById('declaration-section')?.classList.contains('hidden') === false) {
                                    ui.renderAdminPage();
                                }
                            } catch (e) {
                                console.error(`Error processing pasted data ${dataType} from cloud:`, e);
                                uiComponents.updatePasteStatus(uiId, `Lỗi xử lý v${cloudVersion} từ cloud.`, 'error');
                            }
                        } else {
                            uiComponents.updateFileStatus(uiId, fileName, '', 'default', true, cloudMetadata, dataType, currentWarehouse);
                        }
                    }
                } else {
                    const reasonText = '';
                    if (appState.currentUser && updatedBy === appState.currentUser.email) {
                         const statusText = `✓ Đã đồng bộ cloud ${updatedTime} ${reasonText}`.trim();
                         isPasted ? uiComponents.updatePasteStatus(uiId, statusText, 'success', cloudMetadata) : uiComponents.updateFileStatus(uiId, fileName, statusText, 'success', false, cloudMetadata);
                    } else {
                         const statusText = `ⓘ ${updatedBy} cập nhật ${updatedTime} ${reasonText}`.trim();
                          isPasted ? uiComponents.updatePasteStatus(uiId, statusText, 'default', cloudMetadata) : uiComponents.updateFileStatus(uiId, fileName, statusText, 'default', false, cloudMetadata);
                    }
                }
            } else {
                 if (dataType === 'giocong' || dataType === 'thuongnong' || dataType.startsWith('pasted')) {
                     console.warn(`%c[handleCloudDataUpdate @ ${receivedTime}] No valid METADATA structure found (version or timestamp missing) for WATCHED dataType ${dataType}. Received:`, "color: red; font-weight: bold;", cloudMetadata);
                 }
            }
        }
        if (showSyncNotification) {
            ui.showNotification('Có bản cập nhật dữ liệu mới từ cloud!', 'success');
        }
    },

    async handleDownloadAndProcessData(dataType, warehouse) {
        // ... (Giữ nguyên)
        console.log(`%c[handleDownloadAndProcessData] User requested download for ${dataType} @ ${warehouse}`, "color: darkcyan; font-weight: bold;");
        const metadataKey = `${LOCAL_METADATA_PREFIX}${warehouse}_${dataType}`;

        const mappingInfo = Object.values(ALL_DATA_MAPPING).find(m => m.firestoreKey === dataType);

        if (!mappingInfo || mappingInfo.isPasted) {
            console.error(`[handleDownloadAndProcessData] Invalid or non-file dataType: ${dataType}`);
            ui.showNotification(`Lỗi: Loại dữ liệu không hợp lệ (${dataType}).`, 'error');
            return;
        }
        const { stateKey, saveKey, uiId } = mappingInfo;

        let metadata;

        try {
            const storedMetadata = localStorage.getItem(metadataKey);
            if (!storedMetadata) {
                throw new Error(`Không tìm thấy thông tin đồng bộ (${metadataKey}) trong localStorage.`);
            }
            metadata = JSON.parse(storedMetadata);
            const downloadURL = metadata.downloadURL;
            const expectedVersion = metadata.version;
            const expectedTimestamp = metadata.timestamp;
            const expectedFileName = metadata.fileName || `${dataType}_v${expectedVersion}.xlsx`;

            if (!downloadURL) {
                 throw new Error("URL tải xuống không hợp lệ trong thông tin đồng bộ.");
            }

            uiComponents.updateFileStatus(uiId, expectedFileName, `Đang tải file...`, 'default', false);
            ui.showProgressBar(uiId);

            console.log(`[handleDownloadAndProcessData] Fetching file from: ${downloadURL}`);
            const response = await fetch(downloadURL);
            if (!response.ok) {
                throw new Error(`Tải file thất bại: ${response.status} ${response.statusText}`);
            }
            const fileBlob = await response.blob();
            console.log(`[handleDownloadAndProcessData] File downloaded successfully. Blob size: ${fileBlob.size}`);
            const downloadedFile = new File([fileBlob], expectedFileName, { type: fileBlob.type });

            uiComponents.updateFileStatus(uiId, expectedFileName, `Đang xử lý file...`, 'default');

            const workbook = await this.handleFileRead(downloadedFile);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);

            const normalizeType = dataType.replace('_thangtruoc', '');

            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, normalizeType);
            console.log(`[handleDownloadAndProcessData] File processing result - Success: ${success}, Rows: ${normalizedData?.length}`);

            if (!success) {
                 throw new Error(`File tải về lỗi: Thiếu cột ${missingColumns.join(', ')}.`);
            }

            appState[stateKey] = normalizedData;
            if (saveKey) {
                console.log(`[handleDownloadAndProcessData] Saving downloaded & processed data (${normalizedData.length} rows) to cache: ${saveKey}`);
                await this.storage.setItem(saveKey, normalizedData);
            }

            if (!this._localDataVersions[warehouse]) this._localDataVersions[warehouse] = {};
            this._localDataVersions[warehouse][dataType] = { version: expectedVersion, timestamp: expectedTimestamp };
            try {
                localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(this._localDataVersions));
                console.log(`%c[handleDownloadAndProcessData] CRITICAL FIX: Updated local version tracker to (v${expectedVersion}, t${expectedTimestamp}) and saved to localStorage.`, "color: purple; font-weight: bold;");
            } catch (e) {
                 console.error("[handleDownloadAndProcessData] Error saving updated versions/timestamps to localStorage:", e);
            }

            uiComponents.updateFileStatus(uiId, expectedFileName, '', 'success', false, metadata);
            ui.showNotification(`Đã tải và xử lý thành công dữ liệu ${dataType} (v${expectedVersion})!`, 'success');

            this.updateAndRenderCurrentTab();

        } catch (error) {
            console.error(`%c[handleDownloadAndProcessData] Error processing ${dataType} @ ${warehouse}:`, "color: red;", error);
            ui.showNotification(`Lỗi khi tải/xử lý dữ liệu ${dataType}: ${error.message}`, 'error');
             if (metadata) {
                  const statusText = `Lỗi tải/xử lý. Thử lại?`;
                   uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', statusText, 'error', true, metadata, dataType, warehouse);
             } else {
                  const fallbackMetadata = this._getSavedMetadata(warehouse, dataType);
                  if(fallbackMetadata) {
                      const statusText = `Lỗi tải/xử lý. Thử lại?`;
                      uiComponents.updateFileStatus(uiId, fallbackMetadata.fileName || 'Cloud', statusText, 'error', true, fallbackMetadata, dataType, warehouse);
                  } else {
                      uiComponents.updateFileStatus(uiId, 'Cloud', 'Lỗi tải/xử lý. Không tìm thấy thông tin.', 'error', false);
                  }
             }
        } finally {
            ui.hideProgressBar(uiId);
        }
    },

    _getSavedMetadata(warehouse, dataType) {
        // ... (Giữ nguyên)
        const metadataKey = `${LOCAL_METADATA_PREFIX}${warehouse}_${dataType}`;
        try {
            const storedMetadata = localStorage.getItem(metadataKey);
            return storedMetadata ? JSON.parse(storedMetadata) : null;
        } catch (e) {
            console.error(`Error reading metadata ${metadataKey} from localStorage:`, e);
            return null;
        }
    },

    async setupMarquee() {
        // ... (Giữ nguyên)
        const marqueeContainer = document.getElementById('version-marquee-container');
        const marqueeText = marqueeContainer?.querySelector('.marquee-text');
        if (!marqueeContainer || !marqueeText) return;
        try {
            const versionRes = await fetch(`./version.json?v=${new Date().getTime()}`);
            const versionInfo = await versionRes.json();
            const currentVersion = versionInfo.version || this.currentVersion;
            marqueeText.textContent = `🔥 Chi tiết bản cập nhật - Phiên bản ${currentVersion}`;
            marqueeContainer.addEventListener('click', async () => {
                 try {
                    const changelogRes = await fetch(`./changelog.json?v=${new Date().getTime()}`);
                    const changelogData = await changelogRes.json();
                    const modalTitle = document.getElementById('help-modal-title');
                    const modalContent = document.getElementById('help-modal-content');
                    if (modalTitle) modalTitle.textContent = "Lịch Sử Cập Nhật";
                    if (modalContent) modalContent.innerHTML = this._formatChangelogForModal(changelogData);
                    ui.toggleModal('help-modal', true);
                } catch (error) {
                    console.error("Lỗi khi tải hoặc hiển thị changelog:", error);
                    ui.showNotification("Không thể tải chi tiết cập nhật.", "error");
                }
            });
        } catch (error) {
            console.error("Lỗi khi thiết lập marquee:", error);
            marqueeText.textContent = "Không thể tải thông tin phiên bản.";
        }
    },

    _formatChangelogForModal(changelogData) {
        // ... (Giữ nguyên)
        if (!changelogData || changelogData.length === 0) return '<p>Không có lịch sử cập nhật.</p>';
        return changelogData.map(item => `
            <div class="mb-4 pb-4 border-b last:border-b-0">
                <h4 class="font-bold text-blue-600 mb-2">Phiên bản ${item.version} (${item.date})</h4>
                <ul class="list-disc list-inside text-gray-700 space-y-1 text-sm">
                    ${item.notes.map(note => `<li>${note}</li>`).join('')}
                </ul>
            </div>
        `).join('');
    },

    async checkForUpdates() {
        // ... (Giữ nguyên)
        try {
            const response = await fetch(`./version.json?v=${new Date().getTime()}`);
            if (!response.ok) return;
            const serverConfig = await response.json();
            if (serverConfig.version && serverConfig.version !== this.currentVersion) {
                 console.log(`Phiên bản mới ${serverConfig.version} đã sẵn sàng!`);
                const changelogRes = await fetch(`./changelog.json?v=${new Date().getTime()}`);
                const changelogData = await changelogRes.json();
                const newVersionDetails = changelogData.find(log => log.version === serverConfig.version);
                const titleEl = document.getElementById('force-update-title');
                const notesContainer = document.getElementById('update-notes-container');
                if (titleEl) titleEl.textContent = `📢 Đã có phiên bản mới ${serverConfig.version}!`;
                if (notesContainer && newVersionDetails && newVersionDetails.notes) {
                    notesContainer.innerHTML = `
                        <p class="text-sm font-semibold text-gray-700 mb-2">Nội dung cập nhật:</p>
                        <ul class="list-disc list-inside text-sm text-gray-600 space-y-1">
                             ${newVersionDetails.notes.map(note => `<li>${note}</li>`).join('')}
                         </ul>
                    `;
                } else if (notesContainer) {
                    notesContainer.innerHTML = '<p class="text-sm text-gray-500">Không thể tải chi tiết cập nhật.</p>';
                }
                ui.toggleModal('force-update-modal', true);
            }
        } catch (error) {
             console.error('Không thể kiểm tra phiên bản mới:', error);
        }
    },

    async loadDataFromStorage() {
        // ... (Giữ nguyên)
 
        let dsnvLoadSuccess = false;
        const loadSavedFile = async (saveKey, stateKey, fileType, uiId) => {
            console.log(`[main.js loadDataFromStorage] Attempting to load ${saveKey} from IndexedDB...`);
            let savedData = null;
            try {
                savedData = await this.storage.getItem(saveKey);
            } catch (indexedDbError) {
                 console.error(`[main.js loadDataFromStorage] CRITICAL Error reading ${saveKey} from IndexedDB:`, indexedDbError);
                 uiComponents.updateFileStatus(uiId, '', `Lỗi đọc cache IndexedDB!`, 'error');
                 if (saveKey === 'saved_danhsachnv') {
                     const selector = document.getElementById('data-warehouse-selector');
                     if (selector) {
                         selector.innerHTML = '<option value="">Lỗi tải DSNV từ cache!</option>';
                         selector.disabled = true;
                     }
                 }
                 return;
            }

            if (!savedData) {
                console.log(`[main.js loadDataFromStorage] ${saveKey} not found in IndexedDB.`);
                return;
            }

            console.log(`[main.js loadDataFromStorage] Found ${saveKey} in IndexedDB.`);
            try {
                if (saveKey === 'saved_category_structure') {
                     if (appState.categoryStructure.length > 0 || appState.brandList.length > 0) {
                        // Đã được xử lý bởi logic Fix 1a, không cần làm gì ở đây
                    }
                    return;
                }
                const normalizedData = savedData;
                if (normalizedData && Array.isArray(normalizedData) && normalizedData.length > 0) {
                    console.log(`[main.js loadDataFromStorage] Successfully validated data for ${saveKey}, ${normalizedData.length} rows.`);
                    appState[stateKey] = normalizedData;

                    let fileNameToShow = `Cache (${normalizedData.length} dòng)`;
                    // === FIX 2b.1 (Sửa) ===
                    let statusText = `✓ Đã tải ${normalizedData.length} dòng`;
                    let statusType = 'success';
                    let metadata = null;

                    const mappingEntry = Object.values(ALL_DATA_MAPPING).find(m => m.saveKey === saveKey);
                    const firestoreKey = mappingEntry ? mappingEntry.firestoreKey : null;

                    if (saveKey === 'saved_danhsachnv') {
                         dsnvLoadSuccess = true;
                         fileNameToShow = localStorage.getItem(LOCAL_DSNV_FILENAME_KEY) || fileNameToShow;
                    } else if (firestoreKey && !mappingEntry.isPasted) {
                         const currentWarehouse = localStorage.getItem('selectedWarehouse');
                         if (currentWarehouse) {
                             metadata = this._getSavedMetadata(currentWarehouse, firestoreKey);
                             if (metadata) {
                                  fileNameToShow = metadata.fileName || fileNameToShow;
                                 console.log(`[main.js loadDataFromStorage] Found metadata for ${firestoreKey}, will use it in status update.`);
                             } else {
                                 console.log(`[main.js loadDataFromStorage] No metadata found in localStorage for ${firestoreKey}, using basic cache status.`);
                             }
                         } else {
                             console.log(`[main.js loadDataFromStorage] No warehouse selected, using basic cache status for ${firestoreKey}.`);
                         }
                    }

                    uiComponents.updateFileStatus(uiId, fileNameToShow, statusText, statusType, false, metadata);

                    if (stateKey === 'danhSachNhanVien') {
                        console.log("[main.js loadDataFromStorage] Updating employee maps after loading DSNV from cache.");
                        services.updateEmployeeMaps();
                    }
                } else {
                     console.error(`[main.js loadDataFromStorage] Invalid or empty data array found in cache for ${saveKey}.`);
                     uiComponents.updateFileStatus(uiId, '', `Lỗi dữ liệu cache.`, 'error');
                     try {
                         await this.storage.setItem(saveKey, null);
                         console.log(`[main.js loadDataFromStorage] Cleared potentially corrupted cache for ${saveKey}.`);
                     } catch(clearError) {
                         console.error(`[main.js loadDataFromStorage] Failed to clear corrupted cache for ${saveKey}:`, clearError);
                     }
                }
             } catch (e) {
                console.error(`[main.js loadDataFromStorage] Lỗi xử lý ${saveKey} từ IndexedDB:`, e);
                uiComponents.updateFileStatus(uiId, '', `Lỗi xử lý cache.`, 'error');
            }
        };

        await loadSavedFile('saved_danhsachnv', 'danhSachNhanVien', 'danhsachnv', 'danhsachnv');
        if (!dsnvLoadSuccess) {
              console.error("[main.js loadDataFromStorage] CRITICAL: Failed to load 'saved_danhsachnv' from IndexedDB. App state might be incorrect.");
            const selector = document.getElementById('data-warehouse-selector');
             if (selector) {
                 selector.innerHTML = '<option value="">Lỗi tải DSNV từ cache!</option>';
                 selector.disabled = true;
             }
        }

        await loadSavedFile('saved_ycx_thangtruoc', 'ycxDataThangTruoc', 'ycx', 'ycx-thangtruoc');
        await loadSavedFile('saved_thuongnong_thangtruoc', 'thuongNongDataThangTruoc', 'thuongnong', 'thuongnong-thangtruoc');
        await loadSavedFile('saved_ycx', 'ycxData', 'ycx', 'ycx');
        await loadSavedFile('saved_giocong', 'rawGioCongData', 'giocong', 'giocong');
        await loadSavedFile('saved_thuongnong', 'thuongNongData', 'thuongnong', 'thuongnong');

        try {
             const savedLuykeGoals = localStorage.getItem('luykeGoalSettings');
            if(savedLuykeGoals) appState.luykeGoalSettings = JSON.parse(savedLuykeGoals);
            const savedRealtimeGoals = localStorage.getItem('realtimeGoalSettings');
            if (savedRealtimeGoals) appState.realtimeGoalSettings = JSON.parse(savedRealtimeGoals);
            const savedTemplates = localStorage.getItem('composerTemplates');
            if (savedTemplates) {
                let parsedTemplates = JSON.parse(savedTemplates);
                for (const key in parsedTemplates) {
                    if (typeof parsedTemplates[key] === 'string') {
                        const oldString = parsedTemplates[key];
                        parsedTemplates[key] = {};
                        if (key === 'luyke') parsedTemplates[key]['subtab-luyke-sieu-thi'] = oldString;
                        else if (key === 'sknv') parsedTemplates[key]['subtab-sknv'] = oldString;
                        else if (key === 'realtime') parsedTemplates[key]['subtab-realtime-sieu-thi'] = oldString;
                    }
                }
                appState.composerTemplates = parsedTemplates;
            } else {
                appState.composerTemplates = { luyke: {}, sknv: {}, realtime: {} };
            }
            const savedCompetition = localStorage.getItem('competitionConfigs');
            if (savedCompetition) appState.competitionConfigs = JSON.parse(savedCompetition);
            
            // *** MODIFIED (v4.41): REMOVED localStorage load for competitionNameMappings ***
            // (Nó sẽ được tải từ Firestore trong continueInit)
            
            const savedPastedThiDua = localStorage.getItem('daily_paste_thiduanv');
            if (savedPastedThiDua) {
                try {
                    // Lưu ý: Chúng ta lưu mảng ĐÃ XỬ LÝ, không phải text thô
                    appState.pastedThiDuaReportData = JSON.parse(savedPastedThiDua); 
                    console.log(`[main.js loadDataFromStorage] Loaded ${appState.pastedThiDuaReportData.length} rows of processed pasted competition data.`);
                } catch (e) {
                    console.error("Lỗi đọc daily_paste_thiduanv từ localStorage:", e);
                    appState.pastedThiDuaReportData = [];
                }
            }
            // *** END MODIFIED ***

        } catch (e) { console.error("Lỗi đọc cài đặt từ localStorage:", e); }
    },

    loadPastedDataFromStorage() {
        // === START: DEBUG (v4.43) ===
        console.log("%c[DEBUG loadPastedDataFromStorage] Bắt đầu tải dữ liệu dán...", "color: brown; font-weight: bold;");
        // === END: DEBUG ===

        const loadPasted = (saveKey, stateKey, uiId, processFunc) => {
            // === START: DEBUG (v4.43) ===
            console.log(`%c[DEBUG loadPastedDataFromStorage] Đang xử lý key: ${saveKey}`, "color: brown;");
            // === END: DEBUG ===
            
            const pastedText = localStorage.getItem(saveKey); // Đây là text thô (ngoại trừ daily_paste_thiduanv)
            
            // === START: DEBUG (v4.43) ===
            if (pastedText) {
                console.log(`%c[DEBUG loadPastedDataFromStorage]   > Tìm thấy dữ liệu cho ${saveKey}. (Độ dài: ${pastedText.length})`, "color: green;");
            } else {
                console.log(`%c[DEBUG loadPastedDataFromStorage]   > Không tìm thấy dữ liệu cho ${saveKey} trong localStorage.`, "color: red;");
            }
            // === END: DEBUG ===

            if (pastedText) {
                 const el = document.getElementById(uiId.replace('status-', 'paste-'));
                 
                 // === FIX 2a.2 (Sửa) ===
                 // Không điền text thô cho ô thi đua NV, vì chúng ta lưu *dữ liệu đã xử lý* vào key đó
                 if (el && saveKey !== 'daily_paste_thiduanv') {
                    el.value = pastedText;
                 }
                 // === END FIX ===

                let processedCount = 0;
                
                // === FIX 2a.2 (Sửa) ===
                if (saveKey === 'daily_paste_thiduanv') {
                    // Dữ liệu đã được tải vào appState.pastedThiDuaReportData trong loadDataFromStorage
                    processedCount = appState.pastedThiDuaReportData.length;
                } 
                // === END FIX ===
                else if (stateKey && processFunc) {
                    const processedData = processFunc(pastedText);
                    appState[stateKey] = processedData;
                    processedCount = processedData?.length || 0;
                } else if (uiId === 'status-luyke') {
                    // === FIX 2a.3 (Thêm) ===
                    // Xử lý ngay dữ liệu Lũy kế dán vào để appState.competitionData sẵn sàng
                    try {
                       services.parseCompetitionDataFromLuyKe(pastedText);
                       console.log("[loadPastedData] Parsed luyke paste data from cache.");
                    } catch(e) {
                       console.warn("Lỗi xử lý 'paste-luyke' từ cache khi tải trang:", e);
                    }
                    // === END FIX ===
                }


                const kho = localStorage.getItem('selectedWarehouse');
                const mappingInfo = Object.values(ALL_DATA_MAPPING).find(m => m.saveKey === saveKey);
                let metadata = null;
                if (kho && mappingInfo) {
                    metadata = this._getSavedMetadata(kho, mappingInfo.firestoreKey);
                    if (metadata) {
                         uiComponents.updatePasteStatus(uiId, '', 'success', metadata, processedCount);
                    } else {
                         // === FIX 2b.2 (Sửa) ===
                         let countMsg = processedCount > 0 ? `(${processedCount} NV)` : '';
                         if (uiId === 'status-luyke') countMsg = ''; // Lũy kế không đếm
                         uiComponents.updatePasteStatus(uiId, `✓ Đã tải ${countMsg} (chưa đồng bộ)`, 'success', null, processedCount);
                    }
                } else if (pastedText) {
                     // === FIX 2b.2 (Sửa) ===
                     let countMsg = processedCount > 0 ? `(${processedCount} NV)` : '';
                     if (uiId === 'status-luyke') countMsg = '';
                     uiComponents.updatePasteStatus(uiId, `✓ Đã tải ${countMsg} (chưa chọn kho)`, 'success', null, processedCount);
                }
            }
        };

        loadPasted('saved_thuongerp_thangtruoc', 'thuongERPDataThangTruoc', 'status-thuongerp-thangtruoc', services.processThuongERP);
        loadPasted('daily_paste_luyke', null, 'status-luyke', null);
        loadPasted('daily_paste_thiduanv', 'pastedThiDuaReportData', 'status-thiduanv', null); // *** MODIFIED (v4.40) ***
        loadPasted('daily_paste_thuongerp', 'thuongERPData', 'status-thuongerp', services.processThuongERP);

        // === FIX 2a.2 (Thêm) - Xử lý tải lại raw text cho Thi đua NV ===
        const rawThiDuaPaste = localStorage.getItem(RAW_PASTE_THIDUANV_KEY);
        // === START: DEBUG (v4.43) ===
        if (rawThiDuaPaste) {
            console.log(`%c[DEBUG loadPastedDataFromStorage]   > Tìm thấy dữ liệu THÔ cho ${RAW_PASTE_THIDUANV_KEY}. (Độ dài: ${rawThiDuaPaste.length})`, "color: green;");
        } else {
            console.log(`%c[DEBUG loadPastedDataFromStorage]   > Không tìm thấy dữ liệu cho ${RAW_PASTE_THIDUANV_KEY} trong localStorage.`, "color: red;");
        }
        // === END: DEBUG ===
        if (rawThiDuaPaste) {
            const el = document.getElementById('paste-thiduanv');
            if (el) el.value = rawThiDuaPaste;
        }
        // === END FIX ===
    },


    async handleFileInputChange(e) {
        // ... (Giữ nguyên như phiên bản bạn cung cấp - đã có log chi tiết)
        const fileInput = e.target;
        const file = fileInput.files[0];
        const fileType = fileInput.id.replace('file-', '');

        const mappingInfo = Object.values(ALL_DATA_MAPPING).find(m => m.uiId === fileType);

        if (!file) return;

        if (!mappingInfo) {
            if (fileType === 'danhsachnv') {
                return this.handleDsnvUpload(e, file);
            }
            console.error(`[handleFileInputChange] No mapping info found for fileType: ${fileType}`);
            return;
        }

        const { stateKey, saveKey, firestoreKey } = mappingInfo;
        const dataName = fileInput.dataset.name || fileType;
        uiComponents.updateFileStatus(fileType, file.name, 'Đang đọc & chuẩn hóa...', 'default');
        ui.showProgressBar(fileType);

        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const normalizeType = fileType.replace('-thangtruoc', '');
            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, normalizeType);
            ui.displayDebugInfo(fileType);

            if (!success) {
                 const errorMessage = `Lỗi file "${dataName}": Thiếu cột: ${missingColumns.join(', ')}.`;
                 uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Thiếu cột dữ liệu.`, 'error');
                 ui.showNotification(errorMessage, 'error');
                 if (document.getElementById('debug-tool-container')?.classList.contains('hidden')) {
                     document.getElementById('toggle-debug-btn')?.click();
                 }
                 ui.hideProgressBar(fileType);
                 return;
            }

            appState[stateKey] = normalizedData;
            ui.showNotification(`Tải thành công file "${dataName}"!`, 'success');

            if (saveKey) {
                console.log(`[handleFileInputChange] Saving normalized data (${normalizedData.length} rows) to cache: ${saveKey}`);
                await this.storage.setItem(saveKey, normalizedData);
                console.log(`%c[DEBUG POST-CACHE] Successfully saved ${fileType} to cache. Proceeding...`, "color: brown;");
            }

            // --- Section before sync check ---
            let warehouseToSync = null;
            let currentFirestoreKey = null;
            try {
                console.log("[DEBUG STEP 1] Getting warehouseToSync..."); // Log added
                warehouseToSync = appState.selectedWarehouse;
                console.log(`[DEBUG STEP 2] warehouseToSync = ${warehouseToSync}`); // Log added
        
                console.log("[DEBUG STEP 3] Getting firestoreKey..."); // Log added
                currentFirestoreKey = firestoreKey; // Use the firestoreKey from mappingInfo
                console.log(`[DEBUG STEP 4] firestoreKey = ${currentFirestoreKey}`); // Log added

                console.log(`%c[DEBUG PRE-SYNC CHECK] File Type: ${fileType}, Warehouse: ${warehouseToSync}, Firestore Key: ${currentFirestoreKey}`, "color: purple; font-weight: bold;");

                if (warehouseToSync && currentFirestoreKey) {
                     console.log(`%c[DEBUG SYNC BLOCK START] Entering cloud sync block for ${fileType} (Firestore Key: ${currentFirestoreKey})`, "color: magenta;");

                    uiComponents.updateFileStatus(fileType, file.name, `Đang chuẩn bị đồng bộ cloud...`, 'default');
                    let localDataVersions = this._localDataVersions;
                    const currentVersion = localDataVersions?.[warehouseToSync]?.[currentFirestoreKey]?.version || 0;
                    const newVersion = currentVersion + 1;
                    const uploadTimestamp = Date.now();

                    const fileExtension = file.name.substring(file.name.lastIndexOf('.'));
                    const storagePath = `uploads/${warehouseToSync}/${currentFirestoreKey}_v${newVersion}${fileExtension}`;

                    console.log(`%c[handleFileInputChange] Cloud Upload for ${currentFirestoreKey}:`, "color: magenta; font-weight: bold;");

                    const onProgress = (progress) => {
                         uiComponents.updateFileStatus(fileType, file.name, `Đang tải lên cloud... ${Math.round(progress)}%`, 'default');
                    };

                    try {
                        const downloadURL = await firebase.uploadFileToStorage(file, storagePath, onProgress);
                        uiComponents.updateFileStatus(fileType, file.name, `Upload xong, đang lưu thông tin...`, 'default');

                        const metadata = {
                             storagePath: storagePath,
                            downloadURL: downloadURL,
                            version: newVersion,
                            timestamp: uploadTimestamp,
                            rowCount: normalizedData.length,
                             fileName: file.name
                        };

                        await firebase.saveMetadataToFirestore(warehouseToSync, currentFirestoreKey, metadata);

                        const metadataKey = `${LOCAL_METADATA_PREFIX}${warehouseToSync}_${currentFirestoreKey}`;
                        const metadataToSaveLocally = { ...metadata, updatedAt: new Date() };
                        try {
                            localStorage.setItem(metadataKey, JSON.stringify(metadataToSaveLocally));
                            console.log(`[handleFileInputChange] Saved metadata for ${currentFirestoreKey} to localStorage ('${metadataKey}') immediately.`);
                        } catch(lsError) {
                              console.error(`[handleFileInputChange] Error saving metadata for ${currentFirestoreKey} to localStorage:`, lsError);
                        }

                        if (!localDataVersions[warehouseToSync]) localDataVersions[warehouseToSync] = {};
                        localDataVersions[warehouseToSync][currentFirestoreKey] = { version: newVersion, timestamp: uploadTimestamp };
                        localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(localDataVersions));
                        this._localDataVersions = localDataVersions;

                        console.log(`%c[handleFileInputChange] Successfully uploaded ${currentFirestoreKey} (v${newVersion}).`, "color: magenta;");

                         uiComponents.updateFileStatus(fileType, file.name, '', 'success', false, metadataToSaveLocally);

                     } catch (syncError) {
                        console.error(`%c[handleFileInputChange] Cloud sync failed for ${currentFirestoreKey}:`, "color: red;", syncError);
                        uiComponents.updateFileStatus(fileType, file.name, `Lỗi đồng bộ cloud: ${syncError.message}`, 'error');
                    }
                     console.log(`%c[DEBUG SYNC BLOCK END] Finished cloud sync block for ${fileType}`, "color: magenta;");
                } else {
                     console.log(`%c[DEBUG SYNC SKIP] Skipping cloud sync for ${fileType}. Warehouse selected: ${!!warehouseToSync}, Firestore key exists: ${!!currentFirestoreKey}`, "color: orange;");
                     if (currentFirestoreKey) {
                        uiComponents.updateFileStatus(fileType, file.name, `✓ Đã tải ${normalizedData.length} dòng (Chưa đồng bộ).`, 'success', false, null);
                     }
                }

            } catch(preSyncError) {
                 // ** ADDED v4.36: Catch errors before sync check **
                 console.error(`%c[DEBUG PRE-SYNC ERROR] Error before sync check for ${fileType}:`, "color: red; font-weight: bold;", preSyncError);
                 uiComponents.updateFileStatus(fileType, file.name, `Lỗi chuẩn bị đồng bộ: ${preSyncError.message}`, 'error');
                 // ** END ADDED **
            }

            console.log(`%c[DEBUG PRE-RENDER] About to call updateAndRenderCurrentTab for ${fileType}`, "color: blue;");
            this.updateAndRenderCurrentTab();

        } catch (error) {
            console.error(`Lỗi xử lý file ${dataName}:`, error);
            uiComponents.updateFileStatus(fileType, file.name, `Lỗi đọc file: ${error.message}`, 'error');
            ui.showNotification(`Lỗi khi xử lý file "${dataName}".`, 'error');
        } finally {
            ui.hideProgressBar(fileType);
            fileInput.value = '';
            console.log(`%c[DEBUG FUNCTION END] handleFileInputChange finished for ${fileType}`, "color: gray;");
        }
    },

    async handleDsnvUpload(e, file) {
        // ... (Giữ nguyên)
        const fileType = 'danhsachnv';
        const dataName = 'Danh sách nhân viên';
        const stateKey = 'danhSachNhanVien';
        const saveKey = 'saved_danhsachnv';

        uiComponents.updateFileStatus(fileType, file.name, 'Đang đọc & chuẩn hóa...', 'default');
        ui.showProgressBar(fileType);

        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, fileType);
            ui.displayDebugInfo(fileType);

            if (!success) {
                const errorMessage = `Lỗi file "${dataName}": Thiếu cột: ${missingColumns.join(', ')}.`;
                uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Thiếu cột dữ liệu.`, 'error');
                ui.showNotification(errorMessage, 'error');
                if (document.getElementById('debug-tool-container')?.classList.contains('hidden')) {
                     document.getElementById('toggle-debug-btn')?.click();
                }
                return;
            }

            appState[stateKey] = normalizedData;
            services.updateEmployeeMaps();
            ui.populateAllFilters();
            uiComponents.populateWarehouseSelector();

            try {
                localStorage.setItem(LOCAL_DSNV_FILENAME_KEY, file.name);
                console.log(`[handleDsnvUpload] Saved DSNV filename '${file.name}' to localStorage.`);
            } catch (lsError) {
                 console.error("[handleDsnvUpload] Error saving DSNV filename to localStorage:", lsError);
            }

            ui.showNotification(`Tải thành công file "${dataName}"!`, 'success');

            if (saveKey) {
                 console.log(`[handleDsnvUpload] Saving normalized data (${normalizedData.length} rows) to cache: ${saveKey}`);
                 await this.storage.setItem(saveKey, normalizedData);
            }

            uiComponents.updateFileStatus(fileType, file.name, `✓ Đã tải ${normalizedData.length} dòng.`, 'success', false, null);
            this.updateAndRenderCurrentTab();

        } catch (error) {
             console.error(`Lỗi xử lý file ${dataName}:`, error);
             uiComponents.updateFileStatus(fileType, file.name, `Lỗi đọc file: ${error.message}`, 'error');
             ui.showNotification(`Lỗi khi xử lý file "${dataName}".`, 'error');
        } finally {
            ui.hideProgressBar(fileType);
            e.target.value = '';
        }
    },


    handleFileRead(file) {
        // ... (Giữ nguyên)
        return new Promise((resolve, reject) => {
            if (!file) return reject(new Error("No file provided."));
            const reader = new FileReader();
             reader.onload = (event) => {
                 try {
                    const data = new Uint8Array(event.target.result);
                    const workbook = XLSX.read(data, { type: 'array', cellDates: true });
                    resolve(workbook);
                } catch (err) { reject(err); }
             };
            reader.onerror = (err) => reject(new Error("Could not read the file: " + err));
             reader.readAsArrayBuffer(file);
        });
    },

    updateAndRenderCurrentTab() {
        // ... (Giữ nguyên)
        uiComponents.renderCompetitionConfigUI();
        const activeTab = document.querySelector('.page-section:not(.hidden)');
        if (!activeTab) {
            return;
        }
        switch (activeTab.id) {
            case 'health-section': luykeTab.render(); break;
            case 'health-employee-section': sknvTab.render(); break;
            case 'realtime-section': uiRealtime.render(); break;
        }
        feather.replace();
    },

    switchTab(targetId) {
         // ... (Giữ nguyên)
        document.querySelectorAll('.page-section').forEach(section => section.classList.toggle('hidden', section.id !== targetId));
        document.querySelectorAll('.nav-link').forEach(link => {
             const isActive = link.getAttribute('href') === `#${targetId}`;
             link.classList.toggle('bg-blue-100', isActive);
            link.classList.toggle('text-blue-700', isActive);
        });
        if (targetId === 'home-section') ui.renderHomePage();
        else if (targetId === 'health-section') luykeTab.render();
        else if (targetId === 'health-employee-section') sknvTab.render();
        else if (targetId === 'realtime-section') uiRealtime.render();
        else if (targetId === 'declaration-section' && appState.isAdmin) ui.renderAdminPage();
        feather.replace();
    },

    async loadAndApplyBookmarkLink() {
        // ... (Giữ nguyên)
         try {
            const bookmarkUrl = await firebase.getBookmarkDownloadURL();
            const linkElement = document.getElementById('download-bookmark-link');
            if (linkElement) linkElement.href = bookmarkUrl;
        } catch (error) {
            console.error("Không thể tải link bookmark:", error);
            const linkElement = document.getElementById('download-bookmark-link');
            if (linkElement) linkElement.style.display = 'none';
        }
    },

    async _handlePastedDataSync(pastedText, kho, dataType, uiId, localStorageKey, stateKey = null, processFunc = null) {
        // ... (Giữ nguyên)
        
        // === START: DEBUG (v4.43) ===
        console.log(`%c[DEBUG _handlePastedDataSync] Bắt đầu đồng bộ cho: ${dataType}`, "color: darkcyan; font-weight: bold;");
        // === END: DEBUG ===

        // *** MODIFIED (v4.40): Chỉ lưu text thô nếu đó KHÔNG PHẢI là thi đua NV
        // Dữ liệu thi đua NV sẽ được lưu dưới dạng JSON đã xử lý ở hàm riêng
        if (dataType !== 'pastedThiduaNVBI') {
            // === START: DEBUG (v4.43) ===
            try {
                localStorage.setItem(localStorageKey, pastedText);
                console.log(`%c[DEBUG _handlePastedDataSync]   > Đã LƯU (setItem) text thô vào localStorage key: ${localStorageKey}`, "color: darkcyan;");
            } catch (e) {
                console.error(`%c[DEBUG _handlePastedDataSync]   > LỖI khi lưu text thô vào localStorage key: ${localStorageKey}`, "color: red;", e);
            }
            // === END: DEBUG ===
        }

        let processedData = null;
        let processedCount = 0;
        
        // *** MODIFIED (v4.40) ***
        if (dataType === 'pastedThiduaNVBI') {
            // Logic này chỉ chạy khi GỌI TỪ CLOUD (handleCloudDataUpdate)
            // Vì _handlePastedDataSync không còn được gọi trực tiếp bởi handleThiduaNVPaste
            const parsedData = services.parsePastedThiDuaTableData(pastedText);
            if(parsedData.success) {
                services.updateCompetitionNameMappings(parsedData.mainHeaders);
                processedData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
                appState[stateKey] = processedData;
                processedCount = processedData.length;
                localStorage.setItem(localStorageKey, JSON.stringify(processedData)); // Lưu JSON đã xử lý
            } else {
                throw new Error(parsedData.error || "Lỗi phân tích cú pháp dữ liệu thi đua từ cloud");
            }
        } 
        // *** END MODIFIED ***
        else if (stateKey && processFunc) {
            processedData = processFunc(pastedText);
            appState[stateKey] = processedData;
            processedCount = processedData?.length || 0;
        } else if (uiId === 'status-luyke') {
             // Cập nhật giá trị ô input nếu cần (hàm handleLuykePaste sẽ làm việc này)
        }

        if (!kho) {
            uiComponents.updatePasteStatus(uiId, '✓ Đã nhận (Chọn kho để đồng bộ)', 'success', null, processedCount);
            if (dataType !== 'pastedLuykeBI') this.updateAndRenderCurrentTab();
            return;
        }

        uiComponents.updatePasteStatus(uiId, 'Đang đồng bộ cloud...', 'default');

        try {
            const localDataVersions = this._localDataVersions;
            const currentVersion = localDataVersions?.[kho]?.[dataType]?.version || 0;
            const newVersion = currentVersion + 1;
            const uploadTimestamp = Date.now();
            const versionInfo = { version: newVersion, timestamp: uploadTimestamp };

            const metadata = {
                content: pastedText, // Luôn đồng bộ TEXT THÔ lên cloud
                version: versionInfo.version,
                timestamp: versionInfo.timestamp,
                updatedBy: appState.currentUser.email
             };

            await firebase.savePastedDataToFirestore(kho, dataType, metadata.content, versionInfo);

            if (!localDataVersions[kho]) localDataVersions[kho] = {};
            localDataVersions[kho][dataType] = versionInfo;
            localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(localDataVersions));

            const metadataKey = `${LOCAL_METADATA_PREFIX}${kho}_${dataType}`;
            const metadataToSaveLocally = { ...metadata, updatedAt: new Date() };
            localStorage.setItem(metadataKey, JSON.stringify(metadataToSaveLocally));

             uiComponents.updatePasteStatus(uiId, '', 'success', metadataToSaveLocally, processedCount);

        } catch (error) {
            console.error(`[${dataType} Paste] Cloud sync failed:`, error);
            uiComponents.updatePasteStatus(uiId, `Lỗi đồng bộ cloud: ${error.message}`, 'error');
        }

        if (dataType !== 'pastedLuykeBI') {
             this.updateAndRenderCurrentTab();
        }
    },


    async handleLuykePaste() {
        // ... (Giữ nguyên)
        const pastedText = document.getElementById('paste-luyke')?.value || '';
        const kho = appState.selectedWarehouse;
        const mappingInfo = ALL_DATA_MAPPING['pastedLuykeBI'];

        // === START: DEBUG (v4.43) ===
        try {
            localStorage.setItem(mappingInfo.saveKey, pastedText);
            console.log(`%c[DEBUG handleLuykePaste] Đã LƯU (setItem) vào localStorage key: ${mappingInfo.saveKey} (Độ dài: ${pastedText.length})`, "color: green;");
        } catch (e) {
            console.error(`%c[DEBUG handleLuykePaste] LỖI khi lưu vào localStorage key: ${mappingInfo.saveKey}`, "color: red;", e);
        }
        // === END: DEBUG ===
        
        uiComponents.updatePasteStatus(mappingInfo.uiId, '✓ Đã nhận dữ liệu.', 'success');

        if (kho) {
             await this._handlePastedDataSync(
                 pastedText,
                 kho,
                 mappingInfo.firestoreKey,
                 mappingInfo.uiId,
                 mappingInfo.saveKey
             );
        }
         this.updateAndRenderCurrentTab();
    },

    // *** START: HÀM ĐƯỢC VIẾT LẠI (v4.40) ***
    async handleThiduaNVPaste() {
        const pastedText = document.getElementById('paste-thiduanv')?.value || '';
        const kho = appState.selectedWarehouse;
        const mappingInfo = ALL_DATA_MAPPING['pastedThiduaNVBI'];
        if (!mappingInfo) return;

        const { stateKey, saveKey, firestoreKey, uiId } = mappingInfo;

        // === FIX 2a.1 (Thêm) ===
        // Lưu văn bản thô để tải lại khi F5
        try {
            localStorage.setItem(RAW_PASTE_THIDUANV_KEY, pastedText);
            // === START: DEBUG (v4.43) ===
            console.log(`%c[DEBUG handleThiduaNVPaste] Đã LƯU (setItem) text thô vào localStorage key: ${RAW_PASTE_THIDUANV_KEY} (Độ dài: ${pastedText.length})`, "color: green;");
            // === END: DEBUG ===
        } catch (e) {
            console.warn("Không thể lưu raw_paste_thiduanv vào localStorage:", e);
        }
        // === END FIX ===

        try {
            // 1. Phân tích cú pháp văn bản thô (Theo thuật toán của bạn)
            const parsedData = services.parsePastedThiDuaTableData(pastedText);
            if (!parsedData.success) {
                throw new Error(parsedData.error || "Lỗi phân tích cú pháp dữ liệu.");
            }

            // 2. Cập nhật Bảng Ánh Xạ Tên
            services.updateCompetitionNameMappings(parsedData.mainHeaders);

            // 3. Chuẩn hóa dữ liệu (Tra cứu DSNV, áp dụng tên rút gọn)
            // Chúng ta dùng appState.competitionData (từ Lũy kế) để lấy mục tiêu
            const processedData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
            
            // 4. Lưu kết quả ĐÃ XỬ LÝ vào appState và localStorage
            appState[stateKey] = processedData;
            localStorage.setItem(saveKey, JSON.stringify(processedData)); // Lưu mảng JSON đã xử lý
            
            const processedCount = processedData.length;
            
            // 5. Đồng bộ TEXT THÔ lên Cloud (sử dụng logic _handlePastedDataSync)
            await this._handlePastedDataSync(
                pastedText, // Gửi text thô lên cloud
                kho,
                firestoreKey,
                uiId,
                saveKey, // saveKey này bây giờ lưu JSON, nhưng _handlePastedDataSync không dùng nó để ghi
                stateKey, // stateKey này đã được cập nhật
                null // Không cần processFunc ở đây nữa
            );

            // 6. Cập nhật giao diện
            this.updateAndRenderCurrentTab();
            // Cập nhật Tab Khai báo nếu Admin đang xem
            if (appState.isAdmin && document.getElementById('declaration-section')?.classList.contains('hidden') === false) {
                ui.renderAdminPage();
            }

        } catch (error) {
            console.error("Lỗi khi xử lý dữ liệu dán Thi đua NV:", error);
            uiComponents.updatePasteStatus(uiId, `Lỗi: ${error.message}`, 'error');
            // Hiển thị debug nếu có
            const debugContainer = document.getElementById('debug-tool-container');
            if (debugContainer?.classList.contains('hidden')) {
                document.getElementById('toggle-debug-btn')?.click();
            }
        }
    },
    // *** END: HÀM ĐƯỢC VIẾT LẠI (v4.40) ***

    async handleErpPaste() {
        // ... (Giữ nguyên)
        const pastedText = document.getElementById('paste-thuongerp')?.value || '';
        const kho = appState.selectedWarehouse;
        const mappingInfo = ALL_DATA_MAPPING['pastedThuongERP'];
        
        // === START: DEBUG (v4.43) ===
        try {
            localStorage.setItem(mappingInfo.saveKey, pastedText);
            console.log(`%c[DEBUG handleErpPaste] Đã LƯU (setItem) vào localStorage key: ${mappingInfo.saveKey} (Độ dài: ${pastedText.length})`, "color: green;");
        } catch (e) {
            console.error(`%c[DEBUG handleErpPaste] LỖI khi lưu vào localStorage key: ${mappingInfo.saveKey}`, "color: red;", e);
        }
        // === END: DEBUG ===

        await this._handlePastedDataSync(
             pastedText,
            kho,
            mappingInfo.firestoreKey,
            mappingInfo.uiId,
            mappingInfo.saveKey,
            mappingInfo.stateKey,
            mappingInfo.processFunc
        );
    },

    async handleErpThangTruocPaste(e) {
        // ... (Giữ nguyên)
         const pastedText = e.target.value;
         const kho = appState.selectedWarehouse;
         const mappingInfo = ALL_DATA_MAPPING['pastedThuongERPThangTruoc'];
         
         // === START: DEBUG (v4.43) ===
         try {
            localStorage.setItem(mappingInfo.saveKey, pastedText);
            console.log(`%c[DEBUG handleErpThangTruocPaste] Đã LƯU (setItem) vào localStorage key: ${mappingInfo.saveKey} (Độ dài: ${pastedText.length})`, "color: green;");
        } catch (lsError) {
            console.error(`%c[DEBUG handleErpThangTruocPaste] LỖI khi lưu vào localStorage key: ${mappingInfo.saveKey}`, "color: red;", lsError);
        }
        // === END: DEBUG ===

         await this._handlePastedDataSync(
             pastedText,
             kho,
            mappingInfo.firestoreKey,
            mappingInfo.uiId,
            mappingInfo.saveKey,
            mappingInfo.stateKey,
            mappingInfo.processFunc
        );
    },

    async handleRealtimeFileInput(e) {
        // ... (Giữ nguyên)
        const file = e.target.files[0];
        if (!file) return;
        ui.showNotification('Đang xử lý file realtime...', 'success');
        appState.realtimeYCXData = [];
        e.target.value = '';
        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, 'ycx');
            ui.displayDebugInfo('ycx-realtime');
            if (success) {
                appState.realtimeYCXData = normalizedData;
                uiRealtime.populateRealtimeBrandCategoryFilter();
                ui.showNotification(`Tải thành công ${normalizedData.length} dòng realtime!`, 'success');
                this.updateAndRenderCurrentTab();
            } else {
                 ui.showNotification(`File realtime lỗi: Thiếu cột ${missingColumns.join(', ')}.`, 'error');
                 const debugContainer = document.getElementById('debug-tool-container');
                 if (debugContainer?.classList.contains('hidden')) {
                     document.getElementById('toggle-debug-btn')?.click();
                 }
            }
        } catch (err) { ui.showNotification(`Có lỗi khi đọc file: ${err.message}`, 'error'); console.error(err); }
    },

    async handleCategoryFile(e) {
        // ... (Giữ nguyên)
        const fileInput = e.target;
        const file = fileInput.files[0];
        if (!file) return;
        uiComponents.updateFileStatus('category-structure', file.name, 'Đang xử lý...', 'default');
        ui.showProgressBar('category-structure');
        try {
            const workbook = await this.handleFileRead(file);
            const categorySheet = workbook.Sheets[workbook.SheetNames[0]];
            const categoryRawData = XLSX.utils.sheet_to_json(categorySheet);
            const categoryResult = services.normalizeCategoryStructureData(categoryRawData);
            let brandResult = { success: true, normalizedData: [] };
            const brandSheetName = workbook.SheetNames.find(name => name.toLowerCase().trim() === 'hãng');
            if (brandSheetName) {
                const brandSheet = workbook.Sheets[brandSheetName];
                const brandRawData = XLSX.utils.sheet_to_json(brandSheet);
                brandResult = services.normalizeBrandData(brandRawData);
            }
            if(categoryResult.success) {
                appState.categoryStructure = categoryResult.normalizedData;
                appState.brandList = brandResult.normalizedData;
                await firebase.saveCategoryDataToFirestore({ categories: categoryResult.normalizedData, brands: brandResult.normalizedData });
                uiComponents.updateFileStatus('category-structure', file.name, `✓ Đã xử lý và đồng bộ ${categoryResult.normalizedData.length} nhóm & ${brandResult.normalizedData.length} hãng.`, 'success');
            } else {
                 ui.showNotification(`Lỗi xử lý file khai báo: ${categoryResult.error}`, 'error');
            }
        } catch (error) {
            uiComponents.updateFileStatus('category-structure', file.name, `Lỗi: ${error.message}`, 'error');
        } finally {
            ui.hideProgressBar('category-structure');
            fileInput.value = '';
        }
    },

    async handleThiDuaVungFileInput(e) {
        // ... (Giữ nguyên)
        const fileInput = e.target;
        const file = fileInput.files[0];
        if (!file) return;
        uiComponents.updateFileStatus('thidua-vung', file.name, 'Đang xử lý...', 'default');
        try {
            const workbook = await this.handleFileRead(file);
            const { chiTietData, tongData } = services.processThiDuaVungFile(workbook);
            if (!tongData || tongData.length === 0) throw new Error('Không tìm thấy dữ liệu hợp lệ trong sheet "TONG".');
            appState.thiDuaVungChiTiet = chiTietData;
            appState.thiDuaVungTong = tongData;
            const supermarketKey = Object.keys(tongData[0]).find(k => k.trim().toLowerCase().includes('siêu thị'));
            const supermarketNames = [...new Set(tongData.map(row => row[supermarketKey]).filter(Boolean))].sort();
            const choicesInstance = appState.choices.thiDuaVung_sieuThi;
            if (choicesInstance) {
                choicesInstance.clearStore();
                choicesInstance.setChoices(supermarketNames.map(name => ({ value: name, label: name })), 'value', 'label', true);
            }
            uiComponents.updateFileStatus('thidua-vung', file.name, `✓ Đã xử lý ${supermarketNames.length} siêu thị.`, 'success');
        } catch (error) {
            uiComponents.updateFileStatus('thidua-vung', file.name, `Lỗi: ${error.message}`, 'error');
        }
    },

    handleThiDuaVungFilterChange() {
        // ... (Giữ nguyên)
        const choicesInstance = appState.choices.thiDuaVung_sieuThi;
        if (!choicesInstance) return;
        const selectedValue = choicesInstance.getValue(true);
        if (selectedValue) {
            const reportData = services.generateThiDuaVungReport(selectedValue);
            ui.renderThiDuaVungInfographic(reportData);
        } else {
            const container = document.getElementById('thidua-vung-infographic-container');
            if(container) container.innerHTML = `<div class="placeholder-message">Vui lòng chọn một siêu thị để xem báo cáo.</div>`;
        }
    },

    handleDthangRealtimeViewChange(e) {
        // ... (Giğ nguyên)
        const button = e.target.closest('.view-switcher__btn');
        if (button) {
            document.querySelectorAll('#dthang-realtime-view-selector .view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            uiRealtime.render();
        }
    },

    handleLuykeThiDuaViewChange(e) {
        // ... (Giữ nguyên)
        const button = e.target.closest('.view-switcher__btn');
        if (button) {
            document.querySelectorAll('#luyke-thidua-view-selector .view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            luykeTab.render();
        }
    },

    handleThiDuaViewChange(e) {
        // ... (Giữ nguyên)
         const button = e.target.closest('.view-switcher__btn');
        if (button) {
             document.querySelectorAll('#thidua-view-selector .view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            const view = button.dataset.view;
            const thiduaEmployeeSelectorEl = document.getElementById('thidua-employee-selector-container');
            if(thiduaEmployeeSelectorEl) thiduaEmployeeSelectorEl.classList.toggle('hidden', view !== 'employee');
            ui.displayCompetitionReport(view);
        }
    },

    async handleCompetitionDebugFile(e) {
        // ... (Giữ nguyên)
        const file = e.target.files[0];
        if (!file) return;
        ui.showNotification('Đang phân tích file gỡ lỗi...', 'success');
        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const debugResults = services.debugCompetitionFiltering(rawData);
            ui.renderCompetitionDebugReport(debugResults);
        } catch (err) {
            ui.showNotification(`Lỗi khi đọc file gỡ lỗi: ${err.message}`, 'error');
        }
    },

    _handleCompetitionFormShow(show = true, isEdit = false) {
        // ... (Giữ nguyên)
        const form = document.getElementById('competition-form');
        const addBtn = document.getElementById('add-competition-btn');
        if (!form || !addBtn) return;
        if (show) {
            uiComponents.populateCompetitionFilters();
            uiComponents.populateCompetitionBrandFilter();
        }
        form.classList.toggle('hidden', !show);
        addBtn.classList.toggle('hidden', show);
        if (show && !isEdit) {
             form.reset();
            document.getElementById('competition-id').value = '';
            appState.choices['competition_group']?.removeActiveItems();
            appState.choices['competition_brand']?.removeActiveItems();
            const priceSegmentEl = document.getElementById('price-segment');
            if(priceSegmentEl) priceSegmentEl.classList.add('hidden');
        }
    },

    _handleCompetitionFormEdit(index) {
        // ... (Giữ nguyên)
        const config = appState.competitionConfigs[index];
        if (!config) return;
        this._handleCompetitionFormShow(true, true);
        document.getElementById('competition-id').value = index;
        document.getElementById('competition-name').value = config.name;
        const brandChoices = appState.choices['competition_brand'];
        if(brandChoices) {
            brandChoices.removeActiveItems();
            brandChoices.setChoiceByValue(config.brands || []);
        }
        const compTypeEl = document.getElementById('competition-type');
        if(compTypeEl) compTypeEl.value = config.type;
        const compExcludeEl = document.getElementById('competition-exclude-apple');
        if(compExcludeEl) compExcludeEl.checked = config.excludeApple;
        const priceSegment = document.getElementById('price-segment');
        if(priceSegment) priceSegment.classList.toggle('hidden', config.type !== 'soluong');
        const minPriceEl = document.getElementById('competition-min-price');
        if(minPriceEl) minPriceEl.value = config.minPrice ? config.minPrice / 1000000 : '';
        const maxPriceEl = document.getElementById('competition-max-price');
        if(maxPriceEl) maxPriceEl.value = config.maxPrice ? config.maxPrice / 1000000 : '';
        const groupChoices = appState.choices['competition_group'];
        if (groupChoices) {
            groupChoices.removeActiveItems();
            groupChoices.setChoiceByValue(config.groups);
        }
    },

    _handleCompetitionDelete(index) {
        // ... (GiGiữ nguyên)
        appState.competitionConfigs.splice(index, 1);
        this._saveCompetitionConfigs();
        this.updateAndRenderCurrentTab();
        ui.showNotification('Đã xóa chương trình thi đua.', 'success');
    },

    _handleCompetitionFormSubmit(e) {
        // ... (Giữ nguyên)
        e.preventDefault();
        const id = document.getElementById('competition-id').value;
        const name = document.getElementById('competition-name').value.trim();
        if (!name) { ui.showNotification('Tên chương trình không được để trống.', 'error'); return; }
        const groupChoices = appState.choices['competition_group'];
        const groups = groupChoices ? groupChoices.getValue(true) : [];
        const brandChoices = appState.choices['competition_brand'];
        const brands = brandChoices ? brandChoices.getValue(true) : [];
        if (brands.length === 0) { ui.showNotification('Lỗi: Vui lòng chọn ít nhất một hãng sản xuất.', 'error'); return; }
        const compTypeEl = document.getElementById('competition-type');
        const minPriceEl = document.getElementById('competition-min-price');
        const maxPriceEl = document.getElementById('competition-max-price');
        const excludeAppleEl = document.getElementById('competition-exclude-apple');
        const newConfig = {
            id: id ? appState.competitionConfigs[parseInt(id, 10)].id : `comp_${new Date().getTime()}`,
            name: name,
            brands: brands,
            groups: groups,
            type: compTypeEl ? compTypeEl.value : 'doanhthu',
            minPrice: (parseFloat(minPriceEl?.value) || 0) * 1000000,
            maxPrice: (parseFloat(maxPriceEl?.value) || 0) * 1000000,
            excludeApple: excludeAppleEl ? excludeAppleEl.checked : false,
        };
        if (id !== '') { appState.competitionConfigs[parseInt(id, 10)] = newConfig; }
        else { appState.competitionConfigs.push(newConfig); }
        this._saveCompetitionConfigs();
        this._handleCompetitionFormShow(false);
        this.updateAndRenderCurrentTab();
        ui.showNotification('Đã lưu chương trình thi đua thành công!', 'success');
    },


     _saveCompetitionConfigs() {
        // ... (Giữ nguyên)
        localStorage.setItem('competitionConfigs', JSON.stringify(appState.competitionConfigs));
    },

    async handleTemplateDownload() {
        // ... (Giữ nguyên)
        ui.showNotification('Đang chuẩn bị file mẫu...', 'success');
        try {
             const url = await firebase.getTemplateDownloadURL();
             const link = document.createElement('a');
             link.href = url;
             link.download = 'Danh_Sach_Nhan_Vien_Mau.xlsx';
             document.body.appendChild(link);
             link.click();
             document.body.removeChild(link);
        } catch (error) {
            console.error("Lỗi khi tải file mẫu:", error);
            ui.showNotification('Không thể tải file mẫu. Vui lòng thử lại.', 'error');
        }
    },

    handleAdminLogin() {
        // ... (Giữ nguyên)
        const passInputEl = document.getElementById('admin-password-input');
        const errorMsgEl = document.getElementById('admin-error-msg');
        if (passInputEl?.value === config.ADMIN_PASSWORD) {
            appState.isAdmin = true;
            ui.renderFeedbackSection();
            ui.renderAdminHelpEditors();
            this.switchTab('declaration-section');
            ui.toggleModal('admin-modal', false);
            passInputEl.value = '';
            if(errorMsgEl) errorMsgEl.classList.add('hidden');
        } else {
            if(errorMsgEl) errorMsgEl.classList.remove('hidden');
        }
    },

    handleContrastChange(e) {
        // ... (Giữ nguyên)
          const level = e.target.value;
         localStorage.setItem('contrastLevel', level);
         document.documentElement.dataset.contrast = level;
    },

    handleHighlightColorChange(prefix) {
        // ... (Giữ nguyên)
        const activeType = appState.highlightSettings[prefix]?.type;
        if (activeType) {
             const choicesInstance = appState.choices[`${prefix}_highlight_${activeType}`];
             if(choicesInstance) {
                const values = choicesInstance.getValue(true);
                const colorEl = document.getElementById(`${prefix}-highlight-color`);
                const color = colorEl ? colorEl.value : '#ffff00';
                appState.highlightSettings[prefix] = { type: activeType, values, color };
                localStorage.setItem('highlightSettings', JSON.stringify(appState.highlightSettings));
                highlightService.applyHighlights(prefix);
             }
        }
    },

     handleClearHighlight(prefix) {
        // ... (Giữ nguyên)
        appState.highlightSettings[prefix] = {};
        localStorage.setItem('highlightSettings', JSON.stringify(appState.highlightSettings));
        ['nhanhang', 'nhomhang', 'employee'].forEach(type => {
            appState.choices[`${prefix}_highlight_${type}`]?.removeActiveItemsByValue(appState.choices[`${prefix}_highlight_${type}`]?.getValue(true) || []);
        });
        highlightService.applyHighlights(prefix);
    },

    async saveDeclarations() {
        // ... (Giữ nguyên)
        const ycxEl = document.getElementById('declaration-ycx');
        const ycxGopEl = document.getElementById('declaration-ycx-gop');
        const heSoEl = document.getElementById('declaration-heso');
        const declarationsToSave = {
            ycx: ycxEl ? ycxEl.value : '',
            ycxGop: ycxGopEl ? ycxGopEl.value : '',
            heSo: heSoEl ? heSoEl.value : ''
        };
        await firebase.saveDeclarationsToFirestore(declarationsToSave);
        appState.declarations.hinhThucXuat = declarationsToSave.ycx;
        appState.declarations.hinhThucXuatGop = declarationsToSave.ycxGop;
        appState.declarations.heSoQuyDoi = declarationsToSave.heSo;
        this.updateAndRenderCurrentTab();
    },

    saveHelpContent() {
        // ... (Giữ nguyên)
        const dataEl = document.getElementById('edit-help-data');
        const luykeEl = document.getElementById('edit-help-luyke');
        const sknvEl = document.getElementById('edit-help-sknv');
        const realtimeEl = document.getElementById('edit-help-realtime');
        const contents = {
             data: dataEl ? dataEl.value : '',
             luyke: luykeEl ? luykeEl.value : '',
             sknv: sknvEl ? sknvEl.value : '',
             realtime: realtimeEl ? realtimeEl.value : ''
        };
        firebase.saveHelpContent(contents);
    },

    async handleSubmitFeedback() {
        // ... (Giữ nguyên)
        const textarea = document.getElementById('feedback-textarea');
        if(textarea){
            const success = await firebase.submitFeedback(textarea.value.trim());
            if (success) textarea.value = '';
        }
    },

    async handleFeedbackReplyActions(e, feedbackItem) {
        // ... (Giữ nguyên)
        const docId = feedbackItem.dataset.id;
        const replyForm = feedbackItem.querySelector('.reply-form-container');
        if (!replyForm) return;
        if (e.target.classList.contains('reply-btn')) { replyForm.classList.remove('hidden'); }
         if (e.target.classList.contains('cancel-reply-btn')) { replyForm.classList.add('hidden'); }
        if (e.target.classList.contains('submit-reply-btn')) {
             const textarea = replyForm.querySelector('textarea');
             if(textarea){
                const success = await firebase.submitReply(docId, textarea.value.trim());
                if (success) { textarea.value = ''; replyForm.classList.add('hidden'); }
             }
        }
    },

    _getFilteredReportData(sectionId) {
        // ... (Giữ nguyên)
        const masterData = appState.masterReportData[sectionId] || [];
        if (masterData.length === 0) return [];
        const warehouseEl = document.getElementById(`${sectionId}-filter-warehouse`);
        const deptEl = document.getElementById(`${sectionId}-filter-department`);
        const selectedWarehouse = warehouseEl ? warehouseEl.value : '';
        const selectedDept = deptEl ? deptEl.value : '';
        const selectedNames = appState.choices[`${sectionId}_employee`] ? appState.choices[`${sectionId}_employee`].getValue(true) : [];
        let filteredReport = masterData;
        if (selectedWarehouse) filteredReport = filteredReport.filter(nv => nv.maKho == selectedWarehouse);
        if (selectedDept) filteredReport = filteredReport.filter(nv => nv.boPhan === selectedDept);
        if (selectedNames && selectedNames.length > 0) filteredReport = filteredReport.filter(nv => selectedNames.includes(String(nv.maNV)));
        return filteredReport;
    },

    async prepareAndShowComposer(sectionId) {
        // ... (Giữ nguyên)
        const modal = document.getElementById('composer-modal');
        if (!modal) return;
        modal.dataset.sectionId = sectionId;
        const deptFilter = document.getElementById('composer-dept-filter');
        if (deptFilter) {
            const uniqueDepartments = [...new Set(appState.danhSachNhanVien.map(nv => nv.boPhan).filter(Boolean))].sort();
            deptFilter.innerHTML = '<option value="ALL">Toàn siêu thị</option>' + uniqueDepartments.map(dept => `<option value="${dept}">${dept}</option>`).join('');
        }
        const navIdMap = { luyke: 'luyke-subtabs-nav', sknv: 'employee-subtabs-nav', realtime: 'realtime-subtabs-nav' };
        const mainViewNav = document.getElementById(navIdMap[sectionId]);
        const contextTabsContainer = document.getElementById('composer-context-tabs');
        const contextContentContainer = document.getElementById('composer-context-content');
        if(contextTabsContainer) contextTabsContainer.innerHTML = '';
        if(contextContentContainer) contextContentContainer.innerHTML = '';
        if (mainViewNav && contextTabsContainer && contextContentContainer) {
             const subTabButtons = mainViewNav.querySelectorAll('.sub-tab-btn');
            subTabButtons.forEach(btn => {
                 const subTabId = btn.dataset.target;
                const isActive = btn.classList.contains('active');
                const newTabBtn = document.createElement('button');
                newTabBtn.className = `composer__tab-btn ${isActive ? 'active' : ''}`;
                newTabBtn.dataset.target = `context-pane-${subTabId}`;
                newTabBtn.textContent = btn.textContent.trim();
                 newTabBtn.addEventListener('click', () => {
                    contextTabsContainer.querySelectorAll('.composer__tab-btn').forEach(t => t.classList.remove('active'));
                    contextContentContainer.querySelectorAll('.composer__context-pane').forEach(c => c.classList.add('hidden'));
                    newTabBtn.classList.add('active');
                    const targetPane = document.getElementById(`context-pane-${subTabId}`);
                    if(targetPane) targetPane.classList.remove('hidden');
                });
                 contextTabsContainer.appendChild(newTabBtn);
                 const newContentPane = document.createElement('div');
                 newContentPane.id = `context-pane-${subTabId}`;
                 newContentPane.className = `composer__context-pane ${!isActive ? 'hidden' : ''}`;
                 const textarea = document.createElement('textarea');
                 textarea.className = 'composer__textarea';
                 textarea.rows = 15;
                 textarea.placeholder = `Soạn thảo nhận xét cho tab ${btn.textContent.trim()}...`;
                 if (!appState.composerTemplates[sectionId]) appState.composerTemplates[sectionId] = {};
                 textarea.value = appState.composerTemplates[sectionId]?.[subTabId] || '';
                 newContentPane.appendChild(textarea);
                 contextContentContainer.appendChild(newContentPane);
            });
            contextTabsContainer.classList.toggle('hidden', contextTabsContainer.children.length === 0);
        }
        const filteredReportData = this._getFilteredReportData(sectionId);
        const supermarketReport = services.aggregateReport(filteredReportData);
        ui.populateComposerDetailTags(supermarketReport);
        ui.showComposerModal(sectionId);
    },

    handleComposerActions(e, modal) {
        // ... (Giữ nguyên)
        const sectionId = modal.dataset.sectionId;
        const activeContextPane = modal.querySelector('.composer__context-pane:not(.hidden)');
        const activeTextarea = activeContextPane ? activeContextPane.querySelector('textarea') : null;
        if (e.target.matches('.composer__tab-btn:not([data-context-tab])')) {
            const nav = e.target.closest('.composer__nav');
            const content = nav?.nextElementSibling;
            if (nav && content) {
                 nav.querySelectorAll('.active').forEach(el => el.classList.remove('active'));
                 content.querySelectorAll('.active').forEach(el => el.classList.remove('active'));
                 e.target.classList.add('active');
                 const targetId = e.target.dataset.tab;
                 const targetContent = content.querySelector(`#${targetId}`);
                 if (targetContent) targetContent.classList.add('active');
            }
            return;
        }
        if (e.target.matches('.composer__icon-btn, .composer__tag-btn')) {
             if (!activeTextarea) { ui.showNotification("Vui lòng chọn một tab nội dung để chèn thẻ.", "error"); return; }
             let tagToInsert = e.target.dataset.tag;
            if (e.target.dataset.tagTemplate) {
                const deptFilterEl = document.getElementById('composer-dept-filter');
                const dept = deptFilterEl ? deptFilterEl.value : 'ALL';
                tagToInsert = e.target.dataset.tagTemplate.replace('{dept}', dept);
            }
            ui.insertComposerTag(activeTextarea, tagToInsert || e.target.textContent);
            return;
        }
         if (e.target.id === 'save-composer-template-btn') {
            if (!activeTextarea) return;
            const activeContextTab = modal.querySelector('#composer-context-tabs .composer__tab-btn.active');
            const subTabId = activeContextTab?.dataset.target.replace('context-pane-', '');
            if (subTabId) {
                 if (!appState.composerTemplates[sectionId]) appState.composerTemplates[sectionId] ={};
                appState.composerTemplates[sectionId][subTabId] = activeTextarea.value;
                localStorage.setItem('composerTemplates', JSON.stringify(appState.composerTemplates));
                ui.showNotification(`Đã lưu mẫu cho tab con!`, 'success');
            } else { ui.showNotification(`Không tìm thấy tab con để lưu.`, 'error'); }
        }
        if (e.target.id === 'copy-composed-notification-btn') {
             if (!activeTextarea) { ui.showNotification("Lỗi: Không tìm thấy ô nội dung đang hoạt động.", "error"); return; }
             const template = activeTextarea.value;
             const filteredReportData = this._getFilteredReportData(sectionId);
             const supermarketReport = services.aggregateReport(filteredReportData);
             const warehouseEl = document.getElementById(`${sectionId}-filter-warehouse`);
             const selectedWarehouse = warehouseEl ? warehouseEl.value : null;
             const goals = sectionId === 'realtime' ? settingsService.getRealtimeGoalSettings(selectedWarehouse).goals : settingsService.getLuykeGoalSettings(selectedWarehouse).goals;
             const pasteLuykeEl = document.getElementById('paste-luyke');
             const competitionDataForComposer = services.parseCompetitionDataFromLuyKe(pasteLuykeEl?.value || '');
             const processedText = services.processComposerTemplate(template, supermarketReport, goals, filteredReportData, competitionDataForComposer, sectionId);
             ui.showPreviewAndCopy(processedText);
        }
    },

    async loadAndDisplayQrCode() {
        // ... (Giữ nguyên)
         try {
            const qrUrl = await firebase.getQrCodeDownloadURL();
            const imgEl = document.getElementById('header-qr-image');
            if (imgEl) imgEl.src = qrUrl;
        }
        catch (error) {
             console.error("Không thể tải mã QR:", error);
            const container = document.querySelector('.header-qr-container');
            if (container) container.style.display = 'none';
        }
    }
};

// Khởi chạy ứng dụng khi DOM đã sẵn sàng
app.init();
--- END FILE: ./main.js ---

--- START FILE: ./modules/capture.service.js ---
// Version 1.0 - Refactored from utils.js
// MODULE: CAPTURE SERVICE
// Chứa toàn bộ logic liên quan đến việc chụp ảnh màn hình các thành phần UI.

import { ui } from '../ui.js';
import { firebase } from '../firebase.js';

// --- HELPER for Screenshot CSS Injection ---
const _injectCaptureStyles = () => {
    const styleId = 'dynamic-capture-styles';
    document.getElementById(styleId)?.remove();

    const styles = `
        .capture-container { 
            padding: 24px; 
            background-color: #f3f4f6; 
            box-sizing: border-box; 
            width: fit-content; 
            position: absolute;
            left: -9999px;
            top: 0;
            z-index: -1;
        }
        .capture-layout-container { 
            display: flex; 
            flex-direction: column; 
            gap: 24px; 
        }
        .capture-title { 
            font-size: 28px; 
            font-weight: 700; 
            text-align: center; 
            color: #1f2937; 
            margin-bottom: 24px; 
            padding: 12px; 
            background-color: #ffffff; 
            border-radius: 0.75rem; 
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); 
        }
        /* --- VIRTUAL STAGES / PRESETS --- */
        .prepare-for-kpi-capture {
            display: grid !important;
            grid-template-columns: repeat(2, 1fr) !important;
            gap: 24px !important;
            width: 900px !important;
        }
        .preset-mobile-portrait {
            width: 750px !important;
        }
        .preset-landscape-table {
            width: fit-content !important;
        }
        .preset-landscape-table table {
            table-layout: fixed !important;
        }
        .preset-landscape-table th, 
        .preset-landscape-table td {
            width: 95px !important;
            word-wrap: break-word;
        }
        .preset-landscape-table th:first-child,
        .preset-landscape-table td:first-child {
            width: 180px !important;
        }
        .preset-large-font-report {
            width: 800px !important;
        }
        .preset-large-font-report table th {
            white-space: normal !important;
            vertical-align: middle;
        }
        .preset-large-font-report table td {
            font-size: 22px !important;
            vertical-align: middle;
        }
        .preset-infographic-wide {
            width: 1100px !important;
        }
    `;

    const styleElement = document.createElement('style');
    styleElement.id = styleId;
    styleElement.innerHTML = styles;
    document.head.appendChild(styleElement);
    return styleElement;
};

export const captureService = {
    async captureAndDownload(elementToCapture, title, presetClass = '') {
        const date = new Date();
        const timeString = date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
        const dateString = date.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });
        const finalTitle = `${title.replace(/_/g, ' ')} - ${timeString} ${dateString}`;
    
        const captureWrapper = document.createElement('div');
        captureWrapper.className = 'capture-container';
    
        const titleEl = document.createElement('h2');
        titleEl.className = 'capture-title';
        titleEl.textContent = finalTitle;
        captureWrapper.appendChild(titleEl);
        
        const contentClone = elementToCapture.cloneNode(true);
        if (presetClass) {
            contentClone.classList.add(presetClass);
        }
        captureWrapper.appendChild(contentClone);

        document.body.appendChild(captureWrapper);
    
        try {
            const canvas = await html2canvas(captureWrapper, {
                scale: 2,
                useCORS: true,
                backgroundColor: '#f3f4f6'
            });
    
            const link = document.createElement('a');
            link.download = `${title}_${dateString.replace(/\//g, '-')}.png`;
            link.href = canvas.toDataURL('image/png');
            link.click();
            ui.showNotification('Đã chụp và tải xuống hình ảnh!', 'success');
        } catch (err) {
            console.error('Lỗi chụp màn hình:', err);
            ui.showNotification(`Lỗi khi chụp ảnh: ${err.message}.`, 'error');
        } finally {
            if (document.body.contains(captureWrapper)) {
                document.body.removeChild(captureWrapper);
            }
        }
    },
    
    async captureDashboardInParts(contentContainer, baseTitle) {
        if (!contentContainer) {
            ui.showNotification('Không tìm thấy vùng nội dung để chụp.', 'error');
            return;
        }

        firebase.incrementCounter('actionsTaken');
        
        ui.showNotification(`Bắt đầu chụp báo cáo ${baseTitle}...`, 'success');
    
        const captureGroups = new Map();
        contentContainer.querySelectorAll('[data-capture-group]').forEach(el => {
            if (el.offsetParent !== null) {
                const group = el.dataset.captureGroup;
                if (!captureGroups.has(group)) {
                    captureGroups.set(group, []);
                }
                captureGroups.get(group).push(el);
            }
        });
        
        const styleElement = _injectCaptureStyles();
        try {
            if (captureGroups.size === 0) {
                if (contentContainer.offsetParent !== null) {
                    const preset = contentContainer.dataset.capturePreset;
                    const presetClass = preset ? `preset-${preset}` : '';
                    await this.captureAndDownload(contentContainer, baseTitle, presetClass);
                } else {
                     ui.showNotification('Không tìm thấy đối tượng hiển thị để chụp.', 'error');
                }
                return;
            }

            for (const [group, elements] of captureGroups.entries()) {
                const captureTitle = captureGroups.size > 1 ? `${baseTitle}_Nhom_${group}` : baseTitle;
                
                const targetElement = elements[0];
                const preset = targetElement.dataset.capturePreset;
                const isKpiGroup = group === 'kpi';
                
                let elementToCapture;
                let presetClass = '';

                if (isKpiGroup) {
                    presetClass = 'prepare-for-kpi-capture';
                } else if (preset) {
                    presetClass = `preset-${preset}`;
                }

                if (elements.length > 1 && !isKpiGroup) {
                    const tempContainer = document.createElement('div');
                    tempContainer.className = 'capture-layout-container';
                    elements.forEach(el => tempContainer.appendChild(el.cloneNode(true)));
                    elementToCapture = tempContainer;
                } else {
                    elementToCapture = targetElement;
                }
    
                await this.captureAndDownload(elementToCapture, captureTitle, presetClass);
                await new Promise(resolve => setTimeout(resolve, 150));
            }
        } finally {
            styleElement.remove();
        }

        ui.showNotification(`Đã hoàn tất chụp ảnh báo cáo ${baseTitle}!`, 'success');
    },
};
--- END FILE: ./modules/capture.service.js ---

--- START FILE: ./modules/file-upload.service.js ---
// Version 1.0 - Initial Upload Service
// MODULE: FILE UPLOAD SERVICE
// Chứa logic để tải file lên Firebase Storage và lắng nghe kết quả xử lý từ Firestore.

import { appState } from '../state.js';
import { ui } from '../ui.js';
import { ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";
import { doc, onSnapshot } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

export const fileUploadService = {
    /**
     * Tải file lên Firebase Storage, sau đó lắng nghe kết quả xử lý từ Firestore.
     * @param {File} file - Đối tượng file người dùng đã chọn.
     * @param {string} fileType - Loại file (ví dụ: 'ycx', 'danhsachnv').
     * @returns {Promise<Object>} - Promise sẽ resolve với dữ liệu đã được xử lý hoặc reject với lỗi.
     */
    uploadAndProcessFile(file, fileType) {
        return new Promise((resolve, reject) => {
            if (!appState.storage || !appState.db) {
                return reject(new Error("Firebase chưa được khởi tạo."));
            }

            // 1. Tạo một ID độc nhất cho file để theo dõi
            const uniqueFileId = `${fileType}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
            const fileName = `${uniqueFileId}${file.name.substring(file.name.lastIndexOf('.'))}`;
            const storagePath = `uploads/${fileName}`;
            const storageRef = ref(appState.storage, storagePath);

            // 2. Bắt đầu quá trình tải file lên Storage
            const uploadTask = uploadBytesResumable(storageRef, file);
            let unsubscribeSnapshot = null; // Biến để lưu hàm hủy listener

            // Tạo listener trong Firestore để chờ kết quả
            const resultDocRef = doc(appState.db, "file_results", uniqueFileId);
            unsubscribeSnapshot = onSnapshot(resultDocRef, (docSnap) => {
                if (docSnap.exists()) {
                    const result = docSnap.data();
                    // Hủy listener ngay khi nhận được kết quả để tránh rò rỉ bộ nhớ
                    if (unsubscribeSnapshot) unsubscribeSnapshot();
                    clearTimeout(timeout); // Hủy timeout

                    if (result.status === 'success') {
                        resolve(result.data); // Trả về dữ liệu đã xử lý
                    } else {
                        reject(new Error(result.message || 'Lỗi không xác định từ máy chủ.'));
                    }
                }
            });

            // Cập nhật giao diện với tiến trình tải lên
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    ui.updateFileStatus(fileType, file.name, `Đang tải lên... ${Math.round(progress)}%`);
                },
                (error) => { // Xử lý lỗi tải lên
                    if (unsubscribeSnapshot) unsubscribeSnapshot();
                    clearTimeout(timeout);
                    console.error("Lỗi khi tải file lên Storage:", error);
                    reject(new Error("Không thể tải file lên máy chủ."));
                },
                () => { // Tải lên thành công, chuyển sang chờ xử lý
                    ui.updateFileStatus(fileType, file.name, 'Tải lên hoàn tất, đang chờ máy chủ xử lý...');
                }
            );

            // 3. Đặt một khoảng thời gian chờ tối đa (ví dụ: 60 giây)
            const timeout = setTimeout(() => {
                if (unsubscribeSnapshot) unsubscribeSnapshot();
                reject(new Error("Máy chủ xử lý quá lâu, vui lòng thử lại."));
            }, 60000); // 60 giây
        });
    }
};
--- END FILE: ./modules/file-upload.service.js ---

--- START FILE: ./modules/highlight.service.js ---
// Version 1.1 - Fix incorrect import paths for modules
// MODULE: HIGHLIGHT SERVICE
// Chứa logic để quản lý và áp dụng tính năng tô màu (highlight) trên các bảng.

import { appState } from '../state.js';
import { utils } from '../utils.js';

export const highlightService = {
    populateHighlightFilters(prefix, ycxData, reportData) {
        if (!appState.choices[`${prefix}_highlight_nhanhang`]) return;
        const uniqueNganhHang = [...new Set(ycxData.map(r => utils.cleanCategoryName(r.nganhHang)).filter(Boolean))].sort();
        const uniqueNhomHang = [...new Set(ycxData.map(r => utils.cleanCategoryName(r.nhomHang)).filter(Boolean))].sort();
        const uniqueEmployees = [...new Set(reportData.map(r => r.hoTen).filter(Boolean))].sort();

        const createOptions = (arr) => arr.map(item => ({ value: item, label: item, selected: false }));
        
        appState.choices[`${prefix}_highlight_nhanhang`]?.setChoices(createOptions(uniqueNganhHang), 'value', 'label', true);
        appState.choices[`${prefix}_highlight_nhomhang`]?.setChoices(createOptions(uniqueNhomHang), 'value', 'label', true);
        appState.choices[`${prefix}_highlight_employee`]?.setChoices(createOptions(uniqueEmployees), 'value', 'label', true);
    },

    applyHighlights(prefix) {
        const settings = appState.highlightSettings[prefix] || {};
        const tableContainer = document.getElementById(`${prefix === 'luyke' ? 'health' : (prefix === 'sknv' ? 'health-employee' : 'realtime')}-section`);
        if (!tableContainer) return;
        
        tableContainer.querySelectorAll('tbody tr').forEach(row => {
             row.classList.remove('highlighted-row');
             row.style.backgroundColor = '';
        });

        if (settings.values && settings.values.length > 0) {
            tableContainer.querySelectorAll('tbody tr').forEach(row => {
                const cellText = row.cells[0] ? row.cells[0].textContent : '';
                if (settings.values.includes(cellText)) {
                    row.classList.add('highlighted-row');
                    row.style.backgroundColor = settings.color;
                }
            });
        }
    },
};
--- END FILE: ./modules/highlight.service.js ---

--- START FILE: ./modules/settings.service.js ---
// Version 2.0 - Revert loading logic to respect user-saved drag-drop order
// MODULE: SETTINGS SERVICE
// Chứa toàn bộ logic liên quan đến việc quản lý cài đặt (lưu/tải từ localStorage).

import { appState } from '../state.js';
import { ui } from '../ui.js';

// Hằng số chứa danh sách đầy đủ và thứ tự cột chính xác cho bảng Hiệu quả khai thác
const ALL_EFFICIENCY_ITEMS = [
    { id: 'dtICT', label: 'DT ICT' },
    { id: 'dtPhuKien', label: 'DT Phụ kiện' },
    { id: 'pctPhuKien', label: '% Phụ kiện' },
    { id: 'dtCE', label: 'DT CE' },
    { id: 'dtGiaDung', label: 'DT Gia dụng' },
    { id: 'pctGiaDung', label: '% Gia dụng' },
    { id: 'pctMLN',    label: '% MLN' },
    { id: 'pctSim',    label: '% Sim' },
    { id: 'pctVAS',    label: '% VAS' },
    { id: 'pctBaoHiem', label: '% Bảo hiểm' }
];


export const settingsService = {
    /**
     * Lưu cài đặt hiển thị cho bảng Hiệu quả khai thác.
     * Cấu trúc mới là một mảng các đối tượng, mỗi đối tượng chứa {id, label, visible}.
     * @param {Array<Object>} settings - Mảng cấu hình cột đầy đủ.
     */
    saveEfficiencyViewSettings(settings) {
        if (!Array.isArray(settings)) return;
        try {
            localStorage.setItem('efficiencyViewSettings', JSON.stringify(settings));
        } catch (e) {
            console.error("Lỗi khi lưu cài đặt hiển thị Hiệu quả khai thác:", e);
        }
    },
    
    /**
     * Tải cài đặt hiển thị cho bảng Hiệu quả khai thác.
     * Logic mới: Ưu tiên thứ tự đã lưu của người dùng, và thêm các cột mới vào cuối.
     * @returns {Array<Object>} Mảng cấu hình cột đầy đủ.
     */
    loadEfficiencyViewSettings() {
        try {
            const savedSettingsJSON = localStorage.getItem('efficiencyViewSettings');
            if (savedSettingsJSON) {
                const savedItems = JSON.parse(savedSettingsJSON);
                
                // Đảm bảo dữ liệu lưu là một mảng các đối tượng
                if (Array.isArray(savedItems) && savedItems.length > 0 && typeof savedItems[0] === 'object') {
                    const savedIds = new Set(savedItems.map(s => s.id));
                    // Thêm các cột mới (nếu có trong bản cập nhật) mà người dùng chưa có trong cài đặt
                    const newItems = ALL_EFFICIENCY_ITEMS
                        .filter(item => !savedIds.has(item.id))
                        .map(item => ({ ...item, visible: true }));
                    
                    // Lọc ra các mục đã lưu mà không còn tồn tại trong code nữa
                    const currentItems = savedItems.filter(item => ALL_EFFICIENCY_ITEMS.some(config => config.id === item.id));
                    
                    return [...currentItems, ...newItems];
                }
            }
        } catch (e) {
            console.error("Lỗi khi tải cài đặt hiển thị Hiệu quả khai thác:", e);
        }

        // Trả về giá trị mặc định nếu không có gì được lưu hoặc có lỗi
        return ALL_EFFICIENCY_ITEMS.map(item => ({ ...item, visible: true }));
    },

    saveQdcViewSettings(settings) {
        if (!Array.isArray(settings)) return;
        try {
            localStorage.setItem('qdcViewSettings', JSON.stringify(settings));
        } catch (e) {
            console.error("Lỗi khi lưu cài đặt hiển thị Nhóm hàng QĐC:", e);
        }
    },

    saveCategoryViewSettings(settings) {
        if (!Array.isArray(settings)) return;
        try {
            localStorage.setItem('categoryViewSettings', JSON.stringify(settings));
        } catch (e) {
            console.error("Lỗi khi lưu cài đặt hiển thị Ngành hàng chi tiết:", e);
        }
    },

    loadQdcViewSettings(allItems) {
        try {
            const savedSettings = localStorage.getItem('qdcViewSettings');
            if (savedSettings) {
                return JSON.parse(savedSettings);
            }
        } catch (e) {
            console.error("Lỗi khi tải cài đặt hiển thị Nhóm hàng QĐC:", e);
        }
        // Mặc định hiển thị tất cả nếu chưa có cài đặt
        return allItems;
    },

    loadCategoryViewSettings(allItems) {
        try {
            const savedSettings = localStorage.getItem('categoryViewSettings');
            if (savedSettings) {
                return JSON.parse(savedSettings);
            }
        } catch (e) {
            console.error("Lỗi khi tải cài đặt hiển thị Ngành hàng chi tiết:", e);
        }
        // Mặc định hiển thị tất cả nếu chưa có cài đặt
        return allItems;
    },
    
    loadInterfaceSettings() {
        try {
            const savedSettings = JSON.parse(localStorage.getItem('interfaceSettings')) || {};
            const defaultSettings = {
                kpiCard1Bg: '#38bdf8', kpiCard2Bg: '#34d399', kpiCard3Bg: '#fbbf24',
                kpiCard4Bg: '#2dd4bf', kpiCard5Bg: '#a78bfa', kpiCard6Bg: '#f472b6', 
                kpiCard7Bg: '#818cf8', kpiCard8Bg: '#f87171',
                kpiTitleColor: '#ffffff',
                kpiMainColor: '#ffffff',
                kpiSubColor: '#ffffff',
                globalFontSize: '14',
                kpiFontSize: '36'
            };
            const settings = { ...defaultSettings, ...savedSettings };
            
            ui.applyInterfaceSettings(settings);
            
            // Cập nhật giá trị cho các bộ chọn màu
            Object.keys(defaultSettings).forEach((key) => {
                if (key.startsWith('kpiCard')) {
                    const keyNumber = key.replace('kpiCard', '').replace('Bg', '');
                    const colorPicker = document.getElementById(`kpi-color-${keyNumber}`);
                    if (colorPicker) colorPicker.value = settings[key];
                }
            });
            
            const titleColorPicker = document.getElementById('kpi-title-color');
            if(titleColorPicker) titleColorPicker.value = settings.kpiTitleColor;
            
            const mainColorPicker = document.getElementById('kpi-main-color');
            if(mainColorPicker) mainColorPicker.value = settings.kpiMainColor;

            const subColorPicker = document.getElementById('kpi-sub-color');
            if(subColorPicker) subColorPicker.value = settings.kpiSubColor;


            const globalSlider = document.getElementById('global-font-size-slider');
            const kpiSlider = document.getElementById('kpi-font-size-slider');
            if(globalSlider) globalSlider.value = settings.globalFontSize;
            if(kpiSlider) kpiSlider.value = settings.kpiFontSize;
            
            this.handleFontSizeChange({ target: globalSlider }, 'global');
            this.handleFontSizeChange({ target: kpiSlider }, 'kpi');
            
        } catch (e) { console.error("Lỗi khi tải cài đặt giao diện:", e); }
    },
    
    saveInterfaceSettings() {
        const settings = {
            kpiCard1Bg: document.getElementById('kpi-color-1')?.value,
            kpiCard2Bg: document.getElementById('kpi-color-2')?.value,
            kpiCard3Bg: document.getElementById('kpi-color-3')?.value,
            kpiCard4Bg: document.getElementById('kpi-color-4')?.value,
            kpiCard5Bg: document.getElementById('kpi-color-5')?.value,
            kpiCard6Bg: document.getElementById('kpi-color-6')?.value,
            kpiCard7Bg: document.getElementById('kpi-color-7')?.value,
            kpiCard8Bg: document.getElementById('kpi-color-8')?.value,
            kpiTitleColor: document.getElementById('kpi-title-color')?.value,
            kpiMainColor: document.getElementById('kpi-main-color')?.value,
            kpiSubColor: document.getElementById('kpi-sub-color')?.value,
            globalFontSize: document.getElementById('global-font-size-slider')?.value,
            kpiFontSize: document.getElementById('kpi-font-size-slider')?.value,
        };
        localStorage.setItem('interfaceSettings', JSON.stringify(settings));
        ui.applyInterfaceSettings(settings);
        this.applyFontSettings();
    },

    applyFontSettings() {
        const settings = JSON.parse(localStorage.getItem('interfaceSettings')) || {};
        const globalSize = settings.globalFontSize || '14';
        const kpiSize = settings.kpiFontSize || '36';
        
        document.documentElement.style.setProperty('--global-font-size', `${globalSize}px`);
        document.documentElement.style.setProperty('--kpi-main-font-size', `${kpiSize}px`);
    },

    handleFontSizeChange(event, type) {
        if (!event || !event.target) return;
        const value = event.target.value;
        const valueDisplayId = type === 'global' ? 'global-font-size-value' : 'kpi-font-size-value';
        const valueDisplayElement = document.getElementById(valueDisplayId);

        if (valueDisplayElement) {
            valueDisplayElement.textContent = `${value}px`;
        }
        
        this.saveInterfaceSettings();
    },

    saveRealtimeGoalSettings() {
        const warehouse = document.getElementById('rt-goal-warehouse-select').value;
        if (!warehouse) return;
        const settings = { goals: {}, timing: {} };
        document.querySelectorAll('.rt-goal-input').forEach(input => settings.goals[input.dataset.goal] = input.value);
        document.querySelectorAll('.rt-setting-input').forEach(input => settings.timing[input.id] = input.value);
        
        if (!appState.realtimeGoalSettings) appState.realtimeGoalSettings = {};
        appState.realtimeGoalSettings[warehouse] = settings;
        localStorage.setItem('realtimeGoalSettings', JSON.stringify(appState.realtimeGoalSettings));
        ui.showNotification(`Đã lưu cài đặt Realtime cho kho ${warehouse}!`, 'success');
    },

    loadAndApplyRealtimeGoalSettings() {
        const warehouseSelect = document.getElementById('rt-goal-warehouse-select');
        if (!warehouseSelect) return;
        const warehouse = warehouseSelect.value;
        const settings = (warehouse && appState.realtimeGoalSettings && appState.realtimeGoalSettings[warehouse]) 
            ? appState.realtimeGoalSettings[warehouse] 
            : { goals: {}, timing: {} };

        document.querySelectorAll('.rt-goal-input').forEach(input => input.value = settings.goals?.[input.dataset.goal] || '');
        document.querySelectorAll('.rt-setting-input').forEach(input => input.value = settings.timing?.[input.id] || '');
    },

    saveLuykeGoalSettings() {
        const warehouse = document.getElementById('luyke-goal-warehouse-select').value;
        if (!warehouse) return;
        const settings = {};
        document.querySelectorAll('.luyke-goal-input').forEach(input => settings[input.dataset.goal] = input.value);

        if(!appState.luykeGoalSettings) appState.luykeGoalSettings = {};
        appState.luykeGoalSettings[warehouse] = settings;
        localStorage.setItem('luykeGoalSettings', JSON.stringify(appState.luykeGoalSettings));
        ui.showNotification(`Đã lưu cài đặt mục tiêu Lũy kế cho kho ${warehouse}!`, 'success');
    },

    loadAndApplyLuykeGoalSettings() {
        const warehouseSelect = document.getElementById('luyke-goal-warehouse-select');
        if (!warehouseSelect) return;
        const warehouse = warehouseSelect.value;
        const settings = (warehouse && appState.luykeGoalSettings && appState.luykeGoalSettings[warehouse]) 
            ? appState.luykeGoalSettings[warehouse] 
            : {};
        document.querySelectorAll('.luyke-goal-input').forEach(input => input.value = settings[input.dataset.goal] || '');
    },

    getLuykeGoalSettings(selectedWarehouse = null) {
        const settings = { goals: {} };
        const goalKeys = ['doanhThuThuc', 'doanhThuQD', 'phanTramQD', 'phanTramTC', 'phanTramGiaDung', 'phanTramMLN', 'phanTramPhuKien', 'phanTramBaoHiem', 'phanTramSim', 'phanTramVAS'];

        if (selectedWarehouse && appState.luykeGoalSettings[selectedWarehouse]) {
             const source = appState.luykeGoalSettings[selectedWarehouse];
             goalKeys.forEach(key => settings.goals[key] = parseFloat(source[key]) || 0);
        } else if (!selectedWarehouse) {
            const allSettings = appState.luykeGoalSettings || {};
            const warehouseKeys = Object.keys(allSettings);
            const percentCounts = {};
            
            goalKeys.forEach(key => settings.goals[key] = 0);

            warehouseKeys.forEach(whKey => {
                const source = allSettings[whKey];
                goalKeys.forEach(key => {
                    const value = parseFloat(source[key]) || 0;
                    if (key.startsWith('phanTram')) {
                        settings.goals[key] += value;
                        percentCounts[key] = (percentCounts[key] || 0) + 1;
                    } else {
                        settings.goals[key] += value;
                    }
                });
            });
            
            Object.keys(percentCounts).forEach(key => {
                if (percentCounts[key] > 0) settings.goals[key] /= percentCounts[key];
            });
        }
        return settings;
    },

    getRealtimeGoalSettings(selectedWarehouse = null) {
        if (selectedWarehouse && appState.realtimeGoalSettings && appState.realtimeGoalSettings[selectedWarehouse]) {
            return appState.realtimeGoalSettings[selectedWarehouse];
        }
        if (!selectedWarehouse) {
            const allSettings = appState.realtimeGoalSettings || {};
            const validWarehouseSettings = Object.values(allSettings).filter(s => s.goals && Object.keys(s.goals).length > 0);
            if(validWarehouseSettings.length === 0) return { goals: {}, timing: {} };
            const aggregatedGoals = { doanhThuThuc: 0, doanhThuQD: 0 };
            const percentGoals = {}; const percentCounts = {};
            validWarehouseSettings.forEach(ws => {
                aggregatedGoals.doanhThuThuc += parseFloat(ws.goals.doanhThuThuc || 0);
                aggregatedGoals.doanhThuQD += parseFloat(ws.goals.doanhThuQD || 0);
                Object.entries(ws.goals).forEach(([key, value]) => {
                    if (key.startsWith('phanTram')) {
                        if (!percentGoals[key]) { percentGoals[key] = 0; percentCounts[key] = 0; }
                        const numValue = parseFloat(value);
                        if(!isNaN(numValue)) { percentGoals[key] += numValue; percentCounts[key]++; }
                    }
                });
            });
            Object.keys(percentCounts).forEach(key => { if(percentCounts[key] > 0) aggregatedGoals[key] = percentGoals[key] / percentCounts[key]; });
            const representativeTiming = validWarehouseSettings.length > 0 ? (validWarehouseSettings[0].timing || {}) : {};
            return { goals: aggregatedGoals, timing: representativeTiming };
        }
        return { goals: {}, timing: {} };
    },

    applyContrastSetting() {
        const savedLevel = localStorage.getItem('contrastLevel') || '3';
        document.documentElement.dataset.contrast = savedLevel;
        document.querySelectorAll('.contrast-selector').forEach(sel => sel.value = savedLevel);
    },

    loadHighlightSettings() {
        try {
            const saved = localStorage.getItem('highlightSettings');
            if (saved) appState.highlightSettings = JSON.parse(saved);
        } catch(e) {
            console.error("Error loading highlight settings", e);
            appState.highlightSettings = { luyke: {}, sknv: {}, realtime: {} };
        }
    },
};
--- END FILE: ./modules/settings.service.js ---

--- START FILE: ./modules/storage.js ---
// Version 1.1 - Add logging for debugging
// MODULE: STORAGE
// Quản lý tất cả các tương tác với IndexedDB để lưu trữ dữ liệu cục bộ.

export const storage = {
    db: null,
    dbName: 'AppStorageDB',
    storeName: 'fileStore',

    openDB() {
        console.log("[storage.js openDB] Opening IndexedDB..."); // Log mới
        return new Promise((resolve, reject) => {
            if (this.db) {
                console.log("[storage.js openDB] DB already open."); // Log mới
                return resolve(this.db);
            }
            const request = indexedDB.open(this.dbName, 1);
            request.onupgradeneeded = (event) => {
                console.log("[storage.js openDB] onupgradeneeded triggered."); // Log mới
                const db = event.target.result;
                if (!db.objectStoreNames.contains(this.storeName)) {
                    console.log(`[storage.js openDB] Creating object store: ${this.storeName}`); // Log mới
                    db.createObjectStore(this.storeName, { keyPath: 'id' });
                }
            };
            request.onsuccess = (event) => {
                console.log("[storage.js openDB] Success!"); // Log mới
                this.db = event.target.result;
                resolve(this.db);
            };
            request.onerror = (event) => {
                console.error("[storage.js openDB] IndexedDB error:", event.target.errorCode, event.target.error); // Log chi tiết lỗi
                reject(event.target.error);
            };
        });
    },

    async setItem(id, value) {
        console.log(`[storage.js setItem] Attempting to save item with id: ${id}`); // Log mới
        try {
            const db = await this.openDB();
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([this.storeName], 'readwrite');
                const store = transaction.objectStore(this.storeName);
                const request = store.put({ id, value });
                request.onsuccess = () => {
                    console.log(`[storage.js setItem] Successfully saved item with id: ${id}`); // Log mới
                    resolve();
                };
                request.onerror = (event) => {
                    console.error(`[storage.js setItem] Error saving item with id ${id}:`, event.target.error); // Log chi tiết lỗi
                    reject(event.target.error);
                };
                 transaction.onerror = (event) => { // Log lỗi transaction
                     console.error(`[storage.js setItem] Transaction error saving item with id ${id}:`, event.target.error);
                     reject(event.target.error);
                 };
            });
        } catch (error) {
            console.error(`[storage.js setItem] Error opening DB to save item ${id}:`, error); // Log lỗi mở DB
            throw error; // Re-throw để main.js có thể bắt
        }
    },

    async getItem(id) {
        console.log(`[storage.js getItem] Attempting to get item with id: ${id}`); // Log mới
        try {
            const db = await this.openDB();
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([this.storeName], 'readonly');
                const store = transaction.objectStore(this.storeName);
                const request = store.get(id);
                request.onsuccess = (event) => {
                    const result = event.target.result;
                    console.log(`[storage.js getItem] Successfully retrieved item for id ${id}. Found: ${!!result}`); // Log mới
                    resolve(result ? result.value : null);
                };
                request.onerror = (event) => {
                    console.error(`[storage.js getItem] Error getting item with id ${id}:`, event.target.error); // Log chi tiết lỗi
                    reject(event.target.error);
                };
                 transaction.onerror = (event) => { // Log lỗi transaction
                     console.error(`[storage.js getItem] Transaction error getting item with id ${id}:`, event.target.error);
                     reject(event.target.error);
                 };
            });
        } catch (error) {
             console.error(`[storage.js getItem] Error opening DB to get item ${id}:`, error); // Log lỗi mở DB
             throw error; // Re-throw
        }
    }
};
--- END FILE: ./modules/storage.js ---

--- START FILE: ./project_snapshot.txt ---
--- START FILE: ./.vscode/settings.json ---
{
    "liveServer.settings.port": 5505
}
--- END FILE: ./.vscode/settings.json ---

--- START FILE: ./Firebase.js ---
// Version 3.3 - Add cloud functions for competitionNameMappings
// Version 3.2 - Modify incrementCounter to support user-specific actionsTaken
// Version 3.1 - Add savePastedDataToFirestore for text content sync
// Version 3.0 - Implement Cloud Storage upload & save metadata to Firestore
// Version 2.5 - Add detailed try...catch for setDoc in saveDataByWarehouse
// Version 2.4 - Fix syntax error in initCore()
// Version 2.3 - Add version and timestamp fields for data synchronization
// MODULE: FIREBASE
// Chịu trách nhiệm kết nối, thiết lập listener với Firebase.
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getAuth } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { getFirestore, collection, onSnapshot, addDoc, doc, updateDoc, arrayUnion, serverTimestamp, query, orderBy, setDoc, increment, getDocs, getDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";
import { appState } from './state.js';
import { ui } from './ui.js';

const firebase = {
    async initCore() {
        const firebaseConfig = {
          apiKey: "AIzaSyAQ3TWcpa4AnTN-32igGseYDlXrCf1BVew", // Replace with your actual config if needed
          authDomain: "qlst-9e6bd.firebaseapp.com",
          projectId: "qlst-9e6bd",
          storageBucket: "qlst-9e6bd.firebasestorage.app",
          messagingSenderId: "2316705291",
          appId: "1:2316705291:web:ebec2963816aea7585b10e",
          measurementId: "G-M0SM0XHCEK"
        };
        try {
            const firebaseApp = initializeApp(firebaseConfig);
            appState.auth = getAuth(firebaseApp);
            appState.db = getFirestore(firebaseApp);
            appState.storage = getStorage(firebaseApp);
            console.log("Firebase core services initialized successfully!");
        } catch (error) {
            console.error("Firebase core initialization failed:", error);
            ui.showNotification(error.message || "Không thể khởi tạo kết nối Firebase.", "error");
            throw error;
        }
    },

    setupListeners() {
        console.log("Setting up Firebase listeners...");
        if (!appState.db) {
            console.error("Firestore DB instance not available for setting up listeners.");
            return;
        }
        if (!appState.auth?.currentUser) {
             console.warn("Attempting to set up listeners before authentication is complete. This might lead to permission errors initially.");
        }

        const feedbackQuery = query(collection(appState.db, "feedback"), orderBy("timestamp", "desc"));
        onSnapshot(feedbackQuery, (querySnapshot) => {
            console.log("Feedback listener received data.");
            appState.feedbackList = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                appState.feedbackList.push({ id: doc.id, ...data, timestamp: data.timestamp?.toDate() });
            });
            // Chỉ render nếu đang ở trang chủ
            if (document.getElementById('home-section')?.classList.contains('hidden') === false) {
                 ui.renderFeedbackSection(); // Giả sử hàm này nằm trong ui object
            }
        }, (error) => {
            console.error("Error listening to feedback collection: ", error);
            if (error.code !== 'permission-denied') {
                 ui.showNotification("Lỗi khi tải danh sách góp ý.", "error");
            }
        });

        const helpContentRef = collection(appState.db, "help_content");
        onSnapshot(helpContentRef, (querySnapshot) => {
            console.log("Help content listener received data.");
            let contentUpdated = false;
            querySnapshot.forEach((doc) => {
                if (appState.helpContent.hasOwnProperty(doc.id)) {
                    appState.helpContent[doc.id] = doc.data().content;
                    contentUpdated = true;
                }
            });
            // Chỉ render nếu admin đang ở trang khai báo
            if (contentUpdated && appState.isAdmin && document.getElementById('declaration-section')?.classList.contains('hidden') === false) {
                 ui.renderAdminHelpEditors(); // Giả sử hàm này nằm trong ui object
            }
        }, (error) => {
            console.error("Error listening to help_content collection: ", error);
            if (error.code !== 'permission-denied') {
                ui.showNotification("Lỗi khi tải nội dung hướng dẫn.", "error");
            }
        });

        const statsRef = doc(appState.db, "analytics", "site_stats");
        onSnapshot(statsRef, (docSnap) => {
            if (docSnap.exists()) {
               console.log("Stats listener received data.");
               const statsData = docSnap.data();
                ui.updateUsageCounter(statsData); // Giả sử hàm này nằm trong ui object
            } else {
                console.log("Không tìm thấy document thống kê.");
            }
        }, (error) => {
             console.error("Error listening to site_stats document: ", error);
             if (error.code !== 'permission-denied') {
                 ui.showNotification("Lỗi khi tải số liệu thống kê.", "error");
            }
        });

        console.log("Firebase listeners setup initiated.");
    },

    // *** MODIFIED FUNCTION (v3.2) ***
    /**
     * Tăng giá trị một trường số trong Firestore.
     * Nếu fieldName là 'actionsTaken' và có email, tăng bộ đếm cho user đó.
     * Ngược lại, tăng bộ đếm global trong 'analytics/site_stats'.
     * @param {string} fieldName Tên trường cần tăng (vd: 'pageLoads', 'actionsTaken').
     * @param {string} [email=null] Email của người dùng (chỉ dùng cho actionsTaken).
     */
    async incrementCounter(fieldName, email = null) {
        if (!appState.db || !fieldName) return;

        let docRef;
        const dataToUpdate = { [fieldName]: increment(1) };

        // ** Logic mới: Kiểm tra nếu là actionsTaken và có email **
        if (fieldName === 'actionsTaken' && email) {
            docRef = doc(appState.db, "users", email);
            console.log(`Incrementing actionsTaken for user: ${email}`);
        } else if (fieldName === 'actionsTaken' && !email) {
            // Nếu là actionsTaken nhưng không có email (dự phòng), vẫn tăng global
            docRef = doc(appState.db, "analytics", "site_stats");
            console.log("Incrementing global actionsTaken (email not provided).");
        } else {
            // Các trường hợp khác (vd: pageLoads) tăng global
            docRef = doc(appState.db, "analytics", "site_stats");
            console.log(`Incrementing global counter: ${fieldName}`);
        }

        try {
            await setDoc(docRef, dataToUpdate, { merge: true });
        } catch (error) {
            console.error(`Lỗi khi tăng bộ đếm cho '${fieldName}' tại ${docRef.path}:`, error);
        }
    },
    // *** END MODIFIED FUNCTION ***

    async submitFeedback(content) {
        if (!content || !appState.db || !appState.currentUser) {
             ui.showNotification("Không thể gửi góp ý: Người dùng chưa được xác thực.", "error");
            return;
        }
        try {
            await addDoc(collection(appState.db, "feedback"), {
                user: { email: appState.currentUser.email },
                content: content, timestamp: serverTimestamp(), replies: []
            });
            ui.showNotification("Góp ý của bạn đã được gửi!", "success");
            return true;
        } catch (error) {
            console.error("Error adding feedback: ", error);
            ui.showNotification("Lỗi khi gửi góp ý.", "error");
            return false;
        }
    },

    async submitReply(docId, content) {
        if (!docId || !content || !appState.db) return false;
        try {
            const feedbackRef = doc(appState.db, "feedback", docId);
            await updateDoc(feedbackRef, { replies: arrayUnion({ content: content, timestamp: new Date() }) });
            return true;
        } catch (error) {
            console.error("Error submitting reply:", error);
            ui.showNotification("Lỗi khi gửi trả lời.", "error");
            return false;
        }
    },

    async saveHelpContent(contents) {
        if (!appState.db || !appState.isAdmin) return;
        ui.showNotification('Đang lưu nội dung hướng dẫn...', 'success');
        try {
            await Promise.all([
                setDoc(doc(appState.db, "help_content", "data"), { content: contents.data }),
                setDoc(doc(appState.db, "help_content", "luyke"), { content: contents.luyke }),
                setDoc(doc(appState.db, "help_content", "sknv"), { content: contents.sknv }),
                setDoc(doc(appState.db, "help_content", "realtime"), { content: contents.realtime })
            ]);
            ui.showNotification('Đã cập nhật nội dung hướng dẫn thành công!', 'success');
        } catch (error) {
            console.error("Error saving help content:", error);
            ui.showNotification('Lỗi khi lưu nội dung.', 'error');
        }
    },

    async saveCategoryDataToFirestore(data) {
        if (!appState.db || !appState.isAdmin) return;
        ui.showNotification('Đang đồng bộ dữ liệu khai báo lên cloud...', 'success');
        try {
            const categoryRef = doc(appState.db, "declarations", "categoryStructure");
            await setDoc(categoryRef, { data: data.categories || [] });
            const brandRef = doc(appState.db, "declarations", "brandList");
            await setDoc(brandRef, { data: data.brands || [] });
            ui.showNotification('Đồng bộ dữ liệu khai báo thành công!', 'success');
        } catch (error) {
            console.error("Lỗi khi lưu dữ liệu khai báo lên Firestore:", error);
            ui.showNotification('Lỗi khi đồng bộ dữ liệu lên cloud.', 'error');
        }
    },

    async loadCategoryDataFromFirestore() {
        if (!appState.db) {
             console.warn("loadCategoryDataFromFirestore called before DB initialization.");
             return { categories: [], brands: [] };
        }
        try {
            const declarationsCollection = collection(appState.db, "declarations");
            const querySnapshot = await getDocs(declarationsCollection);
            let categories = []; let brands = [];
            querySnapshot.forEach((doc) => {
                if (doc.id === "categoryStructure") categories = doc.data().data || [];
                else if (doc.id === "brandList") brands = doc.data().data || [];
            });
            console.log(`Loaded ${categories.length} categories and ${brands.length} brands from Firestore.`);
            return { categories, brands };
        } catch (error) {
            console.error("Lỗi khi tải dữ liệu khai báo từ Firestore:", error);
            return { categories: [], brands: [] };
        }
    },

    async loadDeclarationsFromFirestore() {
        if (!appState.db) {
            console.warn("loadDeclarationsFromFirestore called before DB initialization.");
            return {};
        }
        console.log("Loading calculation declarations from Firestore...");
        try {
            const declarationIds = ['hinhThucXuat', 'hinhThucXuatGop', 'heSoQuyDoi'];
            const declarations = {};
            await Promise.all(declarationIds.map(async (id) => {
                const docRef = doc(appState.db, "declarations", id);
                const docSnap = await getDoc(docRef);
                declarations[id] = docSnap.exists() ? (docSnap.data().content || '') : '';
            }));
            console.log("Successfully loaded calculation declarations.");
            return declarations;
        } catch (error) {
            console.error("Lỗi khi tải dữ liệu khai báo tính toán từ Firestore:", error);
            return {};
        }
    },

    async saveDeclarationsToFirestore(declarations) {
        if (!appState.db || !appState.isAdmin) return;
        ui.showNotification('Đang đồng bộ khai báo tính toán lên cloud...', 'success');
        try {
            await Promise.all([
                setDoc(doc(appState.db, "declarations", "hinhThucXuat"), { content: declarations.ycx }),
                setDoc(doc(appState.db, "declarations", "hinhThucXuatGop"), { content: declarations.ycxGop }),
                 setDoc(doc(appState.db, "declarations", "heSoQuyDoi"), { content: declarations.heSo })
            ]);
            ui.showNotification('Đồng bộ khai báo tính toán thành công!', 'success');
        } catch (error) {
            console.error("Lỗi khi lưu dữ liệu khai báo tính toán:", error);
            ui.showNotification('Lỗi khi đồng bộ khai báo tính toán.', 'error');
        }
    },

    // *** START: NEW FUNCTIONS (v3.3) ***
    async loadCompetitionNameMappings() {
        if (!appState.db) {
            console.warn("loadCompetitionNameMappings called before DB initialization.");
            return {};
        }
        console.log("Loading competition name mappings from Firestore...");
        try {
            const docRef = doc(appState.db, "declarations", "competitionNameMappings");
            const docSnap = await getDoc(docRef);
            if (docSnap.exists()) {
                console.log("Successfully loaded competition name mappings.");
                return docSnap.data().mappings || {};
            } else {
                console.log("No competition name mappings found in Firestore, returning empty object.");
                return {};
            }
        } catch (error) {
            console.error("Lỗi khi tải Bảng Ánh Xạ Tên Thi Đua từ Firestore:", error);
            return {};
        }
    },

    async saveCompetitionNameMappings(mappings) {
        if (!appState.db || !appState.isAdmin) {
            console.warn("Save competition name mappings skipped: Not admin or DB not initialized.");
            return;
        }
        console.log("Saving competition name mappings to Firestore...");
        try {
            const docRef = doc(appState.db, "declarations", "competitionNameMappings");
            await setDoc(docRef, { mappings: mappings });
            console.log("Successfully saved competition name mappings.");
        } catch (error) {
            console.error("Lỗi khi lưu Bảng Ánh Xạ Tên Thi Đua:", error);
            ui.showNotification('Lỗi khi lưu tên rút gọn lên cloud.', 'error');
        }
    },
    // *** END: NEW FUNCTIONS (v3.3) ***

    async getTemplateDownloadURL() {
        if (!appState.storage) throw new Error("Firebase Storage chưa được khởi tạo.");
        const filePath = 'templates/danh_sach_nhan_vien_mau.xlsx';
        const storageRef = ref(appState.storage, filePath);
        try { return await getDownloadURL(storageRef); }
        catch (error) { console.error("Lỗi khi lấy URL tải file mẫu: ", error); throw error; }
    },

    async getBookmarkDownloadURL() {
        if (!appState.storage) throw new Error("Firebase Storage chưa được khởi tạo.");
        const filePath = 'templates/Share_QLST.zip';
        const storageRef = ref(appState.storage, filePath);
        try { return await getDownloadURL(storageRef); }
        catch (error) { console.error("Lỗi khi lấy URL tải file bookmark: ", error); throw error; }
    },

    async getQrCodeDownloadURL() {
        if (!appState.storage) throw new Error("Firebase Storage chưa được khởi tạo.");
        const filePath = 'qrcodes/main-qr.jpg';
        const storageRef = ref(appState.storage, filePath);
        try { return await getDownloadURL(storageRef); }
        catch (error) {
            console.error("Lỗi khi lấy URL của mã QR: ", error);
            if (error.code === 'storage/object-not-found') throw new Error(`Không tìm thấy file mã QR tại đường dẫn '${filePath}'. Vui lòng kiểm tra lại Firebase Storage.`);
            throw new Error("Không thể tải được mã QR từ server.");
        }
    },

    async upsertUserRecord(email) {
        if (!appState.db || !email) return;
        if (!appState.auth?.currentUser) { console.warn("Attempted to upsert user record before auth is ready."); return; }
        const userRef = doc(appState.db, "users", email);
        try {
            // Chỉ tăng loginCount, không reset actionsTaken ở đây
            await setDoc(userRef, {
                email: email,
                lastLogin: serverTimestamp(),
                loginCount: increment(1)
            }, { merge: true });
            console.log(`User record for ${email} updated successfully (loginCount incremented).`);
        } catch (error) { console.error("Error upserting user record:", error); }
    },

    async uploadFileToStorage(file, storagePath, onProgress) {
        if (!appState.storage) {
            throw new Error("Firebase Storage is not initialized.");
        }
        if (!file || !storagePath) {
            throw new Error("File or storage path is missing for upload.");
        }

        const storageRef = ref(appState.storage, storagePath);
        const uploadTask = uploadBytesResumable(storageRef, file);

        return new Promise((resolve, reject) => {
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log(`Upload ${storagePath} is ${progress}% done`);
                    if (onProgress && typeof onProgress === 'function') {
                        onProgress(progress);
                    }
                },
                (error) => {
                    console.error(`%c[Firebase.uploadFileToStorage] LỖI KHI UPLOAD file ${storagePath}:`, "color: red; font-weight: bold;", error);
                    let userMessage = `Lỗi upload file lên cloud (${error.code || 'UNKNOWN'}).`;
                    switch (error.code) {
                        case 'storage/unauthorized':
                            userMessage = "Lỗi upload: Bạn không có quyền tải file lên.";
                            break;
                        case 'storage/canceled':
                            userMessage = "Lỗi upload: Quá trình tải file đã bị hủy.";
                            break;
                        case 'storage/unknown':
                            userMessage = "Lỗi upload: Đã xảy ra lỗi không xác định trên server.";
                            break;
                    }
                    ui.showNotification(userMessage, 'error');
                    reject(error);
                },
                async () => {
                    console.log(`[Firebase.uploadFileToStorage] File ${storagePath} uploaded successfully.`);
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        console.log('[Firebase.uploadFileToStorage] File available at', downloadURL);
                        resolve(downloadURL);
                    } catch (getUrlError) {
                        console.error(`%c[Firebase.uploadFileToStorage] LỖI KHI LẤY DOWNLOAD URL cho ${storagePath}:`, "color: red; font-weight: bold;", getUrlError);
                        ui.showNotification(`Lỗi lấy link file sau khi upload (${getUrlError.code || 'UNKNOWN'}).`, 'error');
                        reject(getUrlError);
                    }
                }
            );
        });
    },

    async saveMetadataToFirestore(kho, dataType, metadata) {
        if (!appState.db || !kho || !dataType || !metadata) {
            console.error("[saveMetadataToFirestore] Invalid input parameters.");
            throw new Error("Invalid parameters for saving metadata.");
        }
        if (!appState.currentUser?.email) {
            throw new Error("Không thể lưu metadata khi chưa định danh email.");
        }

        const khoRef = doc(appState.db, "warehouseData", kho);
        const dataToSave = {
            [dataType]: {
                ...metadata,
                updatedAt: serverTimestamp(),
                updatedBy: appState.currentUser.email
            }
        };

        try {
            console.log(`[Firebase.saveMetadataToFirestore] Attempting to save metadata for ${dataType} (v${metadata.version}, t${metadata.timestamp}) for kho ${kho}.`);
            await setDoc(khoRef, dataToSave, { merge: true });
            console.log(`[Firebase.saveMetadataToFirestore] Successfully saved metadata for ${dataType} (v${metadata.version}).`);
        } catch (error) {
            console.error(`%c[Firebase.saveMetadataToFirestore] LỖI KHI LƯU METADATA KHO ${kho} (${dataType}, v${metadata.version}):`, "color: red; font-weight: bold;", error);
            console.error("[Firebase.saveMetadataToFirestore] Error details:", error.code, error.message);
            let userMessage = `Lỗi nghiêm trọng khi lưu thông tin đồng bộ ${dataType}.`;
            ui.showNotification(userMessage, 'error');
            throw error;
        }
    },

    async savePastedDataToFirestore(kho, dataType, content, versionInfo) {
        if (!appState.db || !kho || !dataType || !content || !versionInfo) {
            console.error("[savePastedDataToFirestore] Invalid input parameters.");
            throw new Error("Invalid parameters for saving pasted data.");
        }
        if (!appState.currentUser?.email) {
            throw new Error("Không thể lưu dữ liệu dán khi chưa định danh email.");
        }

        const khoRef = doc(appState.db, "warehouseData", kho);
        const metadata = {
            content: content,
            version: versionInfo.version,
            timestamp: versionInfo.timestamp,
            updatedAt: serverTimestamp(),
            updatedBy: appState.currentUser.email
        };
        const dataToSave = { [dataType]: metadata };

        try {
            console.log(`[Firebase.savePastedDataToFirestore] Attempting to save pasted data for ${dataType} (v${versionInfo.version}, t${versionInfo.timestamp}) for kho ${kho}.`);
            await setDoc(khoRef, dataToSave, { merge: true });
            console.log(`[Firebase.savePastedDataToFirestore] Successfully saved pasted data for ${dataType} (v${versionInfo.version}).`);
        } catch (error) {
            console.error(`%c[Firebase.savePastedDataToFirestore] LỖI KHI LƯU DỮ LIỆU DÁN KHO ${kho} (${dataType}, v${versionInfo.version}):`, "color: red; font-weight: bold;", error);
            let userMessage = `Lỗi nghiêm trọng khi lưu dữ liệu dán ${dataType}.`;
            ui.showNotification(userMessage, 'error');
            throw error;
        }
    },

    listenForDataChanges(kho, callback) {
        if (!appState.db || !kho || typeof callback !== 'function') return null;
        if (!appState.auth?.currentUser) {
             console.warn(`Cannot listen for data changes for kho ${kho} before auth is ready.`);
             return null;
        }
        const khoRef = doc(appState.db, "warehouseData", kho);
        console.log(`Bắt đầu lắng nghe thay đổi dữ liệu cho kho: ${kho}`);
        const unsubscribe = onSnapshot(khoRef, (docSnap) => {
            if (docSnap.exists()) {
                console.log(`Phát hiện dữ liệu/metadata mới cho kho ${kho}.`);
                const allData = docSnap.data();
                callback(allData);
            } else {
                console.log(`Chưa có dữ liệu/metadata nào trên cloud cho kho ${kho}.`);
                callback({});
            }
        }, (error) => {
            console.error(`Lỗi khi lắng nghe dữ liệu kho ${kho}:`, error);
            if (error.code !== 'permission-denied') {
                 ui.showNotification("Mất kết nối đồng bộ dữ liệu.", "error");
            } else {
                 console.warn(`Permission denied while listening for data changes on kho ${kho}. Check Firestore rules.`);
            }
        });
        return unsubscribe;
    },

    // *** MODIFIED FUNCTION (v3.2) ***
    /**
     * Lấy danh sách tất cả người dùng và thông tin của họ từ Firestore.
     * Bao gồm cả trường 'actionsTaken' mới.
     * @returns {Promise<Array<Object>>} Mảng các đối tượng người dùng.
     */
    async getAllUsers() {
        if (!appState.db || !appState.isAdmin) {
            ui.showNotification("Bạn không có quyền truy cập chức năng này.", "error");
            return [];
        }
        try {
            const usersCollection = collection(appState.db, "users");
            const querySnapshot = await getDocs(usersCollection);
            const users = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                users.push({
                    email: data.email,
                    loginCount: data.loginCount || 0,
                    lastLogin: data.lastLogin?.toDate(),
                    actionsTaken: data.actionsTaken || 0 // Lấy thêm actionsTaken
                });
            });
            console.log(`Loaded ${users.length} users from Firestore.`);
            return users;
        } catch (error) {
            console.error("Lỗi khi lấy danh sách người dùng:", error);
            ui.showNotification("Không thể tải danh sách người dùng.", "error");
            return [];
        }
    }
    // *** END MODIFIED FUNCTION ***
};

export { firebase };
--- END FILE: ./Firebase.js ---

--- START FILE: ./auth.js ---
// Version 2.4 - Add detailed logging within polling interval
// MODULE: AUTH
// Chịu trách nhiệm xử lý logic định danh người dùng qua email, yêu cầu sau khi có phiên ẩn danh.

import { getAuth, onAuthStateChanged, signInAnonymously } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { appState } from './state.js';
import { ui } from './ui.js';
import { firebase } from './firebase.js';

export const auth = {
    _authInstance: null,

    async ensureAnonymousAuth() {
        if (!this._authInstance) {
            this._authInstance = getAuth();
            if (!this._authInstance) {
                 console.error("Firebase Auth chưa được khởi tạo đúng cách trong firebase.js");
                 throw new Error("Firebase Auth initialization failed.");
            }
        }
        return new Promise((resolve, reject) => {
            onAuthStateChanged(this._authInstance, async (user) => {
                if (user) {
                    console.log("Anonymous user detected or already signed in:", user.uid);
                    resolve(user);
                } else {
                    console.log("No user found, attempting anonymous sign-in...");
                    try {
                        const userCredential = await signInAnonymously(this._authInstance);
                        console.log("Anonymous sign-in successful:", userCredential.user.uid);
                        resolve(userCredential.user);
                    } catch (error) {
                        console.error("Anonymous sign-in failed:", error);
                        ui.showNotification("Lỗi xác thực. Không thể kết nối.", "error");
                        reject(error);
                    }
                }
            }, (error) => {
                console.error("Error in onAuthStateChanged listener:", error);
                reject(error);
            });
        });
    },

    initEmailIdentification(onSuccessCallback) {
        const savedEmail = localStorage.getItem('userEmail');
        if (savedEmail && this._isValidEmail(savedEmail)) {
            appState.currentUser = { email: savedEmail };
            console.log("Email found in localStorage, proceeding.");
            onSuccessCallback();
        } else {
            console.log("No valid email in localStorage, showing login modal.");
            ui.toggleModal('login-modal', true);
            this._setupLoginListenerDeferred(onSuccessCallback);
        }
    },

    /**
     * @private
     * Thiết lập trình nghe sự kiện cho form đăng nhập - Phiên bản mới với polling
     * Chờ cho đến khi các element của modal xuất hiện trong DOM.
     * @param {Function} onSuccessCallback - Hàm callback để chạy sau khi đăng nhập thành công.
     */
    _setupLoginListenerDeferred(onSuccessCallback) {
        const maxWaitTime = 5000; // Chờ tối đa 5 giây
        const checkInterval = 100; // Kiểm tra mỗi 100ms
        let elapsedTime = 0;

        console.log("[auth.js] Attempting to set up login listener, waiting for elements...");

        const intervalId = setInterval(() => {
            elapsedTime += checkInterval; // Tăng thời gian đã trôi qua ở đầu mỗi lần lặp
            const submitBtn = document.getElementById('login-submit-btn');
            const emailInput = document.getElementById('login-email-input');

            // *** ADDED: Logging inside interval ***
            console.log(`[auth.js interval ${elapsedTime}ms] Checking... Button found: ${!!submitBtn}, Input found: ${!!emailInput}`);

            if (submitBtn && emailInput) {
                clearInterval(intervalId);
                console.log("[auth.js] Login elements found. Attaching listeners now.");
                this._attachLoginHandlers(submitBtn, emailInput, onSuccessCallback);
            } else if (elapsedTime >= maxWaitTime) {
                clearInterval(intervalId);
                console.error("[auth.js] CRITICAL TIMEOUT: Login button or email input not found after waiting.");
                // *** ADDED: Log current modal HTML on timeout ***
                const modalElement = document.getElementById('login-modal');
                console.error("[auth.js] Current #login-modal content on timeout:", modalElement?.innerHTML.substring(0, 300) + "...");
                ui.showNotification("Lỗi giao diện nghiêm trọng: Không thể khởi tạo form đăng nhập.", "error");
            }
            // No 'else' needed here, just continue polling if not found and not timed out
        }, checkInterval);
    },

    /**
     * @private
     * Gắn các hàm xử lý sự kiện click và keydown (tách ra để tái sử dụng).
     */
     _attachLoginHandlers(submitBtn, emailInput, onSuccessCallback) {
         if (submitBtn.dataset.listenerAttached) {
             console.warn("Login listener already attached. Skipping.");
             return;
         }
         submitBtn.dataset.listenerAttached = 'true';
         emailInput.dataset.listenerAttached = 'true';

         submitBtn.onclick = async () => {
             const currentEmailInput = document.getElementById('login-email-input');
             const currentErrorMsg = document.getElementById('login-error-msg');
             const currentSubmitBtn = document.getElementById('login-submit-btn');

             if (!currentEmailInput || !currentErrorMsg || !currentSubmitBtn) {
                 console.error("Login modal elements missing during click handler!");
                 return;
             }

             const email = currentEmailInput.value.trim();
             if (this._isValidEmail(email)) {
                 currentErrorMsg.classList.add('hidden');
                 currentSubmitBtn.disabled = true;
                 currentSubmitBtn.textContent = "Đang xử lý...";

                 localStorage.setItem('userEmail', email);
                 appState.currentUser = { email: email };

                 ui.showNotification(`Chào mừng ${email}!`, 'success');
                 await firebase.upsertUserRecord(email);

                 ui.toggleModal('login-modal', false);
                 console.log("Email submitted, calling onSuccessCallback.");
                 onSuccessCallback();
             } else {
                 currentErrorMsg.classList.remove('hidden');
                 currentSubmitBtn.disabled = false;
                 currentSubmitBtn.textContent = "Xác nhận & Tiếp tục";
             }
         };

         emailInput.onkeydown = (e) => {
             if (e.key === 'Enter') {
                 e.preventDefault();
                 const currentSubmitBtn = document.getElementById('login-submit-btn');
                 if (currentSubmitBtn && !currentSubmitBtn.disabled) {
                     currentSubmitBtn.click();
                 }
             }
         };
         console.log("Successfully attached login handlers.");
     },

    /**
     * @private
     * Kiểm tra định dạng email đơn giản.
     * @param {string} email
     * @returns {boolean}
     */
    _isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return email && emailRegex.test(email);
    }
};
--- END FILE: ./auth.js ---

--- START FILE: ./changelog.json ---
[
     {
    "version": "3.6",
    "date": "27/10/2025",
    "notes": [
      "Nâng cấp tính nâng đồng bộ cloud theo mã kho:",
      "- Cần cập nhập E-mail(không cần đăng nhập) vàchọn mã kho trước khi up file dữ liệu lên, hệ thống sẽ tự đồng bộ lên cloud",
      "- QL/TC cùng siêu thị sẽ thấy được dữ liệu dùng chung như YCX lũy kế,giờ công,thưởng nóng...",
      "- Dữ liệu cũng sẽ được đồng bộ khi xem giữa điện thoại, laptop",
      "Sửa lỗi không tính bảo hiểm vào tỷ lệ quy đổi",
      "Khôi phục tính năng xử lý file thi đua vùng TNB"
    ]
  },  
   {
    "version": "3.5",
    "date": "23/10/2025",
    "notes": [
      "Nâng cấp giao diện tab SKNV cho đẹp hơn"
    ]
  },  
   {
    "version": "3.4",
    "date": "17/10/2025",
    "notes": [
      "Có thể bấm trực tiếp tên nhân viên để xem chi tiết",
      "Thêm icon vào menu cho sinh động"
    ]
  },  
  {
    "version": "3.3",
    "date": "13/10/2025",
    "notes": [
      "Thêm chức năng tùy chỉnh cột cho tab Hiệu quả khai thác nhân viên : có thể chọn ẩn hoặc hiện cột dữ liệu không liên quan đến TGDD",
      "Cho phép kéo thả để sắp xếp các cột trong bảng kết quả hiệu quả khai thác nhân viên"
    ]
  },  
   {
    "version": "3.2",
    "date": "10/10/2025",
    "notes": [
      "Thêm bộ lọc ( hình răng cưa ) vào 3 bảng Hiệu quả khai thác, Nhóm hàng quy đổi cao, Ngành hàng chi tiết trong Siêu thị lũy kế và realtime",
      "Sửa lại giao diện khu vực cập nhật dữ liệu cho gọn hơn"
    ]
  },  
  {
    "version": "3.1",
    "date": "09/10/2025",
    "notes": [
      "Thêm 2 thẻ KPI mới cho tab siêu thị lũy kế",
      "Thêm chức năng cài đặt màu chữ thẻ KPI trong cài đặt giao diện"
    ]
  },  
   {
    "version": "3.0",
    "date": "06/10/2025",
    "notes": [
      "Nâng cấp tính năng tạo chương trình thi đua và theo dõi hiệu quả thi đua : Có thể theo dõi cùng lúc nhiều hãng trong cùng 1 nhóm hàng.",
      "Nâng cấp tính năng nhận xét:cho phép tạo nhận xét cho nhiều tab phụ.",
      "Nâng cấp tính năng nhận xét: Thêm bộ lọc tất cả nhân viên dưới mục tiêu khai báo"
    ]
  },  
  {
    "version": "2.8",
    "date": "01/10/2025",
    "notes": [
      "Thêm tính năng tạo chương trình thi đua và theo dõi hiệu quả thi đua."
    ]
  },
    {
    "version": "2.7",
    "date": "26/09/2025",
    "notes": [
      "Thêm tính năng thông báo có phiên bản mới.",
      "Thêm tính năng video hướng dẫn ngoài trang chủ.",
      "Thêm bộ đếm lượt truy cập và sử dụng."
    ]
  },
{
    "version": "2.6",
    "date": "25/09/2025",
    "notes": [
      "Sửa lỗi tính năng sắp xếp trên tất cả các bảng.",
      "Phục hồi báo cáo 'Thi đua NV' và 'Hiệu quả khai thác LK'.",
      "Sửa lỗi 'Thiết lập mục tiêu' cập nhật không tức thời.",
      "Sửa lỗi bộ lọc nâng cao không hiển thị dữ liệu."
    ]
  },
  {
    "version": "2.5",
    "date": "24/09/2025",
    "notes": [
      "Thêm tính năng xử lý file thi đua theo vùng trong 'Sức khỏe siêu thị.",
      "Nâng cấp tính năng 'Nhận xét' : thêm icon, thêm các thẻ tùy chọn"
    ]
  },
    {
    "version": "2.2",
    "date": "23/09/2025",
    "notes": [
      "Sửa lỗi nghiêm trọng: Tính toán sai giá trị doanh thu sau khi cập nhật bộ lọc.",
      "Cấu trúc lại hệ thống quản lý phiên bản và lịch sử cập nhật."
    ]
  },
  {
    "version": "2.1",
    "date": "23/09/2025",
    "notes": [
      "Sửa lỗi bộ lọc nâng cao không có dữ liệu để chọn.",
      "Sửa lỗi tô màu tiêu đề bảng không hoạt động do sai CSS Selector."
    ]
  },
  {
    "version": "2.0",
    "date": "16/09/2025",
    "notes": [
      "Phiên bản phát hành đầu tiên.",
      "Bao gồm các chức năng cốt lõi: SKNV, SKST Lũy kế, Doanh thu Realtime."
    ]
  }
]
--- END FILE: ./changelog.json ---

--- START FILE: ./components/drawer-goal.js ---
// Version 1.0 - Component: Goal Drawer
// Chứa mã HTML cho drawer thiết lập mục tiêu.

const drawerGoalHTML = `
<div id="goal-drawer" class="settings-drawer fixed top-0 left-0 h-full bg-white shadow-2xl z-50 p-6 overflow-y-auto hidden">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-gray-800">Thiết lập mục tiêu</h3>
        <button class="close-drawer-btn text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
    </div>
    
    <div class="border-b border-gray-200 mb-4">
        <nav id="goal-drawer-tabs" class="-mb-px flex space-x-6" aria-label="Tabs" data-content-container="goal-drawer-content">
             <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="goal-tab-monthly">Mục tiêu Tháng (Lũy kế)</button>
             <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="goal-tab-daily">Mục tiêu Ngày (Realtime)</button>
        </nav>
    </div>

    <div id="goal-drawer-content">
        <div id="goal-tab-monthly" class="sub-tab-content space-y-4">
            <div>
                <label for="luyke-goal-warehouse-select" class="block text-sm font-medium text-gray-700 mb-1">Thiết lập cho kho</label>
                <select id="luyke-goal-warehouse-select" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-2 gap-x-4 gap-y-3">
                <div>
                    <label for="luyke-goal-dtt" class="block text-sm font-medium text-gray-700">Target DT Thực</label>
                    <input type="number" id="luyke-goal-dtt" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuThuc">
                </div>
                <div>
                    <label for="luyke-goal-dtqd" class="block text-sm font-medium text-gray-700">Target DT QĐ</label>
                    <input type="number" id="luyke-goal-dtqd" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuQD">
                </div>
                <div>
                    <label for="luyke-goal-ptqd" class="block text-sm font-medium text-gray-700">% Quy đổi</label>
                    <input type="number" id="luyke-goal-ptqd" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramQD">
                </div>
                <div>
                    <label for="luyke-goal-pttc" class="block text-sm font-medium text-gray-700">% Trả chậm</label>
                    <input type="number" id="luyke-goal-pttc" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramTC">
                </div>
                <div>
                    <label for="luyke-goal-giadung" class="block text-sm font-medium text-gray-700">% Gia dụng</label>
                    <input type="number" id="luyke-goal-giadung" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramGiaDung">
                </div>
                <div>
                    <label for="luyke-goal-mln" class="block text-sm font-medium text-gray-700">% MLN</label>
                    <input type="number" id="luyke-goal-mln" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramMLN">
                </div>
                <div>
                    <label for="luyke-goal-phukien" class="block text-sm font-medium text-gray-700">% Phụ kiện</label>
                    <input type="number" id="luyke-goal-phukien" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramPhuKien">
                </div>
                 <div>
                    <label for="luyke-goal-baohiem" class="block text-sm font-medium text-gray-700">% Bảo hiểm</label>
                    <input type="number" id="luyke-goal-baohiem" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramBaoHiem">
                </div>
                <div>
                    <label for="luyke-goal-sim" class="block text-sm font-medium text-gray-700">% Sim</label>
                    <input type="number" id="luyke-goal-sim" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramSim">
                </div>
                <div>
                    <label for="luyke-goal-vas" class="block text-sm font-medium text-gray-700">% VAS</label>
                    <input type="number" id="luyke-goal-vas" class="luyke-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramVAS">
                </div>
            </div>
        </div>
        <div id="goal-tab-daily" class="sub-tab-content hidden space-y-4">
            <div>
                <label for="rt-goal-warehouse-select" class="block text-sm font-medium text-gray-700 mb-1">Thiết lập cho kho</label>
                <select id="rt-goal-warehouse-select" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select>
            </div>
            <div class="grid grid-cols-2 gap-4 items-end">
                <div class="flex items-center gap-x-2">
                    <label for="rt-open-hour" class="font-medium text-gray-700 text-sm">Mở cửa:</label>
                    <input type="time" id="rt-open-hour" class="rt-setting-input p-1 border border-gray-300 rounded-md shadow-sm w-24">
                </div>
                <div class="flex items-center gap-x-2">
                    <label for="rt-close-hour" class="font-medium text-gray-700 text-sm">Đóng cửa:</label>
                    <input type="time" id="rt-close-hour" class="rt-setting-input p-1 border border-gray-300 rounded-md shadow-sm w-24">
                </div>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-2 gap-x-4 gap-y-3">
                <div>
                    <label for="rt-goal-dtt" class="block text-sm font-medium text-gray-700">DT Thực (triệu)</label>
                    <input type="number" id="rt-goal-dtt" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuThuc">
                </div>
                <div>
                    <label for="rt-goal-dtqd" class="block text-sm font-medium text-gray-700">DT QĐ (triệu)</label>
                    <input type="number" id="rt-goal-dtqd" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="doanhThuQD">
                </div>
                <div>
                    <label for="rt-goal-ptqd" class="block text-sm font-medium text-gray-700">% Quy đổi</label>
                    <input type="number" id="rt-goal-ptqd" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramQD">
                </div>
                <div>
                    <label for="rt-goal-pttc" class="block text-sm font-medium text-gray-700">% Trả chậm</label>
                    <input type="number" id="rt-goal-pttc" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramTC">
                </div>
                <div>
                    <label for="rt-goal-giadung" class="block text-sm font-medium text-gray-700">% Gia dụng</label>
                    <input type="number" id="rt-goal-giadung" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramGiaDung">
                </div>
                <div>
                    <label for="rt-goal-mln" class="block text-sm font-medium text-gray-700">% MLN</label>
                    <input type="number" id="rt-goal-mln" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramMLN">
                </div>
                <div>
                    <label for="rt-goal-phukien" class="block text-sm font-medium text-gray-700">% Phụ kiện</label>
                    <input type="number" id="rt-goal-phukien" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramPhuKien">
                </div>
                <div>
                    <label for="rt-goal-sim" class="block text-sm font-medium text-gray-700">% Sim</label>
                    <input type="number" id="rt-goal-sim" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramSim">
                </div>
                <div>
                    <label for="rt-goal-vas" class="block text-sm font-medium text-gray-700">% VAS</label>
                    <input type="number" id="rt-goal-vas" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramVAS">
                </div>
                 <div>
                    <label for="rt-goal-baohiem" class="block text-sm font-medium text-gray-700">% Bảo hiểm</label>
                    <input type="number" id="rt-goal-baohiem" class="rt-goal-input mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" data-goal="phanTramBaoHiem">
                </div>
            </div>
        </div>
    </div>

    <div class="border-t pt-6 mt-6">
         <div id="goal-tab-competition" class="space-y-4">
            <h4 class="text-md font-bold text-gray-800 mb-3">Quản lý Chương trình Thi đua</h4>
            <div id="competition-list-container" class="space-y-2 mb-4">
            </div>
            <form id="competition-form" class="p-4 bg-slate-50 border rounded-lg space-y-3 hidden">
                <input type="hidden" id="competition-id">
                <div>
                    <label for="competition-name" class="block text-sm font-medium text-gray-700">Tên chương trình</label>
                    <input type="text" id="competition-name" class="mt-1 block w-full p-2 border rounded-md" placeholder="VD: Thi đua TV Sony T9">
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="competition-brand" class="block text-sm font-medium text-gray-700">Hãng sản xuất</label>
                        <select id="competition-brand" multiple class="mt-1 block w-full"></select>
                    </div>
                    <div>
                        <label for="competition-group" class="block text-sm font-medium text-gray-700">Nhóm hàng</label>
                        <select id="competition-group" multiple class="mt-1 block w-full"></select>
                    </div>
                </div>
                <div>
                    <label for="competition-type" class="block text-sm font-medium text-gray-700">Loại đo lường</label>
                    <select id="competition-type" class="mt-1 block w-full p-2 border rounded-md">
                        <option value="doanhthu">Theo Doanh thu</option>
                        <option value="soluong">Theo Số lượng</option>
                    </select>
                </div>
                <div id="price-segment" class="hidden grid grid-cols-2 gap-4">
                    <div>
                        <label for="competition-min-price" class="block text-sm font-medium text-gray-700">Giá từ (triệu)</label>
                        <input type="number" id="competition-min-price" class="mt-1 block w-full p-2 border rounded-md" placeholder="VD: 3 (cho 3 triệu)">
                    </div>
                     <div>
                        <label for="competition-max-price" class="block text-sm font-medium text-gray-700">Giá đến (triệu)</label>
                        <input type="number" id="competition-max-price" class="mt-1 block w-full p-2 border rounded-md" placeholder="VD: 5 (cho 5 triệu)">
                    </div>
                </div>
                <div class="flex items-center">
                    <input id="competition-exclude-apple" type="checkbox" class="h-4 w-4 rounded border-gray-300">
                    <label for="competition-exclude-apple" class="ml-2 block text-sm text-gray-900">Trừ hãng Apple khỏi dữ liệu so sánh</label>
                </div>
                <div class="flex justify-end gap-2">
                    <button type="button" id="cancel-competition-btn" class="px-4 py-2 text-sm rounded-md bg-gray-200 hover:bg-gray-300">Hủy</button>
                    <button type="submit" id="save-competition-btn" class="px-4 py-2 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700">Lưu</button>
                </div>
            </form>
            <button id="add-competition-btn" class="mt-2 w-full text-sm py-2 px-4 border-2 border-dashed rounded-lg hover:bg-slate-50">
                + Thêm chương trình mới
            </button>
        </div>
    </div>
</div>
`;

export const drawerGoal = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = drawerGoalHTML;
        }
    }
};
--- END FILE: ./components/drawer-goal.js ---

--- START FILE: ./components/drawer-interface.js ---
// Version 1.1 - Update font size slider range and default value
// Chứa mã HTML cho drawer cài đặt giao diện.

const drawerInterfaceHTML = `
<div id="interface-drawer" class="settings-drawer fixed top-0 left-0 h-full bg-white shadow-2xl z-50 p-6 overflow-y-auto hidden">
    <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-gray-800">Cài đặt giao diện</h3>
        <button class="close-drawer-btn text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
    </div>
    <div class="space-y-6">
        <div>
            <label for="contrast-selector-drawer" class="block text-sm font-medium text-gray-700 mb-2">Độ tương phản</label>
            <select id="contrast-selector-drawer" class="contrast-selector w-full p-2 border rounded-lg text-sm bg-white shadow-sm">
                <option value="1">Rất nhẹ</option>
                <option value="2">Nhẹ</option>
                <option value="3" selected>Bình thường</option>
                <option value="4">Cao</option>
                <option value="5">Rất cao</option>
                <option value="6">Cao nhất</option>
            </select>
        </div>
        <div>
            <label for="global-font-size-slider" class="flex justify-between text-sm font-medium text-gray-700 mb-2">
                <span>Cỡ chữ toàn trang</span>
                <span id="global-font-size-value" class="font-bold text-blue-600">18px</span>
            </label>
            <input type="range" id="global-font-size-slider" min="12" max="25" step="1" value="18" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
        </div>
        <div>
             <label for="kpi-font-size-slider" class="flex justify-between text-sm font-medium text-gray-700 mb-2">
                <span>Cỡ chữ thẻ KPI</span>
                <span id="kpi-font-size-value" class="font-bold text-blue-600">36px</span>
            </label>
            <input type="range" id="kpi-font-size-slider" min="24" max="48" step="2" value="36" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
        </div>
        <div>
            <h4 class="text-sm font-medium text-gray-700 mb-2">Màu sắc thẻ KPI</h4>
            <div class="grid grid-cols-2 gap-4">
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-1" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#38bdf8">
                    <label for="kpi-color-1" class="text-sm">Thẻ 1</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-2" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#34d399">
                    <label for="kpi-color-2" class="text-sm">Thẻ 2</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-3" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#fbbf24">
                    <label for="kpi-color-3" class="text-sm">Thẻ 3</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-4" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#2dd4bf">
                    <label for="kpi-color-4" class="text-sm">Thẻ 4</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-5" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#a78bfa">
                    <label for="kpi-color-5" class="text-sm">Thẻ 5</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-6" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#f472b6">
                    <label for="kpi-color-6" class="text-sm">Thẻ 6</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-7" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#818cf8">
                    <label for="kpi-color-7" class="text-sm">Thẻ 7</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-color-8" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#f87171">
                    <label for="kpi-color-8" class="text-sm">Thẻ 8</label>
                </div>
            </div>
        </div>
         <div>
            <h4 class="text-sm font-medium text-gray-700 mb-2">Màu chữ thẻ KPI</h4>
             <div class="space-y-2">
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-title-color" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#ffffff">
                    <label for="kpi-title-color" class="text-sm">Tiêu đề thẻ</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-main-color" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#ffffff">
                    <label for="kpi-main-color" class="text-sm">Giá trị chính</label>
                </div>
                <div class="flex items-center gap-2">
                    <input type="color" id="kpi-sub-color" class="kpi-color-input p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg" value="#ffffff">
                    <label for="kpi-sub-color" class="text-sm">Giá trị phụ</label>
                </div>
            </div>
        </div>
    </div>
</div>
`;

export const drawerInterface = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = drawerInterfaceHTML;
        }
    }
};
--- END FILE: ./components/drawer-interface.js ---

--- START FILE: ./components/modal-admin.js ---
// Version 1.0 - Component: Admin Modal
// Chứa mã HTML cho modal yêu cầu mật khẩu admin.

const modalAdminHTML = `
<div id="admin-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm mx-4">
        <h3 class="text-lg font-bold mb-4">Truy cập khu vực Admin</h3>
        <p class="text-sm text-gray-600 mb-4">Vui lòng nhập mật khẩu để xem và chỉnh sửa phần Khai báo.</p>
        <input type="password" id="admin-password-input" class="w-full p-2 border rounded-lg mb-2" placeholder="Mật khẩu...">
        <p id="admin-error-msg" class="text-red-500 text-sm mb-4 hidden">Mật khẩu không đúng. Vui lòng thử lại.</p>
        <div class="flex justify-end space-x-3">
            <button id="admin-cancel-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">Hủy</button>
            <button id="admin-submit-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Xác nhận</button>
        </div>
    </div>
</div>
`;

export const modalAdmin = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalAdminHTML;
        }
    }
};
--- END FILE: ./components/modal-admin.js ---

--- START FILE: ./components/modal-chart.js ---
// Version 1.0 - Component: Chart Modal
// Chứa mã HTML cho modal hiển thị biểu đồ chi tiết.

const modalChartHTML = `
<div id="chart-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container modal__container--large">
         <div class="modal__header">
            <h3 id="chart-modal-title" class="modal__title"></h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div class="modal__content">
            <canvas id="top10-chart"></canvas>
        </div>
    </div>
</div>
`;

export const modalChart = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalChartHTML;
        }
    }
};
--- END FILE: ./components/modal-chart.js ---

--- START FILE: ./components/modal-composer.js ---
// Version 1.0 - Component: Composer Modal
// Chứa mã HTML cho modal Trình tạo Nhận xét.

const modalComposerHTML = `
<div id="composer-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container modal__container--large">
        <div class="modal__header">
            <h3 id="composer-modal-title" class="modal__title">Trình tạo Nhận xét</h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div id="composer-modal-content" class="modal__content">
            <div class="composer">
                <div class="composer__editor">
                    <label class="composer__label">Nội dung nhận xét</label>
                    <nav id="composer-context-tabs" class="composer__nav mb-2"></nav>
                    <div id="composer-context-content">
                        </div>
                </div>
                <div class="composer__tags">
                    <div class="composer__nav">
                        <button class="composer__tab-btn active" data-tab="tab-general">Chung & Icons</button>
                        <button class="composer__tab-btn" data-tab="tab-kpi">KPIs Siêu Thị</button>
                        <button class="composer__tab-btn" data-tab="tab-ranking">Xếp Hạng NV</button>
                        <button class="composer__tab-btn" data-tab="tab-details">Thi Đua & Chi Tiết</button>
                    </div>

                    <div class="composer__content">
                        <div class="composer__tab-pane active" id="tab-general">
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Chung</h5>
                                <button class="composer__tag-btn" data-tag="[NGAY]">Ngày</button>
                                <button class="composer__tag-btn" data-tag="[GIO]">Giờ</button>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Biểu tượng (Icons)</h5>
                                <button class="composer__icon-btn">📊</button>
                                <button class="composer__icon-btn">💰</button>
                                <button class="composer__icon-btn">💥</button>
                                <button class="composer__icon-btn">🎯</button>
                                <button class="composer__icon-btn">📈</button>
                                <button class="composer__icon-btn">📦</button>
                                <button class="composer__icon-btn">⚠️</button>
                                <button class="composer__icon-btn">🔥</button>
                                <button class="composer__icon-btn">✅</button>
                            </div>
                        </div>

                        <div class="composer__tab-pane" id="tab-kpi">
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">KPIs Chính</h5>
                                <button class="composer__tag-btn" data-tag="[DT_THUC]">DT Thực</button>
                                <button class="composer__tag-btn" data-tag="[DTQD]">DT Quy đổi</button>
                                <button class="composer__tag-btn" data-tag="[%HT_DTT]">%HT DT Thực</button>
                                <button class="composer__tag-btn" data-tag="[%HT_DTQD]">%HT DT QĐ</button>
                                <button class="composer__tag-btn" data-tag="[TLQD]">Tỷ lệ Quy đổi</button>
                                <button class="composer__tag-btn" data-tag="[DT_CHUAXUAT]">DTQĐ Chưa Xuất</button>
                                <button class="composer__tag-btn" data-tag="[SS_CUNGKY]">Tăng/giảm Cùng kỳ</button>
                            </div>
                        </div>

                        <div class="composer__tab-pane" id="tab-ranking">
                            <div class="composer__filter-group">
                                <label for="composer-dept-filter" class="composer__label">Lọc theo bộ phận:</label>
                                <select id="composer-dept-filter" class="composer__select">
                                    <option value="ALL">Toàn siêu thị</option>
                                </select>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Xếp hạng DT Quy Đổi</h5>
                                <button class="composer__tag-btn" data-tag-template="[TOP3_DTQD_{dept}@msnv]">Top 3</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT3_DTQD_{dept}@msnv]">Bot 3</button>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Xếp hạng Thu Nhập</h5>
                                <button class="composer__tag-btn" data-tag-template="[TOP3_THUNHAP_{dept}@msnv]">Top 3</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT3_THUNHAP_{dept}@msnv]">Bot 3</button>
                            </div>
                             <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">Xếp hạng Tỷ lệ Quy đổi</h5>
                                <button class="composer__tag-btn" data-tag-template="[TOP3_TLQD_{dept}@msnv]">Top 3</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT3_TLQD_{dept}@msnv]">Bot 3</button>
                            </div>
                            <div class="composer__tag-group">
                                <h5 class="composer__tag-group-title">NV Dưới Mục Tiêu Khai Báo</h5>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_TLQD_{dept}@msnv]">% Quy đổi</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_TLTC_{dept}@msnv]">% Trả chậm</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_PK_{dept}@msnv]">% Phụ kiện</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_GD_{dept}@msnv]">% Gia dụng</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_MLN_{dept}@msnv]">% MLN</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_SIM_{dept}@msnv]">% Sim</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_VAS_{dept}@msnv]">% VAS</button>
                                <button class="composer__tag-btn" data-tag-template="[BOT_TARGET_BH_{dept}@msnv]">% Bảo hiểm</button>
                            </div>
                            </div>
                        
                        <div class="composer__tab-pane" id="tab-details">
                            <div class="composer__sub-nav">
                                <button class="composer__sub-tab-btn active" data-sub-tab="sub-tab-thidua">Thi Đua</button>
                                <button class="composer__sub-tab-btn" data-sub-tab="sub-tab-qdc">Nhóm QĐC</button>
                                <button class="composer__sub-tab-btn" data-sub-tab="sub-tab-nganhhang">Ngành Hàng</button>
                            </div>
                            <div class="composer__sub-content">
                                <div class="composer__sub-tab-pane active" id="sub-tab-thidua">
                                    <div class="composer__tag-group">
                                        <h5 class="composer__tag-group-title">Thi Đua Ngành Hàng</h5>
                                        <button class="composer__tag-btn" data-tag="[TD_TONG_CT]">Tổng CT</button>
                                        <button class="composer__tag-btn" data-tag="[TD_CT_DAT]">>100%</button>
                                        <button class="composer__tag-btn" data-tag="[TD_CT_CHUADAT]"><100%</button>
                                        <button class="composer__tag-btn" data-tag="[TD_TYLE_DAT]">% Đạt</button>
                                    </div>
                                </div>
                                <div class="composer__sub-tab-pane" id="sub-tab-qdc">
                                    <div id="composer-qdc-tags-container" class="composer__tag-group">
                                        <h5 class="composer__tag-group-title">Chọn Nhóm Hàng QĐC</h5>
                                    </div>
                                </div>
                                <div class="composer__sub-tab-pane" id="sub-tab-nganhhang">
                                    <div id="composer-nganhhang-tags-container" class="composer__tag-group">
                                        <h5 class="composer__tag-group-title">Chọn Ngành Hàng Chi Tiết</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal__footer">
            <button id="save-composer-template-btn" class="action-btn action-btn--save">Lưu mẫu</button>
            <button id="copy-composed-notification-btn" class="action-btn action-btn--copy">Xem trước & Sao chép</button>
        </div>
    </div>
</div>
`;

export const modalComposer = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalComposerHTML;
        }
    }
};
--- END FILE: ./components/modal-composer.js ---

--- START FILE: ./components/modal-force-update.js ---
// Version 1.1 - Add container for update notes
// MODULE: COMPONENTS - FORCE UPDATE MODAL
// Chứa mã HTML cho modal yêu cầu người dùng cập nhật phiên bản.

const modalForceUpdateHTML = `
<div id="force-update-modal" class="modal hidden">
    <div class="modal__overlay" style="cursor: not-allowed;"></div>
    <div class="modal__container" style="max-width: 500px;">
        <div class="modal__header">
            <h3 id="force-update-title" class="modal__title">📢 Đã có phiên bản mới!</h3>
        </div>
        <div class="modal__content">
            <p class="text-gray-600 mb-4">Một phiên bản mới với các bản sửa lỗi và cải tiến đã sẵn sàng. Vui lòng tải lại trang để tiếp tục.</p>
            
            <div id="update-notes-container" class="my-4 p-3 bg-gray-50 border border-gray-200 rounded-lg max-h-48 overflow-y-auto">
                <p class="text-sm text-gray-500">Đang tải chi tiết...</p>
            </div>
            <button id="force-reload-btn" class="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 transition text-lg">
                Cập nhật ngay
            </button>
        </div>
    </div>
</div>
`;

export const modalForceUpdate = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalForceUpdateHTML;
        }
    }
};
--- END FILE: ./components/modal-force-update.js ---

--- START FILE: ./components/modal-help.js ---
// Version 1.0 - Component: Help Modal
// Chứa mã HTML cho modal hiển thị nội dung hướng dẫn.

const modalHelpHTML = `
<div id="help-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container">
        <div class="modal__header">
            <h3 id="help-modal-title" class="modal__title"></h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div id="help-modal-content" class="modal__content">
        </div>
    </div>
</div>
`;

export const modalHelp = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalHelpHTML;
        }
    }
};
--- END FILE: ./components/modal-help.js ---

--- START FILE: ./components/modal-login.js ---
// Version 1.2 - Add logging to render function
// Chứa mã HTML cho modal yêu cầu email người dùng khi truy cập lần đầu.

const modalLoginHTML = `
<div id="login-modal" class="modal hidden">
    <div class="modal__overlay" style="cursor: not-allowed;"></div>
    <div class="modal__container" style="max-width: 420px;">
        <div class="modal__header">
            <h3 class="modal__title">Chào mừng đến với Công cụ Phân tích</h3>
        </div>
        <div class="modal__content">
            <p class="text-gray-600 mb-4">Vui lòng nhập email của bạn để bắt đầu sử dụng. Email này sẽ được dùng để định danh và đồng bộ dữ liệu trong tương lai.</p>
            <div class="space-y-4">
                <div>
                    <label for="login-email-input" class="block text-sm font-medium text-gray-700 mb-1">Email của bạn</label>
                    <input type="email" id="login-email-input" class="w-full p-2 border rounded-lg" placeholder="your.email@example.com">
                    <p id="login-error-msg" class="text-red-500 text-sm mt-1 hidden">Vui lòng nhập một địa chỉ email hợp lệ.</p>
                </div>
                <button id="login-submit-btn" class="w-full bg-blue-600 text-white font-bold py-2.5 px-4 rounded-lg hover:bg-blue-700 transition text-base">
                    Xác nhận & Tiếp tục
                </button>
            </div>
        </div>
    </div>
</div>
`;

export const modalLogin = {
    async render(containerSelector) {
        console.log(`[modalLogin.render] Attempting to render into: ${containerSelector}`); // Log mới
        const container = document.querySelector(containerSelector);
        if (container) {
            console.log(`[modalLogin.render] Container found. Setting innerHTML.`); // Log mới
            container.innerHTML = modalLoginHTML;
            console.log(`[modalLogin.render] innerHTML set. Waiting for next tick.`); // Log mới
            // Return a promise that resolves after the next tick, ensuring DOM update
            return new Promise(resolve => setTimeout(() => {
                console.log(`[modalLogin.render] Next tick resolved.`); // Log mới
                resolve();
            }, 0));
        } else {
            console.error(`[modalLogin.render] Container ${containerSelector} NOT FOUND.`); // Log lỗi mới
        }
        // Return a resolved promise if container not found to avoid breaking await
        return Promise.resolve();
    }
};
--- END FILE: ./components/modal-login.js ---

--- START FILE: ./components/modal-preview.js ---
// Version 1.0 - Component: Preview Modal
// Chứa mã HTML cho modal xem trước nội dung nhận xét.

const modalPreviewHTML = `
<div id="preview-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container">
        <div class="modal__header">
            <h3 id="preview-modal-title" class="modal__title">Xem trước nội dung</h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div class="modal__content">
            <pre id="preview-modal-content" class="preview-content"></pre>
        </div>
        <div class="modal__footer">
            <button id="copy-from-preview-btn" class="action-btn action-btn--copy">Sao chép nội dung</button>
        </div>
    </div>
</div>
`;

export const modalPreview = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalPreviewHTML;
        }
    }
};
--- END FILE: ./components/modal-preview.js ---

--- START FILE: ./components/modal-selection.js ---
// Version 1.0 - Component: Selection Modal
// Chứa mã HTML cho modal tùy chỉnh hiển thị chung.

const modalSelectionHTML = `
<div id="selection-modal" class="modal hidden">
    <div class="modal__overlay" data-close-modal></div>
    <div class="modal__container">
        <div class="modal__header">
            <h3 id="selection-modal-title" class="modal__title">Tùy chỉnh hiển thị</h3>
            <button class="modal__close-btn" data-close-modal>&times;</button>
        </div>
        <div class="modal__content">
            <input type="text" id="selection-modal-search" class="w-full p-2 border rounded-md mb-4" placeholder="Tìm kiếm mục...">
            <div id="selection-modal-list" class="space-y-2 max-h-64 overflow-y-auto">
                </div>
        </div>
        <div class="modal__footer">
            <button id="selection-modal-save-btn" class="action-btn action-btn--save">Lưu Cài Đặt</button>
        </div>
    </div>
</div>
`;

export const modalSelection = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = modalSelectionHTML;
        }
    }
};
--- END FILE: ./components/modal-selection.js ---

--- START FILE: ./components/sidebar.js ---
// Version 1.4 - Add font-semibold to all nav links for consistency
// Version 1.3 - Optimize HTML for better icon/text alignment
// Chứa mã HTML và logic cho thanh điều hướng bên.

const sidebarHTML = `
<nav id="sidebar" class="bg-white/80 backdrop-blur-sm shadow-lg fixed top-0 left-0 h-full z-30 p-3 flex flex-col justify-between">
    <div>
         <a href="#home-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold mb-4">
            <i data-feather="home"></i>
            <span class="menu-text">Hướng Dẫn & Góp Ý</span>
        </a>
        <ul class="space-y-2">
            <li>
                <a href="#data-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="file-text"></i>
                    <span class="menu-text">Cập nhật dữ liệu</span>
                </a>
            </li>
            <li>
                <a href="#health-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="activity"></i>
                    <span class="menu-text">Sức khỏe siêu thị</span>
                </a>
            </li>
            <li>
                <a href="#health-employee-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="users"></i>
                    <span class="menu-text">Sức khỏe nhân viên</span>
                </a>
            </li>
            <li>
                <a href="#realtime-section" class="nav-link flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="trending-up"></i>
                    <span class="menu-text">Doanh thu realtime</span>
                </a>
            </li>
        </ul>
    </div>
    <div>
        <ul class="space-y-2">
            <li>
                <button id="interface-settings-btn" class="w-full flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="settings"></i>
                    <span class="menu-text">Cài đặt giao diện</span>
                </button>
            </li>
            <li>
                <button id="goal-settings-btn" class="w-full flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="target"></i>
                    <span class="menu-text">Thiết lập mục tiêu</span>
                </button>
            </li>
            <li>
                <button id="admin-access-btn" class="w-full flex items-center p-3 text-gray-700 rounded-lg hover:bg-gray-200 font-semibold">
                    <i data-feather="edit"></i>
                    <span class="menu-text">Khai báo</span>
                </button>
            </li>
        </ul>
    </div>
</nav>
`;

export const sidebar = {
    render(containerSelector) {
        const container = document.querySelector(containerSelector);
        if (container) {
            container.innerHTML = sidebarHTML;
        }
    }
};
--- END FILE: ./components/sidebar.js ---

--- START FILE: ./config.js ---
// Version 2.2 - New Features & Refinements
// MODULE 1: TỦ CẤU HÌNH (CONFIG)
// File này chứa tất cả các cấu hình tĩnh của ứng dụng.

const config = {
    ADMIN_PASSWORD: "Linh3031",
    COLUMN_MAPPINGS: {
        danhsachnv: {
            maKho: { required: true, displayName: 'Mã Kho', aliases: ['mã kho', 'makho', 'kho'] },
            maNV: { required: true, displayName: 'Mã Nhân Viên', aliases: ['mã nv', 'msnv', 'mã nhân viên', 'manv', 'mã số nhân viên'] },
            hoTen: { required: true, displayName: 'Họ và Tên', aliases: ['họ và tên', 'tên nhân viên', 'tên nv', 'họ tên'] },
            boPhan: { required: true, displayName: 'Bộ phận', aliases: ['bộ phận'] }
        },
        ycx: { // Dùng chung cho cả YCX lũy kế và YCX realtime
            ngayTao: { required: true, displayName: 'Ngày tạo', aliases: ['ngày tạo'] },
            ngayHenGiao: { required: false, displayName: 'Ngày hẹn giao', aliases: ['ngày hẹn giao'] },
            nguoiTao: { required: true, displayName: 'Người tạo', aliases: ['người tạo'] },
            thanhTien: { required: true, displayName: 'Giá bán', aliases: ['giá bán_1', 'giá bán'] },
            soLuong: { required: true, displayName: 'Số lượng', aliases: ['sl bán', 'số lượng'] },
            nhomHang: { required: true, displayName: 'Nhóm hàng', aliases: ['nhóm hàng'] },
            tenSanPham: { required: true, displayName: 'Tên sản phẩm', aliases: ['tên sản phẩm'] },
            tenKhachHang: { required: true, displayName: 'Tên khách hàng', aliases: ['tên khách hàng', 'tenkhachhang'] },
            nhaSanXuat: { required: true, displayName: 'Nhà sản xuất', aliases: ['nhà sản xuất', 'nhasanxuat'] },
            nganhHang: { required: true, displayName: 'Ngành hàng', aliases: ['ngành hàng'] },
            hinhThucXuat: { required: true, displayName: 'Hình thức xuất', aliases: ['hình thức xuất'] },
            trangThaiThuTien: { required: true, displayName: 'Trạng thái thu tiền', aliases: ['trạng thái thu tiền'] },
            trangThaiHuy: { required: true, displayName: 'Trạng thái hủy', aliases: ['trạng thái hủy'] },
            tinhTrangTra: { required: true, displayName: 'Tình trạng trả', aliases: ['tình trạng nhập trả của sản phẩm đổi với sản phẩm chính', 'tình trạng trả'] },
            trangThaiXuat: { required: true, displayName: 'Trạng thái xuất', aliases: ['trạng thái xuất'] }
        },
        giocong: {
            maNV: { required: false, displayName: 'Mã NV', aliases: ['mã nv', 'msnv'] },
            hoTen: { required: false, displayName: 'Tên NV', aliases: ['tên nv', 'tennv'] },
            tongGioCong: { required: true, displayName: 'Tổng giờ công', aliases: ['tổng giờ công (x.nhận) total', 'tổng giờ công'] }
        },
        thuongnong: {
            maNV: { required: false, displayName: 'Mã NV', aliases: ['manv', 'mã nv'] },
            hoTen: { required: false, displayName: 'Tên NV', aliases: ['tennv', 'tên nv'] },
            diemThuong: { required: true, displayName: 'Điểm thưởng', aliases: ['diemthuong', 'điểm thưởng'] }
        }
    },
    PRODUCT_GROUPS: {
        ICT: ['1491', '931', '42'],
        CE: ['1097', '1098', '1099', '1094', '894'],
        PHU_KIEN: ['16', '1394', '184', '764'], // 16 - Phụ kiện tiện ích, 1394 - Phụ kiện lắp đặt, 184 - Phụ kiện trang trí, 764 - Loa vi tính
        GIA_DUNG: ['484', '1214'], // Mã ngành hàng Gia Dụng
        MAY_LOC_NUOC: ['4171', '4172'], // Mã nhóm hàng Máy Lọc Nước
        PIN_SDP: '12',
        CAMERA_TRONG_NHA: '6479',
        CAMERA_NGOAI_TROi: '4219',
        TAI_NGHE_BLT: '4540',
        NOI_CHIEN: '4099',
        ROBOT_HB: '4439',
        TIVI: '1094',
        TU_LANH: '1097',
        MAY_GIAT: '1099',
        MAY_LANH: '1098',
        DIEN_THOAI: ['13', '1491', '18'],
        LAPTOP: '42',
        SIM: ['1891', '664'],
        VAS: ['164', '571'],
        BAO_HIEM_VAS: ['4479', '4499'],
        SMARTPHONE: ['1491', '18', '13'],
        BAO_HIEM_DENOMINATOR: ['1491', '1097', '894', '1099', '1098', '42', '1094', '3859', '911', '893', '3659'],
        QDC_GROUPS: {
            PIN_SDP: { codes: ['12'], name: 'Pin SDP' },
            TAI_NGHE_BLT: { codes: ['3346', '4540'], name: 'Tai nghe BLT' },
            DONG_HO: { codes: ['4059', '4060', '4061', '4062', '4063', '4064', '4070'], name: 'Đồng hồ' },
            CAMERA: { codes: ['4219', '6479'], name: 'Camera' },
            LOA: { codes: ['1031', '1351', '4779'], name: 'Loa' },
            UDDD: { codes: ['571', '611'], name: 'UDDĐ' },
            BAO_HIEM: { codes: ['4479', '4499'], name: 'Bảo hiểm' },
            NOI_COM: { codes: ['4157', '4158'], name: 'Nồi cơm điện tử + cao tần' },
            NOI_CHIEN: { codes: ['4099'], name: 'Nồi chiên' },
            MAY_LOC_NUOC: { codes: ['4171', '4172'], name: 'Máy lọc nước' },
            ROBOT_HB: { codes: ['4439'], name: 'Robot hút bụi' },
            SIM_ONLINE: { codes: ['1891'], name: 'SIM' }
        }
    },
    DEPARTMENT_GROUPS: [
        'BP Tư Vấn - ĐM',
        'BP Trang Trí kiêm Thu ngân - Sim Số - ĐM',
        'BP Kho Kiêm Hỗ Trợ Kỹ Thuật Xe Đạp - ĐM'
    ],
    DEFAULT_DATA: {
        HINH_THUC_XUAT_TINH_DOANH_THU: [
            'Xuất bán hàng tại siêu thị', 'Xuất cung ứng dịch vụ',
            'Xuất bán pre-order tại siêu thị', 'Xuất SIM trắng kèm theo SIM',
            'Xuất bán hàng ưu đãi cho nhân viên', 'Xuất bán hàng tại siêu thị (TCĐM)',
            'Xuất dịch vụ bảo hành trọn đời', 'Xuất dịch vụ bảo dưỡng trọn đời',
            'Xuất bán hàng trả góp tại siêu thị', 'Xuất bán trả góp ưu đãi cho nhân viên',
            'Xuất bán trả góp cho NV phục vụ công việc', 'Xuất bán pre-order trả góp tại siêu thị',
            'Xuất bán pre-order trả góp tại siêu thị (TCĐM)',
            'Xuất dịch vụ thu hộ bảo hiểm'
        ],
        HINH_THUC_XUAT_TRA_GOP: ['Xuất bán hàng trả góp tại siêu thị', 'Xuất bán trả góp ưu đãi cho nhân viên', 'Xuất bán trả góp cho NV phục vụ công việc', 'Xuất bán pre-order trả góp tại siêu thị', 'Xuất bán pre-order trả góp tại siêu thị (TCĐM)'],
        HE_SO_QUY_DOI: { '1098 - Máy lạnh (IMEI)': 1, '2011 - Khuyến mãi - SP Ảo': 1, '2511 - Nạp tiền AirTime M_Service': 1, '2151 - Phiếu mua hàng/Pre Order': 1, '971 - Thẻ cào điện tử': 1, '431 - Ốp Lưng - Flip Cover': 3.37, '2571 - Thu hộ cước Viettel': 1, '4519 - Thu Hộ Tiền Trả Góp': 1, '2513 - Thu hộ Payoo': 1, '4302 - Nón bảo hiểm các loại': 1.92, '2291 - Sim trắng (Seri)': 1, '18 - Điện Thoại Di Động': 1, '4599 - Thu Hộ Tiền Mặt': 1, '12 - Pin sạc dự phòng': 3.37, '571 - UDDĐ': 1, '58 - Miếng dán mặt sau': 3.37, '1231 - Miếng dán mặt trước': 3.37, '1491 - Smartphone': 1, '1891 - Sim Online': 5.45, '4479 - Dịch Vụ Bảo Hiểm': 4.18, '3359 - Phụ kiện đồng hồ': 3, '2391 - Smartwatch': 3, '911 - Máy nước nóng': 1, '4499 - Thu Hộ Phí Bảo Hiểm': 4.18, '4142 - Bình đun siêu tốc': 1.85, '4153 - Xay Sinh tố': 1.85, '15 - Tai nghe dây': 3.37, '1412 - Dịch vụ bảo trì': 1, '3345 - Cáp': 3.37, '2312 - Mã nạp thẻ game': 1, '4900 - Bàn phím': 3.37, '4141 - Bàn ủi khô': 1.85, '4156 - Nồi cơm nắp gài/nắp rời': 1.85, '14 - Sạc/ Adapter': 3.37, '42 - Laptop': 1.2, '751 - Khuyến mãi ba lô, túi xách': 1, '1031 - Loa di động': 3.37, '4199 - Miếng Dán Kính': 3.37, '3346 - Tai Nghe Bluetooth': 3.37, '931 - Máy tính bảng': 1.2, '19 - Khuyến mãi ĐTDĐ': 1, '10 - Chuột': 3.37, '4060 - Đồng hồ Nam Dây da': 3, '880 - Loa Karaoke': 1.29, '851 - Khuyến mãi Điện Tử': 1, '4169 - Lõi lọc': 1.85, '4540 - Tai Nghe Bluetooth - imei': 3.37, '4062 - Đồng hồ Nữ Dây kim loại': 3, '2831 - Phụ kiện Apple': 3.37, '2691 - Bộ Sạc/Cáp/Adaptor (Giá Rẻ)': 3.37, '1351 - Loa vi tính (imei)': 3.37, '1094 - Tivi LED (IMEI)': 1, '4324 - Khung treo, giá đỡ': 3.37, '1099 - Máy giặt (IMEI)': 1, '1097 - Tủ lạnh (IMEI)': 1, '4099 - Nồi chiên': 1.85, '4070 - Đồng hồ Trẻ em': 3, '967 - Sấy tóc': 1.85, '957 - Lò nướng': 1.85, '958 - Lò vi sóng': 1.85, '4158 - Nồi cơm điện tử': 1.85, '3241 - Dao/Kéo/Thớt': 1.92, '3240 - Hộp/Hũ': 1.92, '3265 - Nồi': 1.92, '4139 - Đèn bàn/Đèn Sạc/Đèn bắt muỗi': 1.85, '73 - Phụ kiện điện máy': 3.37, '4171 - Lọc nước dạng tủ đứng': 1.85, '3384 - Đồ nghề sử dụng điện': 1, '4147 - Bếp điện đơn': 1.85, '4063 - Đồng hồ Nữ Dây da': 3, '3263 - Chảo': 1.92, '3185 - Vệ sinh nhà cửa': 1.92, '4143 - Bàn ủi hơi nước đứng': 1.85, '4146 - Bếp gas đôi': 1.85, '1052 - Khuyến mãi Điện Lạnh': 1, '3799 - Quạt điều hòa': 1.85, '1951 - Software (số Lượng)': 1, '6000 - Máy ép trái cây': 1.85, '4059 - Đồng hồ Nam Dây kim loại': 3, '4160 - Quạt bàn/hộp/sạc': 1.85, '4162 - Bình/Ca đựng nước': 1.92, '4660 - Quạt lửng': 1.85, '17 - Phụ kiện IT khác': 3.37, '4145 - Bếp gas đơn': 1.85, '875 - Dàn máy': 1, '1071 - Phụ kiện điện tử': 3.37, '891 - Micro': 1, '4152 - Ổ cắm điện/vợt muỗi': 1.85, '4154 - Xay ép/Khác': 1.85, '5975 - Balo Túi Chống Sốc': 3.37, '893 - Tủ đông': 1, '2531 - Thu hộ Mservice': 1, '4019 - Sim trắng điện tử': 1, '4320 - Đồng hồ - Khuyến mãi mua': 1, '3187 - Bình/Ly/Ca giữ nhiệt': 1.92, '4159 - Quạt đứng': 1.85, '4157 - Nồi cơm cao tần': 1.85, '16 - Thẻ Nhớ': 3.37, '4140 - Bàn ủi hơi nước': 1.85, '4150 - Máy nước nóng lạnh': 1.85, '591 - Thay sim': 1, '2999 - Dụng cụ nhà bếp khác': 1.92, '4779 - Loa di động - imei': 3.37, '4440 - Gói Cước Và Dịch Vụ GTGT': 1, '4121 - Máy Bơm Nước': 1, '4161 - Quạt treo': 1.85, '4961 - Quần bó & legging nữ Thể Thao': 1, '4151 - Áp suất/lẩu/chiên/nướng': 1.85, '4144 - Bếp gas âm': 1.85, '871 - USB': 3.37, '6479 - Camera IP Trong nhà': 3.37, '4219 - Camera IP Ngoài trời': 3.37, '4659 - Phụ kiện tiện ích Apple': 3.37, '531 - Pin, 4095 - Cáp (Giá Rẻ)': 3.37, '2791 - Kinh doanh mùa vụ': 3.37, '2771 - Giá treo màn hình máy tính': 3.37, '80 - Khuyến mãi Khác': 1, '1131 - Máy in, Fax': 2, '4125 - Smartband': 3, '743 - Quạt sưởi': 1.85, '4659 - Phụ kiện Apple - Imei': 3.37, '4064 - Đồng hồ Nữ Dây khác': 3, '956 - Hút bụi': 1.85, '4172 - Lọc nước âm tủ/trên bàn': 1.85, '3779 - Bếp điện âm': 1.85, '4061 - Đồng hồ Nam Dây khác': 3, '4067 - Đồng hồ Unisex Dây khác': 3, '1411 - Dịch vụ lắp đặt': 1, '4149 - Bình thủy điện': 1.85, '4148 - Bếp điện đôi': 1.85, '955 - Hút mùi/ hút khói': 1.85, '4699 - Gia dụng không điện khác': 1.92, '4859 - Xe đạp đường phố cổ điển': 1, '4759 - Phụ Kiện Xe Đạp': 1, '2471 - Thu hộ cước VinaPhone': 1, '3719 - Quần dài nữ Thể Thao': 1, '1051 - Khuyến mãi Điện gia dụng': 1, '3721 - Quần ngắn & váy nữ Thể Thao': 1, '410 - Phụ kiện TT khác': 3.37, '4155 - Hút bụi cây': 1.85, '3563 - Máy tính nguyên bộ': 1, '894 - Tủ mát': 1, '3639 - Máy lọc không khí': 1.85, '611 - Ứng dụng PC & Laptop': 1, '4089 - Đồng hồ Unisex Dây kim loại': 3, '4439 - Hút Bụi Robot': 1.85, '3740 - Áo T-shirt nam Thể Thao': 1, '4339 - Ổn Áp': 1, '4459 - Quạt Trần': 1.85, '2351 - Router - Imei': 3.37, '3159 - DV Internet và Truyền hình thu tiền': 1, '3659 - Máy sấy lồng ngang': 1, '3519 - Áo Bra Thể Thao': 1, '3479 - Thiết bị mạng khác': 3.37, '3859 - Máy rửa chén': 1 }
        }
    };

// Dòng cuối cùng này rất quan trọng. Nó "xuất khẩu" đối tượng config 
// để các file JavaScript khác có thể "nhập khẩu" và sử dụng.
export { config };

--- END FILE: ./config.js ---

--- START FILE: ./cors-config.json ---
[
  {
    "origin": [
      "http://127.0.0.1:5505",
      "https://4qlstmwg.netlify.app"
    ],
    "method": ["GET", "OPTIONS"],
    "responseHeader": ["Content-Type"],
    "maxAgeSeconds": 3600
  }
]
--- END FILE: ./cors-config.json ---

--- START FILE: ./create_snapshot.js ---
// Kịch bản Node.js chuyên dụng để tạo snapshot toàn diện cho dự án
// Phiên bản 1.1 - Mở rộng các loại file được hỗ trợ

const fs = require('fs');
const path = require('path');

// --- CẤU HÌNH ---
const config = {
    // Thư mục gốc để bắt đầu quét
    rootDirectory: '.', 
    // Tên file output
    outputFile: 'project_snapshot.txt',
    // ====> THAY ĐỔI QUAN TRỌNG <====
    // Các đuôi file cần lấy nội dung. Đã bổ sung .json, .svg, .md
    includeExtensions: ['.js', '.html', '.css', '.txt', '.json', '.svg', '.md'],
    // Các thư mục cần bỏ qua
    excludeDirectories: ['node_modules', '.git', '.history'] 
};

// --- LOGIC CHÍNH ---

// Hàm đệ quy để duyệt qua các thư mục
function walkDirectory(dir, filelist = []) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
        const filepath = path.join(dir, file);
        const stat = fs.statSync(filepath);

        // Nếu là thư mục và không nằm trong danh sách loại trừ -> tiếp tục duyệt
        if (stat.isDirectory() && !config.excludeDirectories.includes(file)) {
            filelist = walkDirectory(filepath, filelist);
        } 
        // Nếu là file và có đuôi file nằm trong danh sách cho phép -> thêm vào danh sách
        else if (stat.isFile() && config.includeExtensions.includes(path.extname(file))) {
            filelist.push(filepath);
        }
    });
    return filelist;
}

// Hàm chính để chạy kịch bản
function createSnapshot() {
    console.log('Bắt đầu quá trình tạo snapshot (phiên bản nâng cao)...');
    
    const allFiles = walkDirectory(config.rootDirectory);

    if (fs.existsSync(config.outputFile)) {
        fs.unlinkSync(config.outputFile);
    }

    allFiles.forEach(filepath => {
        try {
            const content = fs.readFileSync(filepath, 'utf8');
            // Chuẩn hóa đường dẫn để luôn dùng dấu gạch chéo '/'
            const normalizedPath = path.normalize(filepath).replace(/\\/g, '/');
            const fileHeader = `--- START FILE: ./${normalizedPath} ---\n`;
            const fileFooter = `\n--- END FILE: ./${normalizedPath} ---\n\n`;
            
            fs.appendFileSync(config.outputFile, fileHeader);
            fs.appendFileSync(config.outputFile, content);
            fs.appendFileSync(config.outputFile, fileFooter);
        } catch (err) {
            console.error(`Lỗi khi đọc file ${filepath}:`, err);
        }
    });

    console.log(`\x1b[32m%s\x1b[0m`, `✅ Đã tạo thành công file '${config.outputFile}' với ${allFiles.length} file.`);
}

// Chạy hàm chính
createSnapshot();
--- END FILE: ./create_snapshot.js ---

--- START FILE: ./dashboard.css ---
/* Version 6.11 - Add styles for declaration accordion */
/* Version 6.10 - Fix CSS selector for Thi đua vùng 4-column layout */
/* Version 6.9 - Fix missing curly brace for .modal__container--large */
/* Version 6.8 - Adjust Thi đua vùng layout (4 cols) & summary colors */
/* Version 6.7 - Add login modal styles to v6.6 base */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

:root {
    --global-font-size: 18px;
    --kpi-main-font-size: 36px;
    --bg-lightness-1: 98%; --header-lightness-1: 96%; --header-text-lightness-1: 25%; --special-header-lightness-1: 92%; --below-target-lightness-1: 96%;
    --bg-lightness-2: 96%; --header-lightness-2: 94%; --header-text-lightness-2: 22%; --special-header-lightness-2: 88%; --below-target-lightness-2: 94%;
    --bg-lightness-3: 94%; --header-lightness-3: 92%; --header-text-lightness-3: 18%; --special-header-lightness-3: 85%; --below-target-lightness-3: 92%; /* Normal */
    --bg-lightness-4: 92%; --header-lightness-4: 88%; --header-text-lightness-4: 15%; --special-header-lightness-4: 80%; --below-target-lightness-4: 88%;
    --bg-lightness-5: 90%; --header-lightness-5: 84%; --header-text-lightness-5: 12%; --special-header-lightness-5: 75%; --below-target-lightness-5: 84%;
    --bg-lightness-6: 88%; --header-lightness-6: 80%; --header-text-lightness-6: 10%; --special-header-lightness-6: 70%; --below-target-lightness-6: 80%;
    --kpi-card-1-bg: #38bdf8;
    --kpi-card-2-bg: #34d399; --kpi-card-3-bg: #fbbf24;
    --kpi-card-4-bg: #2dd4bf; --kpi-card-5-bg: #a78bfa; --kpi-card-6-bg: #f472b6;
    --kpi-card-7-bg: #818cf8;
    --kpi-card-8-bg: #f87171;
    --kpi-title-color: #ffffff;
    --kpi-main-color: #ffffff;
    --kpi-sub-color: #ffffff;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: #f3f4f6;
    font-size: var(--global-font-size);
}

html[data-contrast="1"] { --bg-lightness: var(--bg-lightness-1); --header-lightness: var(--header-lightness-1); --header-text-lightness: var(--header-text-lightness-1); --special-header-lightness: var(--special-header-lightness-1); --below-target-lightness: var(--below-target-lightness-1); }
html[data-contrast="2"] { --bg-lightness: var(--bg-lightness-2); --header-lightness: var(--header-lightness-2); --header-text-lightness: var(--header-text-lightness-2); --special-header-lightness: var(--special-header-lightness-2); --below-target-lightness: var(--below-target-lightness-2); }
html[data-contrast="3"] { --bg-lightness: var(--bg-lightness-3); --header-lightness: var(--header-lightness-3); --header-text-lightness: var(--header-text-lightness-3); --special-header-lightness: var(--special-header-lightness-3); --below-target-lightness: var(--below-target-lightness-3); }
html[data-contrast="4"] { --bg-lightness: var(--bg-lightness-4); --header-lightness: var(--header-lightness-4); --header-text-lightness: var(--header-text-lightness-4); --special-header-lightness: var(--special-header-lightness-4); --below-target-lightness: var(--below-target-lightness-4); }
html[data-contrast="5"] { --bg-lightness: var(--bg-lightness-5); --header-lightness: var(--header-lightness-5); --header-text-lightness: var(--header-text-lightness-5); --special-header-lightness: var(--special-header-lightness-5); --below-target-lightness: var(--below-target-lightness-5); }
html[data-contrast="6"] { --bg-lightness: var(--bg-lightness-6); --header-lightness: var(--header-lightness-6); --header-text-lightness: var(--header-text-lightness-6); --special-header-lightness: var(--special-header-lightness-6); --below-target-lightness: var(--below-target-lightness-6); }


::-webkit-scrollbar { width: 8px; }
::-webkit-scrollbar-track { background: #f1f1f1; }
::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
::-webkit-scrollbar-thumb:hover { background: #555; }

#sidebar { width: 68px; transition: width 0.3s ease-in-out; overflow-x: hidden; }
#sidebar:hover { width: 256px; }
#sidebar.menu-locked:hover { width: 68px; }

#sidebar .nav-link, #sidebar button {
    white-space: nowrap;
    gap: 1rem;
    justify-content: flex-start; /* FIX: Canh lề trái cho icon và text */
}

.menu-text {
    transition: opacity 0.2s ease-in-out, width 0.3s ease-in-out;
    opacity: 0;
    white-space: nowrap;
    width: 0;
    overflow: hidden;
}
#sidebar:hover .menu-text {
    opacity: 1;
    transition-delay: 0.1s;
    width: auto;
}
#sidebar.menu-locked:hover .menu-text {
    opacity: 0;
    width: 0;
}

#main-content { transition: margin-left 0.3s ease-in-out; margin-left: 68px; }

.nav-link,
.action-btn,
.kpi-card,
.content-card,
.tdv-item-card,
.data-input-group,
.toggle-filters-btn,
.page-header__help-btn,
.column-toggle-btn {
    transition: all 0.2s ease-in-out;
}

/* === BẮT ĐẦU: NÂNG CẤP UI CHO SUB-TAB (V5.9) === */
.sub-tab-btn {
    border-bottom: 3px solid transparent;
    padding: 0.75rem 0.5rem;
    transition: all 0.2s ease-in-out;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}
.sub-tab-btn:not(.active):hover {
    background-color: #f3f4f6;
    border-bottom-color: #d1d5db;
    transform: translateY(-2px);
}
.sub-tab-btn.active {
    border-color: #3b82f6;
    color: #2563eb;
    background-color: transparent;
}
.sub-tab-btn .feather {
    width: 1.2rem;
    height: 1.2rem;
    stroke-width: 2.5;
    transition: all 0.2s ease-in-out;
}
.sub-tab-btn.active .feather {
    color: white;
    background-color: #3b82f6;
    border-radius: 9999px;
    padding: 4px;
}
/* Tô màu icon theo từng tab */
.sub-tab-btn[data-title*="SieuThi"].active .feather,
.sub-tab-btn[data-title*="Vung"].active .feather { background-color: #3b82f6; } /* Blue */

.sub-tab-btn[data-title*="SKNV"].active .feather,
.sub-tab-btn[data-title*="ThuNhap"].active .feather,
.sub-tab-btn[data-title*="DoanhThuLK"].active .feather,
.sub-tab-btn[data-title*="DTNVRealtime"].active .feather { background-color: #16a34a; } /* Green */

.sub-tab-btn[data-title*="ThiDua"].active .feather { background-color: #8b5cf6; } /* Violet */

.sub-tab-btn[data-title*="HieuQua"].active .feather,
.sub-tab-btn[data-title*="NganhHang"].active .feather,
.sub-tab-btn[data-title*="HangRealtime"].active .feather { background-color: #f97316; } /* Orange */
/* === KẾT THÚC: NÂNG CẤP UI CHO SUB-TAB === */


.nav-link:hover,
.action-btn:hover,
.kpi-card:hover,
.content-card:hover,
.data-input-group:hover,
.toggle-filters-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.tdv-item-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}
.page-header__help-btn:hover {
    transform: scale(1.1) translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.settings-drawer { width: 400px; max-width: 90vw; transform: translateX(-100%); transition: transform 0.3s ease-in-out; }
.settings-drawer.open { transform: translateX(0); }
.close-drawer-btn { font-size: 2rem; line-height: 1; }
input[type="range"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: #e5e7eb; border-radius: 5px; outline: none; transition: background 0.2s; }
input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 20px; height: 20px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.2); }
input[type="range"]::-moz-range-thumb { width: 20px; height: 20px; background: #3b82f6; border-radius: 50%; cursor: pointer; border: 2px solid white; box-shadow: 0 0 5px rgba(0,0,0,0.2); }

.page-header { display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center; gap: 1rem; margin-bottom: 1.5rem; }
.page-header__title { font-size: 1.75rem; font-weight: 700; color: #1f2937; }
.content-card { background-color: white; border-radius: 0.75rem; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); padding: 1rem 1.5rem; margin-bottom: 2rem; border: 1px solid #e5e7eb; }
.content-card__header { display: flex; align-items: center; justify-content: space-between; font-size: 1.125rem; font-weight: 600; color: #374151; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid #e5e7eb; }

#notification { position: fixed; bottom: 20px; right: 20px; padding: 1rem 1.5rem; border-radius: 0.5rem; color: white; z-index: 1200; opacity: 0; transition: opacity 0.5s, transform 0.5s; transform: translateY(100px); }
#notification.show { opacity: 1; transform: translateY(0); }
.notification-success { background-color: #28a745; }
.notification-error { background-color: #dc3545; }
.placeholder-message { border: 2px dashed #f59e0b; background-color: #fffbeb; color: #b45309; padding: 2rem; border-radius: 0.75rem; text-align: center; font-weight: 600; }

[id$='-subtabs-nav'] { flex-wrap: wrap; }
.sortable { cursor: pointer; position: relative; user-select: none; }
.sort-indicator { display: inline-flex; flex-direction: column; align-items: center; justify-content: center; width: 1em; height: 1em; margin-left: 4px; vertical-align: middle; color: #9ca3af; transition: color 0.2s ease-in-out; }
.sortable .sort-indicator::before { content: '▲'; font-size: 0.8em; line-height: 0.5; opacity: 0.4; }
.sortable .sort-indicator::after { content: '▼'; font-size: 0.8em; line-height: 0.5; opacity: 0.4; }
.sortable:hover .sort-indicator { color: #374151; }
.sortable.sorted-asc .sort-indicator::before { opacity: 1; color: #3b82f6; }
.sortable.sorted-asc .sort-indicator::after { opacity: 0.4; }
.sortable.sorted-desc .sort-indicator::after { opacity: 1; color: #3b82f6; }
.sortable.sorted-desc .sort-indicator::before { opacity: 0.4; }

.data-input-group {
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 1rem;
    background-color: #f9fafb;
    display: flex;
    flex-direction: column;
    border-top: 4px solid #9ca3af;
}

#data-section > .content-card:nth-of-type(1) .data-input-group { border-top-color: #3b82f6; }
#data-section > .content-card:nth-of-type(3) .data-input-group { border-top-color: #8b5cf6; }
.data-input-group__label { font-weight: 600; color: #4b5563; margin-bottom: 0.75rem; }
.data-input-group__label--link { text-decoration: none; display: inline-block; }
.data-input-group__label--link:hover { text-decoration: underline; color: #2563eb; }
.data-input-group__label--link > .font-normal { font-weight: 400; }
.data-input-group__content { display: flex; flex-direction: column; gap: 0.5rem; flex-grow: 1; }
.data-input-group__file-trigger { cursor: pointer; background-color: #e5e7eb; color: #374151; padding: 0.5rem 1rem; border-radius: 0.375rem; font-size: 0.875em; font-weight: 500; white-space: nowrap; }
.data-input-group__file-trigger:hover { background-color: #d1d5db; }
.data-input-group__file-name { font-size: 0.875em; color: #6b7280; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
.data-input-group__link { color: #2563eb; text-decoration: none; font-size: 0.875em; }
.data-input-group__link:hover { text-decoration: underline; }
.data-input-group__status-wrapper { min-height: 1rem; margin-top: 0.25rem; }
.data-input-group__status-text { font-size: 0.875em; font-weight: 500; }
.data-input-group__status-text--default { color: #6b7280;
}
.data-input-group__status-text--success { color: #16a34a; }
.data-input-group__status-text--error { color: #dc2626; }
.data-textarea { width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.375rem; font-size: 0.875em; font-family: 'Inter', sans-serif; }
.data-textarea:focus { outline: 2px solid transparent; outline-offset: 2px; border-color: #3b82f6; box-shadow: 0 0 0 1px #3b82f6; }
.progress-bar-container { overflow: hidden; }
.progress-bar { background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent); background-size: 1rem 1rem; animation: progress-bar-stripes 1s linear infinite; }
@keyframes progress-bar-stripes { from { background-position: 1rem 0; } to { background-position: 0 0; } }

.table-bordered { border-collapse: collapse; }
.table-bordered th, .table-bordered td { border: 1px solid #e5e7eb; }
.table-striped tbody tr:nth-child(even) { background-color: #f9fafb; }
.table-footer { background-color: hsl(210, 20%, var(--header-lightness));
border-top: 2px solid #9ca3af; }
.cell-performance.is-below { background-color: hsl(0, 80%, var(--below-target-lightness)) !important; }
.header-bg-blue { background-color: hsl(217, 95%, var(--special-header-lightness)) !important; color: hsl(217, 80%, var(--header-text-lightness)) !important; }
.header-bg-green { background-color: hsl(145, 80%, var(--special-header-lightness)) !important; color: hsl(145, 70%, var(--header-text-lightness)) !important; }
.header-bg-yellow { background-color: hsl(45, 95%, var(--special-header-lightness)) !important; color: hsl(45, 80%, var(--header-text-lightness)) !important; }

.interactive-row {
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
    cursor: pointer; /* Ensure interactive rows are clickable */
}
.interactive-row:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    background-color: #eff6ff;
}
.interactive-row .employee-name-cell {
    cursor: pointer;
    color: #2563eb;
    transition: color 0.2s ease-out;
}
.interactive-row:hover .employee-name-cell {
    text-decoration: underline;
    color: #1d4ed8;
}

.header-group-1 { background-color: hsl(30, 90%, var(--header-lightness)); }
.header-group-2 { background-color: hsl(90, 90%, var(--header-lightness)); }
.header-group-3 { background-color: hsl(180, 90%, var(--header-lightness)); }
.header-group-4 { background-color: hsl(240, 90%, var(--header-lightness)); }
.header-group-5 { background-color: hsl(300, 90%, var(--header-lightness)); }
.header-group-6 { background-color: hsl(0, 90%, var(--header-lightness)); }
.header-group-7 { background-color: hsl(160, 80%, var(--header-lightness)) !important; }
.header-group-8 { background-color: hsl(280, 80%, var(--header-lightness)) !important; }
.header-group-9 { background-color: hsl(70, 80%, var(--header-lightness)) !important; }
.header-group-10 { background-color: hsl(190, 80%, var(--header-lightness)) !important; }
.header-group-11 { background-color: hsl(340, 80%, var(--header-lightness)) !important; }
.header-group-12 { background-color: hsl(20, 80%, var(--header-lightness)) !important; }

.income-positive { color: #16a34a; }
.income-negative { color: #dc2626; }
.line-clamp-2 { display: -webkit-box; -webkit-line-clamp: 2; line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
.department-header-tv { background-color: #e0e7ff;
color: #3730a3; }
.department-header-kho { background-color: #d1fae5; color: #065f46; }
.department-header-tt { background-color: #fef3c7; color: #92400e; }
.category-header-ict { background-color: #dbeafe; color: #1e40af; }
.category-header-phukien { background-color: #fee2e2; color: #991b1b; }
.category-header-giadung { background-color: #fef9c3; color: #854d0e; }
.category-header-ce { background-color: #e0f2fe; color: #0c4a6e; }
.category-header-baohiem { background-color: #f3e8ff; color: #6b21a8; }
.header-bg-indigo { background-color: #e0e7ff; color: #3730a3; }
.header-bg-purple { background-color: #f3e8ff; color: #6b21a8; }
.qdc-group-title { font-weight: 600; }
.qdc-group-ict { background-color: hsl(190, 80%, var(--special-header-lightness)); }
.qdc-group-vas { background-color: hsl(140, 80%, var(--special-header-lightness)); }
.qdc-group-giadung { background-color: hsl(0, 80%, var(--special-header-lightness)); }
.qdc-group-sim { background-color: hsl(40, 80%, var(--special-header-lightness)); }
.competition-header-doanhthu { border-color: #a78bfa; background-color: hsl(260, 90%, var(--bg-lightness)); }
.competition-header-soluong { border-color: #facc15; background-color: hsl(50, 90%, var(--bg-lightness)); }
.header-highlight-special { background-color: hsl(25, 90%, var(--header-lightness)) !important; }
.competition-row-below-100 td { background-color: #fee2e2; color: #991b1b; }

.header-highlight { background-color: hsl(50, 95%, var(--special-header-lightness)) !important; }

#dtnv-realtime-employee-selector-container .choices__inner { min-width: 300px; }
#dtnv-realtime-employee-selector-container .choices__list--single { min-width: 300px; }

.kpi-card-title { color: var(--kpi-title-color); opacity: 0.8; font-size: 1em; }
.kpi-card p[id$="-main"] { color: var(--kpi-main-color); font-size: var(--kpi-main-font-size);
transition: font-size 0.2s ease-in-out; }
.kpi-card p[id$="-sub"], .kpi-card p[id$="-sub1"], .kpi-card p[id$="-sub2"] { color: var(--kpi-sub-color); font-size: 1em; }

.kpi-percentage, .kpi-percentage-value { font-weight: 700; }
.kpi-sub-value { opacity: 0.9; }
#luyke-kpi-cards-container .kpi-card:nth-child(1), #realtime-kpi-cards-container .kpi-card:nth-child(1) { background-color: var(--kpi-card-1-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(2), #realtime-kpi-cards-container .kpi-card:nth-child(2) { background-color: var(--kpi-card-2-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(3), #realtime-kpi-cards-container .kpi-card:nth-child(3) { background-color: var(--kpi-card-3-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(4), #realtime-kpi-cards-container .kpi-card:nth-child(4) { background-color: var(--kpi-card-4-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(5) { background-color: var(--kpi-card-5-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(6) { background-color: var(--kpi-card-6-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(7) { background-color: var(--kpi-card-7-bg); }
#luyke-kpi-cards-container .kpi-card:nth-child(8) { background-color: var(--kpi-card-8-bg); }

#sknv-details-container .sknv-subtable-header th { font-size: 0.875em; font-weight: 600; background-color: #f3f4f6; }
.choices__inner { min-height: 42px; }
.choices__list--multiple .choices__item { background-color: #3b82f6; border-color:
#2563eb; }
.toggle-filters-btn { display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.5rem 1rem; border-radius: 0.5rem; background-color: #f3f4f6; color: #4b5563; font-weight: 500; font-size: 0.875em; cursor: pointer; margin-bottom: 1rem; border: 1px solid #e5e7eb; }
.toggle-filters-btn .icon { width: 1rem; height: 1rem; transition: transform 0.3s ease-in-out; }
.toggle-filters-btn.active .icon { transform: rotate(180deg); }
.highlight-trigger { background: none; border: none; cursor: pointer; color: #6b7280; }
.highlight-trigger:hover { color: #1d4ed8; }
.highlighted-row td { animation: pulse-bg 2s infinite; }
@keyframes pulse-bg { 0% { background-color: var(--highlight-color, #ffff99); } 50% { background-color: var(--highlight-color-light, #ffffcc); } 100% { background-color: var(--highlight-color, #ffff99); } }

.action-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    font-size: 0.875em;
    cursor: pointer;
    border: 1px solid transparent;
}
.action-btn--composer {
background-color: #ede9fe; color: #5b21b6; border-color: #c4b5fd; }
.action-btn--composer:hover { background-color: #d8b4fe; }
.action-btn--export { background-color: #dcfce7; color: #166534; border-color: #86efac; }
.action-btn--export:hover { background-color: #bbf7d0; }
.action-btn--capture { background-color: #dbeafe; color: #1e40af; border-color: #93c5fd; }
.action-btn--capture:hover { background-color: #bfdbfe; }
.action-btn--save { background-color: #16a34a; color: white; }
.action-btn--save:hover { background-color: #15803d; }
.action-btn--copy { background-color: #2563eb; color: white; }
.action-btn--copy:hover { background-color: #1d4ed8; }
.page-header__help-btn { background-color: #fee2e2; color: #991b1b; border-radius: 9999px; width: 2rem; height: 2rem; display: inline-flex; align-items: center; justify-content: center; border: none; }

.modal { position: fixed; inset: 0; z-index: 1000; display: flex; align-items: center; justify-content: center; }
.modal.hidden { display: none; }
.modal__overlay { position: absolute; inset: 0; background-color: rgba(17, 24, 39, 0.6); backdrop-filter: blur(4px); cursor: pointer; }
.modal__container { position: relative; z-index: 1001; background-color: white; border-radius: 0.75rem; box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1); width: 90%; max-width: 600px; max-height: 90vh; display: flex; flex-direction: column; }

#force-update-modal .modal__overlay { cursor: not-allowed; }

.modal__container--large {
    max-width: 900px;
}
.modal__header { padding: 1rem 1.5rem; border-bottom: 1px solid #e5e7eb; display: flex; justify-content: space-between; align-items: center; flex-shrink: 0; }
.modal__title { font-size: 1.25rem; font-weight: 600; color: #1f2937; }
.modal__close-btn { font-size: 1.75rem; line-height: 1; color: #6b7280; background: none; border: none; cursor: pointer; }
.modal__close-btn:hover { color: #111827; }
.modal__content { padding: 1.5rem; overflow-y: auto; flex-grow: 1; }
.modal__content h4 { font-size: 1.125rem; font-weight: 600; color: #1e3a8a; margin-bottom: 0.75rem; }
.modal__content p { margin-bottom: 0.75rem; color: #374151; line-height: 1.6; }
.modal__content ul { list-style-type: disc; list-style-position: inside; margin-left: 0.5rem; }
.modal__content ul > *
+ * { margin-top: 0.5rem; }
.modal__footer { padding: 1rem 1.5rem; border-top: 1px solid #e5e7eb; background-color: #f9fafb; display: flex; justify-content: flex-end; gap: 0.75rem; flex-shrink: 0; }

.composer { display: flex; flex-direction: column; gap: 1.5rem; }
.composer__editor { flex-grow: 1; }
.composer__tags { width: 100%; }
.composer__label { display: block; font-weight: 500; color: #374151; margin-bottom: 0.5rem; }
.composer__textarea { width: 100%; border: 1px solid #d1d5db; border-radius: 0.5rem; padding: 0.75rem; font-size: 0.875em; resize: vertical; }
.composer__textarea:focus { border-color: #3b82f6; box-shadow: 0 0 0 1px #3b82f6; outline: none; }
.composer__nav { display: flex; border-bottom: 1px solid #e5e7eb; margin-bottom: 1rem; }
.composer__tab-btn { padding: 0.5rem 1rem; border: none; background-color: transparent; cursor: pointer; font-weight: 500; color: #6b7280; border-bottom: 2px solid transparent; margin-bottom: -1px; font-size: 0.875em; }
.composer__tab-btn.active { color: #3b82f6; border-bottom-color: #3b82f6; }
.composer__tab-pane {
display: none; }
.composer__tab-pane.active { display: block; }
.composer__tag-group { margin-bottom: 1rem; }
.composer__tag-group:last-child { margin-bottom: 0; }
.composer__tag-group-title { font-weight: 600; font-size: 0.875em; color: #4b5563; margin-bottom: 0.75rem; border-bottom: 1px solid #e5e7eb; padding-bottom: 0.5rem; }
.composer__tag-btn { background-color: #e0e7ff; color: #3730a3; border: 1px solid #c7d2fe; border-radius: 9999px; padding: 0.25rem 0.75rem; font-size: 0.8rem; font-weight: 500; cursor: pointer; margin: 0.25rem; }
.composer__icon-btn { background-color: #f3f4f6; color: #1f2937; border: 1px solid #d1d5db; border-radius: 9999px; padding: 0.25rem 0.75rem; font-size: 1.1rem; font-weight: 500; cursor: pointer; margin: 0.25rem; line-height: 1; }
.composer__filter-group { margin-bottom: 1rem;
padding-bottom: 1rem; border-bottom: 1px solid #e5e7eb; }
.composer__select { width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.375rem; background-color: white; }
@media (min-width: 768px) { .composer { flex-direction: row; } .composer__tags { width: 350px; flex-shrink: 0; border-left: 1px
solid #e5e7eb; padding-left: 1.5rem; } }

.view-switcher { display: flex; align-items: center; padding: 0.25rem; background-color: #e5e7eb; border-radius: 0.5rem; }
.view-switcher__btn { padding: 0.5rem 1rem; border: none; background-color: transparent; border-radius: 0.375rem; font-weight: 500; color: #4b5563; cursor: pointer; }
.view-switcher__btn.active { background-color: white; color: #3b82f6; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1); }
.infographic-card { border: 1px solid #e5e7eb; border-radius: 0.5rem; overflow: hidden; }
.infographic-card__header { padding: 0.75rem 1rem; font-weight: 700; }
.infographic-card__header--completed { background-color: #dcfce7; color: #166534; }
.infographic-card__header--pending { background-color: #fee2e2; color: #991b1b; }
.infographic-card__body { padding: 1rem; background-color: #f9fafb; }
.infographic-card__item { border-bottom: 1px dashed #d1d5db; padding: 0.75rem 0; }
.infographic-card__item:last-child { border-bottom: none; }
.infographic-card__title { font-weight: 600; color: #1f2937; margin-bottom: 0.5rem; }
.infographic-card__metrics { display: grid; grid-template-columns: repeat(2, minmax(0, 1fr)); gap: 0.5rem 1rem; font-size:
0.875em; }
.metric-label { color: #6b7280; }
.metric-value { font-weight: 600; color: #111827; text-align: right; }
.metric-value.is-negative { color: #ef4444; }
.metric-value.is-positive { color: #22c55e; }

.rt-infographic-container { background-color: #f9fafb; border-radius: 0.75rem; border: 1px solid #e5e7eb; padding: 1.5rem; }
.rt-infographic-header .employee-name { font-size: 1.5rem; font-weight: 800; color: #111827; }
.rt-infographic-header .employee-title { font-size: 1rem; font-weight: 500; color: #6b7280; }
.rt-infographic-summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 1rem; margin-top: 1.5rem; }
.rt-infographic-summary-card { background-color: white; border-radius: 0.5rem; padding: 1rem; text-align: center; border: 1px solid #e5e7eb; }
.rt-infographic-summary-card .label { font-size: 0.875em; color: #4b5563; font-weight: 500; }
.rt-infographic-summary-card .value { font-size: 1.75rem; font-weight: 700; color: #3b82f6; margin-top: 0.25rem; }
.rt-infographic-summary-card .value.is-positive { color: #2563eb; }
.rt-infographic-summary-card .value.is-negative { color: #dc2626; }
.rt-infographic-grid { display: grid; grid-template-columns: repeat(1, minmax(0, 1fr)); gap: 1.5rem; margin-top: 1.5rem; }
@media
(min-width: 1024px) { .rt-infographic-grid { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
.rt-infographic-section h4 { font-size: 1.125rem; font-weight: 700; color: #1f2937; margin-bottom: 1rem; }
.rt-progress-bar-item { margin-bottom: 0.75rem; }
.rt-progress-bar-label { display: flex; justify-content: space-between; font-size: 0.875em; font-weight: 500; margin-bottom: 0.25rem; }
.rt-progress-bar-container { background-color: #e5e7eb; border-radius: 9999px; height: 0.75rem; overflow: hidden; }
.rt-progress-bar { background-color: #22c55e; height: 100%; border-radius: 9999px; transition: width 0.5s ease-in-out; }
.rt-customer-accordion { max-height: 400px; overflow-y: auto; border: 1px solid #e5e7eb; border-radius: 0.5rem; }
.rt-customer-header { background-color: white; padding: 0.75rem 1rem; border-bottom: 1px solid #e5e7eb; cursor: pointer; display: flex; justify-content: space-between; align-items: center; font-weight: 600; list-style: none; }
.rt-customer-header::-webkit-details-marker { display: none; }
.rt-customer-header:hover { background-color: #f9fafb; }
.rt-customer-header .arrow { transition: transform 0.3s; }
.rt-customer-header .product-count { color: #dc2626; font-weight: bold; }
details[open] > summary
.arrow { transform: rotate(180deg); }
.rt-customer-details { background-color: #f9fafb; padding: 1rem; }
.rt-customer-details table { font-size: 0.8rem; }
.preview-content { background-color: #f3f4f6; padding: 1rem; border-radius: 0.5rem; white-space: pre-wrap; word-wrap: break-word; font-size: 0.875em; line-height: 1.6; color: #1f2937; font-family: 'Inter', sans-serif; }

/* === BẮT ĐẦU: BỐ CỤC CHO THI ĐUA VÙNG & THI ĐUA LŨY KẾ (V5.9) === */
.tdv-rows-container { display: flex; flex-direction: column; gap: 1.5rem; }
#subtab-luyke-thi-dua .tdv-row-body {
    display: grid;
    grid-template-columns: 1fr; /* Mặc định 1 cột cho mobile */
    gap: 1rem;
}
@media (min-width: 768px) { /* 2 cột cho tablet trở lên */
    #subtab-luyke-thi-dua .tdv-row-body {
        grid-template-columns: repeat(2, 1fr);
    }
}
/* === END: BỐ CỤC MỚI === */

.tdv-infographic-card {
    background-color: transparent;
    border: none;
    box-shadow: none;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.tdv-header { text-align: center; margin-bottom: 2rem; }
.tdv-supermarket-name { font-size: 2em; font-weight: bold; color: #005f73; }
.tdv-total-prize-container { margin-top: 0.5rem; font-size: 1.5em; font-weight: bold; }
.tdv-total-prize-label { color: #6b7280; font-weight: normal; }
.tdv-total-prize-value { color: #d90429; margin-left: 0.5rem; }

.tdv-summary-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-top: 1.5rem; margin-bottom: 2rem; }
@media (min-width: 768px) { .tdv-summary-grid { grid-template-columns: repeat(5, 1fr); } }
.tdv-summary-item { background-color: #ffffff; border-radius: 8px;
padding: 1rem; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.05); border: 1px solid #e5e7eb; }
/* === START: Sửa màu và font-weight cho .tdv-summary-value === */
.tdv-summary-value {
    display: block;
    font-size: 1.75em;
    font-weight: 800; /* Tăng độ đậm */
    color: #005f73; /* Đổi màu xanh đậm hơn */
}
/* === END: Sửa màu === */
.tdv-summary-label { display: block; font-size: 0.9em; color: #4a5568; margin-top: 0.25rem; }
/* === START: Thêm class màu cho tỷ lệ đạt === */
.tdv-tyledat-high { color: #2563eb !important; } /* blue-600 */
.tdv-tyledat-low { color: #dc2626 !important; } /* red-600 */
/* === END: Thêm class màu === */

.tdv-row { background-color: #fdfdfd; border-radius: 8px; padding: 1rem; border: 1px solid #dee2e6; }
.tdv-row-title { font-size: 1.2em; font-weight: bold; padding-bottom: 0.75rem; margin-bottom: 1rem; border-bottom: 2px solid; line-height: 1.3; }
.tdv-row-title--prize { border-color: #0d6efd; color: #0d6efd; }
.tdv-row-title--soon-prize { border-color: #e9c46a; color: #e9c46a; }
.tdv-row-title--effort { border-color: #6c757d; color: #6c757d; }
.tdv-row-subtitle { font-size: 0.8em; font-weight: normal; color: #d90429; }

/* === START: Sửa layout 4 cột cho Thi đua vùng (SỬA LẠI SELECTOR) === */
/* *** FIX: Corrected CSS selector to use #subtab-luyke-thidua-vung *** */
#subtab-luyke-thidua-vung .tdv-row-body {
    display: grid;
    grid-template-columns: repeat(1, 1fr); /* 1 cột cho mobile */
    gap: 1rem;
}
@media (min-width: 768px) { /* 2 cột cho tablet */
    #subtab-luyke-thidua-vung .tdv-row-body {
        grid-template-columns: repeat(2, 1fr);
    }
}
@media (min-width: 1280px) { /* 4 cột cho desktop lớn */
    #subtab-luyke-thidua-vung .tdv-row-body {
        grid-template-columns: repeat(4, 1fr);
    }
}
/* === END: Sửa layout === */
.tdv-row-body--effort { display: block; }

.tdv-item-card { background: #fff; border: 1px solid #e0e0e0; border-radius: 6px;
padding: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.05); overflow: hidden; }
.tdv-item-card__title { font-weight: bold;
margin: 0 0 10px 0; color: #333; }
.tdv-progress-bar-container {
    width: 100%;
    background-color: #e9ecef;
    border-radius: 20px;
    height: 28px;
    position: relative;
    font-size: 0.85em;
    font-weight: bold;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}
.tdv-progress-bar { height: 100%; transition: width 0.5s ease; position: absolute; top: 0; left: 0; }
.tdv-progress-bar--blue { background-color: #0d6efd; }
.tdv-progress-bar--yellow { background-color: #e9c46a; }
.tdv-progress-bar__text {
    position: relative;
    z-index: 1;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.4);
    color: white;
}
.tdv-item-card__details { font-size: 0.85em; color: #555; margin-top: 8px; display: grid; grid-template-columns: repeat(3, 1fr); gap: 5px; }
.tdv-item-card__details span { display: block; }
.tdv-item-card__details strong { color: #000; }
.tdv-item-card__prize { grid-column: 1 / -1; font-weight:
bold !important; color: #d90429; margin-top: 4px; }

.tdv-effort-subgroup { margin-bottom: 1rem; }
.tdv-effort-subgroup:last-child { margin-bottom: 0; }
.tdv-effort-subgroup__title { font-weight: bold; margin: 0 0 10px 0; padding-bottom: 5px; border-bottom: 1px solid #dee2e6; }
.tdv-effort-subgroup__title--potential { color: #fd7e14; }
.tdv-effort-subgroup__title--major { color: #6c757d; }
.tdv-effort-list { display: flex; flex-wrap: wrap; gap: 8px; }
.tdv-effort-item { background-color: #f1f3f5; color: #495057; padding: 5px 10px; border-radius: 15px; font-size: 0.9em; }

#video-container iframe {
    aspect-ratio: 16 / 9;
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
}

#feedback-list-container {
    max-height: 600px;
    overflow-y: auto;
}
#goal-drawer .choices__inner {
    min-width: 250px;
}

#goal-drawer .choices__list--dropdown,
#goal-drawer .choices__list[aria-expanded] {
    min-width: 100%;
    width: auto;
    word-break: normal;
}

#goal-drawer .choices__list--multiple .choices__item {
    display: inline-flex;
    align-items: center;
    background-color: #3b82f6;
    border: 1px
solid #2563eb;
    color: white;
    border-radius: 9999px;
    padding: 2px 8px;
    font-size: 0.8em;
    font-weight: 500;
    margin: 2px 4px 2px 0;
}
#goal-drawer .choices__inner {
    height: auto !important;
    min-height: 42px !important;
    display: flex !important;
    flex-wrap: wrap !important;
}
.header-qr-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  border: 2px solid #ef4444; /* red-500 */
  padding: 4px;
  border-radius: 8px;
  background-color: white;
}
.header-qr-container span {
  font-size: 0.75rem; /* 12px */
  font-weight: 600;
  color: #b91c1c; /* red-700 */
}
.header-qr-image {
  width: 50px;
  height: 50px;
  background-color: #f3f4f6;
  border-radius: 4px;
}
.selection-item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
}
.selection-item:hover {
    background-color: #f3f4f6; /* gray-100 */
}
.selection-item input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
    margin-right: 0.75rem;
}
.selection-item label {
    flex-grow: 1;
    cursor: pointer;
}
.settings-trigger-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: #9ca3af; /* gray-400 */
    transition: color 0.2s ease-in-out, transform 0.2s ease-in-out;
    padding: 2px;
}
.settings-trigger-btn:hover {
    color: #3b82f6; /* blue-500 */
    transform: rotate(45deg);
}
.settings-trigger-btn svg {
    width: 18px;
    height: 18px;
    display: block;
}

#version-marquee-container {
    flex-grow: 1;
    margin: 0 1.5rem;
    overflow: hidden;
    position: relative;
    background-color: #eef2ff;
    border: 1px solid #c7d2fe;
    border-radius: 9999px;
    cursor: pointer;
    height: 38px;
}
#version-marquee-container:hover .marquee-text {
    animation-play-state: paused;
    color: #312e81;
}
.marquee-text {
    position: absolute;
    white-space: nowrap;
    will-change: transform;
    animation: marquee-scroll 25s linear infinite;
    font-weight: 600;
    color: #4338ca;
    line-height: 36px;
}
@keyframes marquee-scroll {
    from {
        transform: translateX(100%);
    }
    to {
        transform: translateX(-100%);
    }
}

.competition-summary-counter strong {
    font-size: 1.15rem !important;
    font-weight: 800 !important;
    white-space: nowrap;
}
.competition-summary-counter .text-blue-600 {
    color: #2563eb !important;
}
.competition-summary-counter .text-red-600 {
    color: #dc2626 !important;
}

.column-toggle-btn {
    padding: 4px 12px;
    font-size: 12px;
    font-weight: 500;
    border: 1px solid;
    border-radius: 9999px;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    user-select: none;
}

.column-toggle-btn.active {
    background-color: #3b82f6; /* blue-500 */
    color: white;
    border-color: #3b82f6;
}

.column-toggle-btn:not(.active) {
    background-color: #e5e7eb; /* gray-200 */
    color: #374151; /* gray-700 */
    border-color: #d1d5db; /* gray-300 */
}

.column-toggle-btn:not(.active):hover {
    background-color: #d1d5db; /* gray-300 */
}

.draggable-header {
    cursor: move;
    cursor: grab;
}
.draggable-header:active {
    cursor: grabbing;
}
.sortable-ghost {
    opacity: 0.4;
    background-color: #c7d2fe; /* indigo-200 */
}

.column-toggle-btn.draggable-tag {
    cursor: grab;
}
.column-toggle-btn.draggable-tag:active {
    cursor: grabbing;
}
.column-toggle-btn.draggable-tag:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.drag-handle-icon {
    color: #6b7280;
    transition: color 0.2s ease-in-out;
}
.column-toggle-btn.draggable-tag:hover .drag-handle-icon {
    color: #1f2937;
}
.sortable-drag {
    opacity: 0.95;
    transform: rotate(-2deg);
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
}

.action-btn,
.nav-link,
.view-switcher__btn,
.toggle-filters-btn,
.page-header__help-btn
{
    display: inline-flex;
    align-items: center;
    /* justify-content: center; */ /* Bị loại bỏ để sửa lỗi sidebar */
    gap: 0.5rem;
}

.feather {
    width: 1.1rem;
    height: 1.1rem;
    stroke-width: 1.5;
    flex-shrink: 0;
}

#sidebar .feather {
    width: 1.5rem;
    height: 1.5rem;
    stroke-width: 2;
}

.page-header__help-btn .feather {
    width: 1.25rem;
    height: 1.25rem;
}

.luyke-detail-header h3 {
    font-size: 1.75rem; font-weight: 800; color: #111827; text-align: center;
}
.luyke-detail-progress-item {
    display: flex; flex-direction: column; gap: 4px;
}
.luyke-detail-progress-label {
    display: flex; justify-content: space-between; align-items: baseline; font-size: 0.875rem;
}
.luyke-detail-progress-values {
    display: flex; justify-content: space-between; font-size: 0.75rem; color: #4b5563;
}
.luyke-detail-chart-container {
    position: relative; height: 350px; width: 100%;
}
.customer-accordion-luyke summary {
    display: flex; flex-wrap: wrap; align-items: center; gap: 1rem; padding: 0.5rem 1rem; cursor: pointer; list-style: none;
}
.customer-accordion-luyke summary:hover {
    background-color: #f9fafb;
}
.customer-accordion-luyke .customer-name-small {
    font-weight: 600;
font-size: 0.9rem; color: #1f2937; flex-grow:
1; min-width: 120px;
}
.customer-accordion-luyke .order-metrics {
    display: flex; align-items: center; gap: 1rem; flex-shrink: 0; font-size: 0.75rem;
}
.customer-accordion-luyke .order-metrics span {
    white-space: nowrap;
}
.customer-accordion-luyke .accordion-arrow {
    margin-left: auto; color: #9ca3af; transition: transform 0.2s ease-in-out;
}
.customer-accordion-luyke details[open] > summary .accordion-arrow {
    transform: rotate(180deg);
}
.customer-accordion-luyke .product-list-scrollable {
    display: block;
    max-height: 200px;
    overflow-y: auto;
}
.customer-accordion-luyke .product-list-table {
    width: 100%;
}
.customer-accordion-luyke .qd-below-target { color: #b91c1c; }
.customer-accordion-luyke .qd-above-target { color: #1d4ed8; }

/* === START: SKNV INFOGRAPHIC CARD STYLES (V6.0) === */
.sknv-summary-grid {
    display: grid;
    grid-template-columns: 1fr; /* Default to 1 column for mobile */
    gap: 1.5rem;
}

@media (min-width: 768px) { /* 2 columns for tablets */
    .sknv-summary-grid {
        grid-template-columns: repeat(2, 1fr);
}
}

@media (min-width: 1280px) { /* 4 columns for large desktops */
    .sknv-summary-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}

.sknv-card {
    background-color: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 0.75rem;
    padding: 1rem; /* UPDATED: Compact padding */
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); /* UPDATED: Softer shadow */
    display: flex;
    flex-direction: column;
    gap: 0.75rem; /* UPDATED: Reduced gap */
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
    cursor: pointer;
    position: relative; /* Added for medal positioning */
}
.sknv-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.04);
}

.sknv-card__header {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.sknv-card__avatar {
    width: 48px;
    height: 48px;
    border-radius: 9999px;
    background-color: #eef2ff;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.sknv-card__avatar svg {
    width: 24px;
    height: 24px;
    color: #4338ca;
}

.sknv-card__info {
    flex-grow: 1;
    min-width: 0;
}
.sknv-card__info .name {
    font-weight: 700;
    color: #111827;
    line-height: 1.25;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    display: flex;
    align-items: center;
}

.sknv-card__info .id {
    font-size: 0.875rem;
    color: #6b7280;
}

.sknv-card__main-kpi {
    text-align: center;
    margin: 0.25rem 0; /* UPDATED: Reduced margin */
}

.sknv-card__main-kpi .value {
    font-size: 2.5rem; /* UPDATED: Reduced font size */
    font-weight: 800;
    line-height: 1;
    color: #4b5563;
}

.sknv-card__main-kpi .total {
    font-size: 1.25rem; /* UPDATED */
    font-weight: 600;
    color: #9ca3af;
}

.sknv-card__main-kpi .label {
    display: block;
    font-size: 0.875rem;
    color: #6b7280;
    margin-top: 0.25rem;
    font-weight: 500;
}

.sknv-card-kpi-strong { border-top: 4px solid #16a34a; } /* UPDATED: Added top border */
.sknv-card-kpi-medium { border-top: 4px solid #f59e0b; } /* UPDATED: Added top border */
.sknv-card-kpi-weak { border-top: 4px solid #ef4444; } /* UPDATED: Added top border */
.sknv-card-kpi-strong .value { color: #16a34a; }
.sknv-card-kpi-medium .value { color: #f59e0b; }
.sknv-card-kpi-weak .value { color: #ef4444; }

.sknv-card__sub-kpi-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem; /* UPDATED: Reduced gap */
    border-top: 1px solid #f3f4f6;
    padding-top: 0.75rem; /* UPDATED: Reduced padding */
}

.sknv-card__sub-kpi-item {
    background-color: #f9fafb;
    border-radius: 0.5rem;
    padding: 0.5rem; /* UPDATED: Reduced padding */
    text-align: center;
    transition: background-color 0.2s ease-in-out;
}

/* === START: NEW SUB-KPI LAYOUT === */
.sknv-card__sub-kpi-header {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
}
.sknv-card__sub-kpi-header .feather {
    width: 1rem;
    height: 1rem;
    stroke-width: 2;
    color: #6b7280;
}
.sknv-card__sub-kpi-header .label {
    font-size: 0.7rem;
    font-weight: 600;
    color: #4b5563;
}
.sknv-card__sub-kpi-item .value {
    font-size: 0.875rem;
    font-weight: 700;
    margin-top: 2px;
    display: block; /* Ensures it's on a new line */
}
/* === END: NEW SUB-KPI LAYOUT === */

.sknv-card__sub-kpi-item.strong { border-bottom: 3px solid #22c55e; }
.sknv-card__sub-kpi-item.medium { border-bottom: 3px solid #f59e0b; }
.sknv-card__sub-kpi-item.weak { border-bottom: 3px solid #ef4444; }
/* === END: SKNV INFOGRAPHIC CARD STYLES === */

/* === START: SKNV Department Grouping Styles (V6.1) === */
.sknv-department-group {
    margin-bottom: 2.5rem; /* Space between department groups */
}

.sknv-department-group:last-child {
    margin-bottom: 1rem; /* Less space for the last group */
}

.sknv-department-header {
    font-size: 1.6rem;
    font-weight: 700;
    color: #1f2937; /* Dark gray for general headers */
    padding-bottom: 0.75rem;
    margin-bottom: 1.5rem;
    border-bottom: 3px solid #d1d5db; /* Light gray border */
    position: relative;
    padding-left: 0.5rem;
}

.sknv-department-header--priority {
    color: #2563eb; /* Blue for priority department */
    border-bottom-color: #3b82f6; /* Matching blue border */
    background-color: #e0f2fe; /* Light blue background */
    padding: 0.75rem 1rem;
    border-radius: 0.5rem 0.5rem 0 0;
    margin-bottom: 0; /* Remove bottom margin to connect with cards */
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.sknv-department-header--priority::before {
    content: '\f02e'; /* Font Awesome 'flag' icon - if Font Awesome is available */
    font-family: 'Font Awesome 5 Free'; /* Specify font family */
    font-weight: 900; /* For solid icon style */
    font-size: 1.25rem;
    color: #2563eb;
}

/* Adjust grid gap and padding for priority department to integrate better */
.sknv-department-header--priority + .sknv-summary-grid {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    margin-top: 0; /* Remove top margin */
    padding-top: 1.5rem; /* Add padding inside grid */
    border: 1px solid #c7d2fe;
    background-color: #f3f4f6; /* Slightly different background */
    padding-left: 1rem;
    padding-right: 1rem;
    padding-bottom: 1rem;
    border-top: none;
}
/* === END: SKNV Department Grouping Styles === */

/* === START: SKNV DETAIL VIEW & MEDALS (V6.4) === */
/* NEW: Wrapper for compact detail view */
#sknv-detail-capture-area {
    max-width: 1100px;
    margin: 0 auto;
}
.sknv-detail-header-card {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    padding: 1rem; /* UPDATED: Compact padding */
    background-color: #eff6ff; /* blue-50 */
    border: 1px solid #dbeafe; /* blue-200 */
    border-top: 4px solid #3b82f6; /* blue-500 */
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
}
.sknv-detail-avatar {
    width: 64px;
    height: 64px;
    border-radius: 9999px;
    background-color: #dbeafe; /* blue-200 */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}
.sknv-detail-avatar svg {
    width: 32px;
    height: 32px;
    color: #1e40af; /* blue-800 */
}
.sknv-detail-info .name {
    color: #1e40af; /* UPDATED: Dark blue color */
}
.sknv-detail-info .department,
.sknv-detail-info .kpi-summary {
    color: #1f2937; /* dark text */
}
.sknv-detail-info .kpi-summary .font-bold {
    color: #1d4ed8; /* darker blue */
}
.sknv-detail-info .name {
    font-size: 1.5rem;
    font-weight: 800;
    line-height: 1.2;
}
.sknv-detail-info .department {
    font-size: 1rem;
    font-weight: 500;
}
.sknv-detail-info .kpi-summary {
    margin-top: 0.5rem;
    font-weight: 600;
}

.sknv-detail-card-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem; /* UPDATED: Compact padding */
    color: #ffffff;
}
.sknv-detail-card-header .header-icon {
    width: 20px;
    height: 20px;
}
.sknv-header-blue { background-color: #2563eb; }
.sknv-header-green { background-color: #16a34a; }
.sknv-header-orange { background-color: #f97316; }
.sknv-header-yellow { background-color: #ca8a04; }
.sknv-header-indigo { background-color: #4f46e5; }
.sknv-header-purple { background-color: #7e22ce; }

.sknv-detail-grid-body {
    padding: 0.75rem 1rem; /* UPDATED: Compact padding */
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); /* UPDATED */
    gap: 0.75rem; /* UPDATED */
}
.sknv-detail-metric-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 0.5rem; /* UPDATED: Compact padding */
    background-color: #f9fafb;
    border-radius: 0.5rem;
    border: 1px solid #f3f4f6;
    transition: all 0.2s ease-in-out;
}
.sknv-detail-metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
}
.sknv-detail-metric-card .label {
    font-weight: 600;
    font-size: 0.8rem; /* UPDATED */
    color: #374151;
}
.sknv-detail-metric-card .value {
    font-weight: 700; /* UPDATED */
    font-size: 1.375rem; /* UPDATED: Reduced font size */
    line-height: 1.2;
    color: #111827;
    margin: 0.25rem 0;
}
.sknv-detail-metric-card .average {
    font-size: 0.7rem; /* UPDATED */
    color: #6b7280;
    font-style: italic;
}
.sknv-detail-metric-card .evaluation-badge {
    margin-top: 0.5rem;
    font-weight: 700;
    padding: 2px 8px;
    border-radius: 9999px;
    font-size: 0.7rem; /* UPDATED */
}
.evaluation-badge.text-green-600 { background-color: #dcfce7; }
.evaluation-badge.text-yellow-600 { background-color: #fef9c3; }

.medal-container {
    position: absolute; /* Changed for positioning */
    top: -8px; /* Position it slightly outside the card */
    left: 12px;
    width: 32px; /* Reduced size */
    height: 32px;
    flex-shrink: 0;
}
.medal-container svg {
    width: 100%;
    height: 100%;
    display: block;
    filter: drop-shadow(0 2px 2px rgba(0,0,0,0.3)); /* Add a nice shadow */
}

/* NEW: Compact tables in detail view */
#sknv-details-container .sknv-subtable-header {
    font-size: 0.8rem;
}
#sknv-details-container .table-bordered td,
#sknv-details-container .table-bordered th {
    padding: 0.5rem;
}
/* === END: SKNV DETAIL VIEW & MEDALS === */

/* === START: LOGIN MODAL STYLES (V6.7) === */
#login-modal .modal__overlay {
    cursor: not-allowed;
}

#login-modal .modal__container {
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
}

#login-modal input[type="email"]:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.4);
    outline: none;
}
/* === END: LOGIN MODAL STYLES === */

/* === START: Declaration Accordion Styles (v6.11) === */
.declaration-group {
    border-bottom: 1px solid #e5e7eb; /* gray-200 */
}
.declaration-group:last-child {
    border-bottom: none;
}
.declaration-group summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0.5rem;
    cursor: pointer;
    font-size: 1.125rem; /* text-lg */
    font-weight: 700; /* font-bold */
    color: #374151; /* gray-700 */
    list-style: none; /* Hide default marker */
}
.declaration-group summary::-webkit-details-marker {
    display: none; /* Hide default marker for Chrome */
}
.declaration-group summary:hover {
    background-color: #f9fafb; /* gray-50 */
}
.declaration-group summary::after {
    content: '+';
    font-size: 1.5rem;
    font-weight: 500;
    color: #6b7280; /* gray-500 */
    transition: transform 0.2s ease-in-out;
}
.declaration-group[open] > summary::after {
    transform: rotate(45deg);
    content: '×';
}
.declaration-content {
    padding: 1rem 0.5rem 1.5rem 0.5rem;
}
/* === END: Declaration Accordion Styles === */
--- END FILE: ./dashboard.css ---

--- START FILE: ./event-listeners/listeners-actions.js ---
// Version 1.1 - Fix capture/export logic for sknv-thidua view switcher
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - ACTIONS
// Chứa logic đăng ký sự kiện cho các nút hành động chung (Chụp ảnh, Xuất Excel).

import { ui } from '../ui.js';
import { utils } from '../utils.js';
import { captureService } from '../modules/capture.service.js';

export function initializeActionListeners() {
    ['luyke', 'sknv', 'realtime'].forEach(prefix => {
        const captureBtn = document.getElementById(`capture-${prefix}-btn`);
        if (captureBtn) {
            captureBtn.addEventListener('click', () => {
                const navId = prefix === 'luyke' ? 'luyke-subtabs-nav' : (prefix === 'sknv' ? 'employee-subtabs-nav' : 'realtime-subtabs-nav');
                const contentContainerId = prefix === 'luyke' ? 'luyke-subtabs-content' : (prefix === 'sknv' ? 'employee-subtabs-content' : 'realtime-subtabs-content');

                const activeTabButton = document.querySelector(`#${navId} .sub-tab-btn.active`);
                if (!activeTabButton) {
                    ui.showNotification('Không tìm thấy tab đang hoạt động.', 'error');
                    return;
                }
                
                const title = activeTabButton.dataset.title || 'BaoCao';
                let elementToCapture;

                // *** START BUG 4 FIX (v1.1) ***
                // Logic đặc biệt cho tab Thi đua NV LK có view switcher
                if (prefix === 'sknv' && activeTabButton.dataset.target === 'subtab-hieu-qua-thi-dua-lk') {
                    const activeViewBtn = document.querySelector('#sknv-thidua-view-selector .view-switcher__btn.active');
                    const viewType = activeViewBtn ? activeViewBtn.dataset.view : 'program';
                    
                    if (viewType === 'program') {
                        elementToCapture = document.getElementById('competition-report-container-lk');
                    } else { // 'employee'
                        elementToCapture = document.getElementById('pasted-competition-report-container');
                    }
                } 
                // Logic đặc biệt cho tab Thi đua Vùng (Lũy kế)
                else if (prefix === 'luyke' && activeTabButton.dataset.target === 'subtab-luyke-thidua-vung') {
                    elementToCapture = document.getElementById('thidua-vung-infographic-container');
                } 
                // Logic gốc cho tất cả các tab khác
                else {
                    elementToCapture = document.querySelector(`#${contentContainerId} .sub-tab-content:not(.hidden)`);
                }
                // *** END BUG 4 FIX (v1.1) ***

                if (!elementToCapture || elementToCapture.children.length === 0) {
                    ui.showNotification('Không có nội dung để chụp.', 'error');
                    return;
                }

                captureService.captureDashboardInParts(elementToCapture, title);
            });
        }

        const exportBtn = document.getElementById(`export-${prefix}-btn`);
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                const navId = prefix === 'sknv' ? 'employee-subtabs-nav' : `${prefix}-subtabs-nav`;
                const contentContainerId = prefix === 'sknv' ? 'employee-subtabs-content' : `${prefix}-subtabs-content`;
                
                const activeTabButton = document.querySelector(`#${navId} .sub-tab-btn.active`);
                let activeTabContent; // Thay đổi từ const sang let

                // *** START BUG 4 FIX (v1.1) ***
                // Logic đặc biệt cho tab Thi đua NV LK có view switcher
                if (prefix === 'sknv' && activeTabButton?.dataset.target === 'subtab-hieu-qua-thi-dua-lk') {
                    const activeViewBtn = document.querySelector('#sknv-thidua-view-selector .view-switcher__btn.active');
                    const viewType = activeViewBtn ? activeViewBtn.dataset.view : 'program';

                    if (viewType === 'program') {
                        activeTabContent = document.getElementById('competition-report-container-lk');
                    } else { // 'employee'
                        activeTabContent = document.getElementById('pasted-competition-report-container');
                    }
                } 
                // Logic gốc cho tất cả các tab khác
                else {
                    activeTabContent = document.querySelector(`#${contentContainerId} .sub-tab-content:not(.hidden)`);
                }
                // *** END BUG 4 FIX (v1.1) ***

                if (activeTabContent && activeTabButton) {
                    const title = activeTabButton.dataset.title || 'BaoCao';
                    const timestamp = new Date().toLocaleDateString('vi-VN').replace(/\//g, '-');
                    utils.exportTableToExcel(activeTabContent, `${title}_${timestamp}`);
                } else {
                     ui.showNotification('Không tìm thấy tab để xuất.', 'error');
                }
            });
        }
    });
}
--- END FILE: ./event-listeners/listeners-actions.js ---

--- START FILE: ./event-listeners/listeners-collaboration.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - COLLABORATION
// Chứa logic sự kiện cho các tính năng hợp tác (Góp ý, Nhận xét).

import { ui } from '../ui.js';

export function initializeCollaborationListeners(appController) {
    document.body.addEventListener('click', async (e) => {
        const target = e.target;

        // --- Feedback System ---
        if (target.id === 'submit-feedback-btn') {
            appController.handleSubmitFeedback();
        }
        const feedbackItem = target.closest('.feedback-item');
        if (feedbackItem) {
            appController.handleFeedbackReplyActions(e, feedbackItem);
        }
        
        // --- Composer System ---
        const composerTrigger = target.closest('.action-btn--composer');
        if (composerTrigger) {
            const sectionId = composerTrigger.id.split('-')[1];
            appController.prepareAndShowComposer(sectionId);
        }
        const composerModal = target.closest('#composer-modal');
        if (composerModal) {
            appController.handleComposerActions(e, composerModal);
        }
        if (target.id === 'copy-from-preview-btn') {
            ui.copyFromPreview();
        }

        // --- Admin/Declaration System ---
        if (target.id === 'save-help-content-btn') {
            appController.saveHelpContent();
        }
    });
}
--- END FILE: ./event-listeners/listeners-collaboration.js ---

--- START FILE: ./event-listeners/listeners-competition.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - COMPETITION
// Chứa logic sự kiện cho việc quản lý các chương trình thi đua.

import { appState } from '../state.js';

export function initializeCompetitionListeners(appController) {
    const goalDrawer = document.getElementById('goal-drawer');
    if (!goalDrawer) return;

    // Sử dụng event delegation cho các nút trong danh sách
    goalDrawer.addEventListener('click', (e) => {
        const addBtn = e.target.closest('#add-competition-btn');
        const cancelBtn = e.target.closest('#cancel-competition-btn');
        const editBtn = e.target.closest('.edit-competition-btn');
        const deleteBtn = e.target.closest('.delete-competition-btn');

        if (addBtn) appController._handleCompetitionFormShow(true);
        if (cancelBtn) appController._handleCompetitionFormShow(false);
        if (editBtn) {
            const index = parseInt(editBtn.dataset.index, 10);
            appController._handleCompetitionFormEdit(index);
        }
        if (deleteBtn) {
            const index = parseInt(deleteBtn.dataset.index, 10);
            if (confirm('Bạn có chắc chắn muốn xóa chương trình này?')) {
                appController._handleCompetitionDelete(index);
            }
        }
    });

    // Gắn sự kiện cho form
    const form = document.getElementById('competition-form');
    form?.addEventListener('submit', (e) => appController._handleCompetitionFormSubmit(e));
    
    // Gắn sự kiện cho select loại thi đua
    const competitionTypeSelect = document.getElementById('competition-type');
    competitionTypeSelect?.addEventListener('change', (e) => {
        const priceSegment = document.getElementById('price-segment');
        if(priceSegment) {
            priceSegment.classList.toggle('hidden', e.target.value !== 'soluong');
        }
    });

    // Sử dụng event delegation trên body cho các input target được tạo động
    document.body.addEventListener('change', (e) => {
        if (e.target.classList.contains('competition-target-input')) {
            const competitionId = e.target.dataset.competitionId;
            const config = appState.competitionConfigs.find(c => c.id === competitionId);
            if (config) {
                config.target = e.target.value; 
            }
            appController.updateAndRenderCurrentTab(); 
        }
    });
}
--- END FILE: ./event-listeners/listeners-competition.js ---

--- START FILE: ./event-listeners/listeners-dragdrop.js ---
// Version 2.1 - Add logging to diagnose re-render issue on drop
// MODULE: LISTENERS - DRAG & DROP
// Chứa logic khởi tạo và xử lý sự kiện kéo-thả cột bằng SortableJS.

import { settingsService } from '../modules/settings.service.js';

let appController = null;

/**
 * Khởi tạo SortableJS trên khu vực chứa các thẻ tùy chỉnh cột.
 * @param {HTMLElement} container - Phần tử DOM chứa bảng và các nút tùy chỉnh.
 */
function activateSortableOnColumnToggles(container) {
    if (!container) return;

    const toggleContainer = container.querySelector('#efficiency-column-toggles');
    if (!toggleContainer) return;

    // Hủy bỏ instance cũ nếu có để tránh lỗi khởi tạo nhiều lần
    if (toggleContainer.sortable) {
        toggleContainer.sortable.destroy();
    }

    // Tạo instance mới
    toggleContainer.sortable = new Sortable(toggleContainer, {
        animation: 150, // Hiệu ứng chuyển động mượt mà
        filter: '.non-draggable', // Bỏ qua các phần tử có class này (ví dụ: label "Tùy chỉnh cột:")
        handle: '.drag-handle-icon', // Chỉ cho phép kéo khi bấm vào icon
        onEnd: (evt) => {
            // Lấy danh sách các thẻ <button> theo thứ tự mới
            const newButtonOrder = Array.from(evt.target.querySelectorAll('button.column-toggle-btn'));
            
            // Lấy ra ID của các cột theo thứ tự mới từ thuộc tính data-column-id
            const newColumnIdOrder = newButtonOrder.map(btn => btn.dataset.columnId).filter(Boolean);

            // Tải cài đặt hiện tại
            const currentSettings = settingsService.loadEfficiencyViewSettings();
             
            // Tạo một Map để truy cập nhanh các đối tượng cài đặt theo ID
            const settingsMap = new Map(currentSettings.map(s => [s.id, s]));

            // Tạo lại mảng cài đặt theo thứ tự mới
            const reorderedSettings = newColumnIdOrder.map(id => settingsMap.get(id));
               
            // Thêm lại các cột đã bị ẩn (nếu có) vào cuối danh sách để không làm mất chúng
            currentSettings.forEach(setting => {
                if (!reorderedSettings.find(s => s.id === setting.id)) {
                    reorderedSettings.push(setting);
                }
            });

            // Lưu lại cấu hình mới
            settingsService.saveEfficiencyViewSettings(reorderedSettings);

            // Vẽ lại toàn bộ tab để đồng bộ header, body, và footer của bảng
            if (appController) {
                console.log("LOG: Yêu cầu render lại tab sau khi kéo thả."); // <<< THÊM DÒNG NÀY ĐỂ GỠ LỖI
                appController.updateAndRenderCurrentTab();
            }
        }
    });
}


export const dragDroplisteners = {
    /**
     * Hàm khởi tạo chính, nhận vào controller của ứng dụng.
     * @param {object} mainAppController - Controller chính của ứng dụng.
     */
    init(mainAppController) {
        appController = mainAppController;
    },
    
    /**
     * Hàm được gọi sau mỗi lần render để kích hoạt lại tính năng kéo-thả.
     * @param {string} containerId - ID của container chứa bảng (ví dụ: 'efficiency-report-container').
     */
    initializeForContainer(containerId) {
        const container = document.getElementById(containerId);
        activateSortableOnColumnToggles(container);
    }
};
--- END FILE: ./event-listeners/listeners-dragdrop.js ---

--- START FILE: ./event-listeners/listeners-highlighting.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - HIGHLIGHTING
// Chứa logic sự kiện cho tính năng tô màu (highlight).

import { appState } from '../state.js';
import { highlightService } from '../modules/highlight.service.js';

/**
 * Xử lý khi người dùng thay đổi lựa chọn trong các bộ lọc highlight.
 * @param {string} prefix - 'luyke', 'sknv', hoặc 'realtime'.
 * @param {string} type - 'nhanhang', 'nhomhang', hoặc 'employee'.
 */
function handleHighlightFilterChange(prefix, type) {
    const choicesInstance = appState.choices[`${prefix}_highlight_${type}`];
    if (!choicesInstance) return;

    const values = choicesInstance.getValue(true);
    const color = document.getElementById(`${prefix}-highlight-color`).value;
    
    appState.highlightSettings[prefix] = { type, values, color };
    localStorage.setItem('highlightSettings', JSON.stringify(appState.highlightSettings));
    
    highlightService.applyHighlights(prefix);
}

export function initializeHighlightingListeners(appController) {
    ['luyke', 'sknv', 'realtime'].forEach(prefix => {
        const nhanhangFilter = document.getElementById(`${prefix}-highlight-nhanhang`);
        if (nhanhangFilter) {
            nhanhangFilter.addEventListener('change', () => handleHighlightFilterChange(prefix, 'nhanhang'));
        }

        const nhomhangFilter = document.getElementById(`${prefix}-highlight-nhomhang`);
        if (nhomhangFilter) {
            nhomhangFilter.addEventListener('change', () => handleHighlightFilterChange(prefix, 'nhomhang'));
        }

        const employeeFilter = document.getElementById(`${prefix}-highlight-employee`);
        if (employeeFilter) {
            employeeFilter.addEventListener('change', () => handleHighlightFilterChange(prefix, 'employee'));
        }

        const colorInput = document.getElementById(`${prefix}-highlight-color`);
        if (colorInput) {
            colorInput.addEventListener('input', () => appController.handleHighlightColorChange(prefix));
        }
        
        const clearButton = document.getElementById(`${prefix}-clear-highlight`);
        if (clearButton) {
            clearButton.addEventListener('click', () => appController.handleClearHighlight(prefix));
        }
    });
}
--- END FILE: ./event-listeners/listeners-highlighting.js ---

--- START FILE: ./event-listeners/listeners-settings.js ---
// Version 1.5 - Save competition name mapping to Firestore (debounced) & re-process data
// Version 1.4 - Add auto-save listener for competition name mapping
// Version 1.3 - Add event listener for efficiency column toggles
// MODULE: LISTENERS - SETTINGS
// Chứa logic sự kiện cho các drawers Cài đặt và các Modals.

import { ui } from '../ui.js';
import { settingsService } from '../modules/settings.service.js';
import { appState } from '../state.js';
import { firebase } from '../firebase.js'; // *** NEW (v1.5) ***
import { services } from '../services.js'; // *** NEW (v1.5) ***

export function initializeSettingsListeners(appController) {
    // *** NEW (v1.5): Helper debounce function ***
    let debounceTimer;
    const debounce = (func, delay) => {
        return (...args) => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    };

    // *** NEW (v1.5): Create a debounced save function (e.g., wait 1 second after last keystroke) ***
    const debouncedSaveMappings = debounce((mappings) => {
        // 1. Save to Firestore
        firebase.saveCompetitionNameMappings(mappings);
        ui.showNotification('Đã tự động lưu tên rút gọn lên Cloud!', 'success');
        
        // 2. (Bug 1 Fix) Re-process pasted data with new names
        const pastedText = document.getElementById('paste-thiduanv')?.value || '';
        
        // Chỉ xử lý lại nếu đã có dữ liệu được dán và xử lý trước đó
        // `appState.pastedThiDuaReportData` sẽ có dữ liệu sau lần dán đầu tiên
        if (pastedText && appState.pastedThiDuaReportData) { 
            console.log("Re-processing pasted thi dua data after name change...");
            try {
                const parsedData = services.parsePastedThiDuaTableData(pastedText);
                if (parsedData.success) {
                    // Use the NEW mappings from appState
                    appState.pastedThiDuaReportData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
                    // Save the re-processed data to localStorage
                    localStorage.setItem('daily_paste_thiduanv', JSON.stringify(appState.pastedThiDuaReportData));
                    
                    // Re-render the current tab if it's the SKNV tab
                    const activeTab = document.querySelector('.page-section:not(.hidden)');
                    if (activeTab && activeTab.id === 'health-employee-section') {
                        appController.updateAndRenderCurrentTab();
                    }
                }
            } catch (e) {
                console.error("Error re-processing pasted data after name mapping change:", e);
            }
        }
    }, 1000); // 1000ms (1 second) delay

    // --- Open/Close Modals & Drawers --- [cite: 206-207, 795-796]
    document.getElementById('admin-access-btn')?.addEventListener('click', () => ui.toggleModal('admin-modal', true));
    document.getElementById('admin-submit-btn')?.addEventListener('click', () => appController.handleAdminLogin());
    document.getElementById('admin-cancel-btn')?.addEventListener('click', () => ui.toggleModal('admin-modal', false));
    document.getElementById('interface-settings-btn')?.addEventListener('click', () => ui.toggleDrawer('interface-drawer', true));
    document.getElementById('goal-settings-btn')?.addEventListener('click', () => ui.toggleDrawer('goal-drawer', true));
    document.querySelectorAll('.close-drawer-btn, #drawer-overlay').forEach(el => el.addEventListener('click', () => ui.closeAllDrawers()));

    // --- Interface Settings --- [cite: 207, 796-797]
    document.querySelectorAll('.contrast-selector').forEach(sel => sel.addEventListener('change', (e) => appController.handleContrastChange(e)));
    document.getElementById('global-font-size-slider')?.addEventListener('input', (e) => settingsService.handleFontSizeChange(e, 'global'));
    document.getElementById('kpi-font-size-slider')?.addEventListener('input', (e) => settingsService.handleFontSizeChange(e, 'kpi'));
    document.querySelectorAll('.kpi-color-input').forEach(picker => picker.addEventListener('input', () => settingsService.saveInterfaceSettings()));

    // --- Goal Settings --- [cite: 207-208, 797-798]
    document.getElementById('rt-goal-warehouse-select')?.addEventListener('change', () => settingsService.loadAndApplyRealtimeGoalSettings());
    document.getElementById('luyke-goal-warehouse-select')?.addEventListener('change', () => settingsService.loadAndApplyLuykeGoalSettings());
    document.querySelectorAll('.rt-goal-input, .rt-setting-input').forEach(input => input.addEventListener('input', () => {
        settingsService.saveRealtimeGoalSettings();
        appController.updateAndRenderCurrentTab();
    }));
    document.querySelectorAll('.luyke-goal-input').forEach(input => input.addEventListener('input', () => {
         settingsService.saveLuykeGoalSettings();
         appController.updateAndRenderCurrentTab();
    }));
    
    // --- Declaration Settings --- [cite: 208, 798]
    document.getElementById('save-declaration-btn')?.addEventListener('click', () => appController.saveDeclarations());

    // --- Global Modals (Help, etc.) & Debug Tool --- [cite: 208, 798]
    document.getElementById('toggle-debug-btn')?.addEventListener('click', (e) => ui.toggleDebugTool(e.currentTarget));
    
    // --- Event Delegation for dynamically added elements --- [cite: 209-212, 798-801]
    document.body.addEventListener('click', (e) => {
        const helpTrigger = e.target.closest('.page-header__help-btn');
        if(helpTrigger) {
            ui.showHelpModal(helpTrigger.dataset.helpId);
        }

        const closeModalTrigger = e.target.closest('[data-close-modal]');
        if (closeModalTrigger) {
            const modal = closeModalTrigger.closest('.modal');
            if(modal) {
                 ui.toggleModal(modal.id, false);
            }
        }
        
        const selectionSaveBtn = e.target.closest('#selection-modal-save-btn');
        if (selectionSaveBtn) {
            const modal = document.getElementById('selection-modal');
            const settingType = modal.dataset.settingType;

            const selectedItems = [];
            document.querySelectorAll('#selection-modal-list input[type="checkbox"]:checked').forEach(checkbox => {
                selectedItems.push(checkbox.value);
            });

            if (settingType === 'efficiencyView') {
                // Logic cũ này vẫn có thể được sử dụng bởi modal, nhưng UI mới sẽ dùng logic riêng
                const allItems = settingsService.loadEfficiencyViewSettings();
                const updatedItems = allItems.map(item => ({...item, visible: selectedItems.includes(item.id)}));
                settingsService.saveEfficiencyViewSettings(updatedItems);
            } else if (settingType === 'qdcView') {
                settingsService.saveQdcViewSettings(selectedItems);
            } else if (settingType === 'categoryView') {
                settingsService.saveCategoryViewSettings(selectedItems);
            }

            ui.toggleModal('selection-modal', false);
            ui.showNotification('Đã lưu cài đặt hiển thị!', 'success');
            appController.updateAndRenderCurrentTab();
        }

        // === BẮT ĐẦU LOGIC MỚI CHO TÙY CHỈNH CỘT === [cite: 210-212, 800-801]
        const columnToggleButton = e.target.closest('.column-toggle-btn');
        if (columnToggleButton && columnToggleButton.closest('#efficiency-column-toggles')) {
            e.preventDefault();
            const columnId = columnToggleButton.dataset.columnId;
            
            // 1. Tải cài đặt hiện tại
            const currentSettings = settingsService.loadEfficiencyViewSettings();
            
            // 2. Thay đổi trạng thái của cột được nhấp
            const newSettings = currentSettings.map(col => {
                if (col.id === columnId) {
                    return { ...col, visible: !col.visible };
                 }
                return col;
            });

            // 3. Lưu cài đặt mới
            settingsService.saveEfficiencyViewSettings(newSettings);
            
            // 4. Render lại tab để áp dụng thay đổi
            appController.updateAndRenderCurrentTab();
        }
        // === KẾT THÚC LOGIC MỚI ===
    });

    // *** MODIFIED (v1.5): Event delegation for auto-saving competition name mappings ***
    document.body.addEventListener('input', (e) => {
        const mappingInput = e.target.closest('.competition-name-input');
        
        if (mappingInput) {
            const originalName = mappingInput.dataset.originalName;
            const shortName = mappingInput.value.trim();
            
            if (originalName) {
                if (!appState.competitionNameMappings) {
                    appState.competitionNameMappings = {};
                }
                // 1. Update the state immediately
                appState.competitionNameMappings[originalName] = shortName;
                
                // 2. Call the debounced function to save to Firestore & re-process data
                debouncedSaveMappings(appState.competitionNameMappings);
            }
        }
    });
    // *** END MODIFIED ***

    const searchInput = document.getElementById('selection-modal-search'); // [cite: 214, 803]
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            document.querySelectorAll('#selection-modal-list .selection-item').forEach(item => {
                 const label = item.querySelector('label').textContent.toLowerCase();
                item.style.display = label.includes(searchTerm) ? '' : 'none';
            });
        });
    }
}
--- END FILE: ./event-listeners/listeners-settings.js ---

--- START FILE: ./event-listeners/listeners-sorting.js ---
// Version 1.0 - Refactored from ui-listeners.js
// MODULE: LISTENERS - SORTING
// Chứa logic sự kiện cho việc sắp xếp các bảng.

import { appState } from '../state.js';

export function initializeSortingListeners(appController) {
    document.body.addEventListener('click', (e) => {
        const header = e.target.closest('.sortable');
        if (!header) return;

        const table = header.closest('table');
        if (!table) return;
        
        const tableType = table.dataset.tableType;
        const sortKey = header.dataset.sort;

        if (!tableType || !sortKey) return;

        const currentState = appState.sortState[tableType] || { key: sortKey, direction: 'desc' };
        
        let newDirection;
        if (currentState.key === sortKey) {
            newDirection = currentState.direction === 'desc' ? 'asc' : 'desc';
        } else {
            newDirection = 'desc';
        }
        
        appState.sortState[tableType] = { key: sortKey, direction: newDirection };

        appController.updateAndRenderCurrentTab();
    });
}
--- END FILE: ./event-listeners/listeners-sorting.js ---

--- START FILE: ./event-listeners/ui-listeners.js ---
// Version 3.30 - Initialize choices.js for realtime brand/category filters
// Version 3.29 - Add event listener for sknv-thidua-view-selector
// Version 3.28 - Call incrementCounter with email for user-specific actionsTaken
// Version 3.27 - Add actionsTaken counter increment on successful file upload
// Version 3.26 - Fix incorrect import paths (./ changed to ../)
// Version 3.25 - Add event listener for download-data-btn
// Version 3.24 - Implement Cloud Storage upload and save metadata logic
// MODULE: EVENT LISTENERS INITIALIZER
// File này đóng vai trò là điểm khởi đầu, import và khởi chạy tất cả các module listener con.

import { appState } from '../state.js';
import { ui } from '../ui.js';
import { services } from '../services.js';
import { luykeTab } from '../tab-luyke.js';
import { sknvTab } from '../tab-sknv.js';
import { uiRealtime } from '../ui-realtime.js';
import { initializeActionListeners } from './listeners-actions.js';
import { initializeCollaborationListeners } from './listeners-collaboration.js';
import { initializeCompetitionListeners } from './listeners-competition.js';
import { initializeHighlightingListeners } from './listeners-highlighting.js';
import { initializeSettingsListeners } from './listeners-settings.js';
import { initializeSortingListeners } from './listeners-sorting.js';
import { dragDroplisteners } from './listeners-dragdrop.js';
import { captureService } from '../modules/capture.service.js';
import { firebase } from '../firebase.js';
import { uiComponents } from '../ui-components.js';

let appController = null;

// --- CONSTANTS ---
const LOCAL_DATA_VERSIONS_KEY = '_localDataVersions'; // Key for localStorage

// --- HELPERS / HANDLERS ---

async function handleFileInputChange(e) {
    const fileInput = e.target;
    const file = fileInput.files[0];
    if (!file) {
        // Clear status if user cancels file selection
        const fileType = fileInput.id.replace('file-', '');
        // Find mapping info using appController if available, otherwise might need direct access or different approach
         const mappingInfo = appController?.ALL_DATA_MAPPING
            ? Object.values(appController.ALL_DATA_MAPPING).find(m => m.uiId === fileType)
            : null; // Fallback if appController isn't ready or doesn't have the mapping yet
        if (mappingInfo && mappingInfo.uiId) {
            uiComponents.updateFileStatus(mappingInfo.uiId, '', 'Chưa thêm file', 'default');
        }
        return;
    }

    const fileType = fileInput.id.replace('file-', '');
    // Find mapping info using appController if available
     const mappingInfo = appController?.ALL_DATA_MAPPING
        ? Object.values(appController.ALL_DATA_MAPPING).find(m => m.uiId === fileType)
        : null; // Fallback

    if (!mappingInfo) {
        if (fileType === 'danhsachnv') {
            return appController.handleDsnvUpload(e, file);
        }
        console.error(`[handleFileInputChange] No mapping info found for fileType: ${fileType}`);
        uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Không tìm thấy cấu hình cho loại file '${fileType}'.`, 'error');
        return;
    }


    const { stateKey, saveKey, firestoreKey } = mappingInfo;
    const dataName = fileInput.dataset.name || fileType;

    uiComponents.updateFileStatus(fileType, file.name, 'Đang đọc & chuẩn hóa...', 'default');
    ui.showProgressBar(fileType);

    try {
        const workbook = await appController.handleFileRead(file);
        const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
        const normalizeType = fileType.replace('-thangtruoc', '');
        const { normalizedData, success, missingColumns } = services.normalizeData(rawData, normalizeType);
        ui.displayDebugInfo(fileType);

        if (!success) {
            const errorMessage = `Lỗi file "${dataName}": Thiếu cột: ${missingColumns.join(', ')}.`;
            uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Thiếu cột dữ liệu.`, 'error');
            ui.showNotification(errorMessage, 'error');
            if (document.getElementById('debug-tool-container')?.classList.contains('hidden')) {
                 document.getElementById('toggle-debug-btn')?.click();
            }
             fileInput.value = ''; // Reset input on error
            return;
        }

        // *** >>> SỬA ĐỂ GỌI HÀM ĐẾM VỚI EMAIL <<< ***
        if (appState.currentUser?.email) {
             firebase.incrementCounter('actionsTaken', appState.currentUser.email);
             console.log(`Incremented actionsTaken for ${appState.currentUser.email}`);
        } else {
             firebase.incrementCounter('actionsTaken'); // Fallback if email somehow isn't available
             console.warn("User email not found in appState, incrementing global actionsTaken.");
        }
        // *** >>> KẾT THÚC SỬA ĐỔI <<< ***

        appState[stateKey] = normalizedData;
        ui.showNotification(`Tải thành công file "${dataName}"!`, 'success');

        if (saveKey) {
            console.log(`[handleFileInputChange] Saving normalized data (${normalizedData.length} rows) to cache: ${saveKey}`);
            await appController.storage.setItem(saveKey, normalizedData);
            console.log(`%c[DEBUG POST-CACHE] Successfully saved ${fileType} to cache. Proceeding...`, "color: brown;");
        }

        // --- Cloud Synchronization ---
        const warehouseToSync = appState.selectedWarehouse;
        const currentFirestoreKey = firestoreKey;

        console.log(`%c[DEBUG PRE-SYNC CHECK] File Type: ${fileType}, Warehouse: ${warehouseToSync}, Firestore Key: ${currentFirestoreKey}`, "color: purple; font-weight: bold;");

        if (warehouseToSync && currentFirestoreKey) {
            console.log(`%c[DEBUG SYNC BLOCK START] Entering cloud sync block for ${fileType} (Firestore Key: ${currentFirestoreKey})`, "color: magenta;");

            uiComponents.updateFileStatus(fileType, file.name, `Đang chuẩn bị đồng bộ cloud...`, 'default');

            let localDataVersions = appController._localDataVersions;
            const currentVersion = localDataVersions?.[warehouseToSync]?.[currentFirestoreKey]?.version || 0;
            const newVersion = currentVersion + 1;
            const uploadTimestamp = Date.now();

            const fileExtension = file.name.substring(file.name.lastIndexOf('.'));
            const storagePath = `uploads/${warehouseToSync}/${currentFirestoreKey}_v${newVersion}${fileExtension}`;

            console.log(`%c[handleFileInputChange] Cloud Upload for ${currentFirestoreKey}:`, "color: magenta; font-weight: bold;");

            const onProgress = (progress) => {
                uiComponents.updateFileStatus(fileType, file.name, `Đang tải lên cloud... ${Math.round(progress)}%`, 'default');
            };

            try {
                const downloadURL = await firebase.uploadFileToStorage(file, storagePath, onProgress);
                uiComponents.updateFileStatus(fileType, file.name, `Upload xong, đang lưu thông tin...`, 'default');

                const metadata = {
                    storagePath: storagePath,
                    downloadURL: downloadURL,
                    version: newVersion,
                    timestamp: uploadTimestamp,
                    rowCount: normalizedData.length,
                    fileName: file.name
                };

                await firebase.saveMetadataToFirestore(warehouseToSync, currentFirestoreKey, metadata);

                const metadataKey = `${appController.LOCAL_METADATA_PREFIX}${warehouseToSync}_${currentFirestoreKey}`;
                const metadataToSaveLocally = { ...metadata, updatedAt: new Date() };
                try {
                    localStorage.setItem(metadataKey, JSON.stringify(metadataToSaveLocally));
                    console.log(`[handleFileInputChange] Saved metadata for ${currentFirestoreKey} to localStorage ('${metadataKey}') immediately.`);
                } catch (lsError) {
                    console.error(`[handleFileInputChange] Error saving metadata for ${currentFirestoreKey} to localStorage:`, lsError);
                }

                if (!localDataVersions[warehouseToSync]) localDataVersions[warehouseToSync] = {};
                localDataVersions[warehouseToSync][currentFirestoreKey] = { version: newVersion, timestamp: uploadTimestamp };
                localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(localDataVersions));
                appController._localDataVersions = localDataVersions;

                console.log(`%c[handleFileInputChange] Successfully uploaded ${currentFirestoreKey} (v${newVersion}).`, "color: magenta;");

                uiComponents.updateFileStatus(fileType, file.name, '', 'success', false, metadataToSaveLocally);

            } catch (syncError) {
                console.error(`%c[handleFileInputChange] Cloud sync failed for ${currentFirestoreKey}:`, "color: red;", syncError);
                uiComponents.updateFileStatus(fileType, file.name, `Lỗi đồng bộ cloud: ${syncError.message}`, 'error');
            }
            console.log(`%c[DEBUG SYNC BLOCK END] Finished cloud sync block for ${fileType}`, "color: magenta;");
        } else {
             console.log(`%c[DEBUG SYNC SKIP] Skipping cloud sync for ${fileType}. Warehouse selected: ${!!warehouseToSync}, Firestore key exists: ${!!currentFirestoreKey}`, "color: orange;");
            uiComponents.updateFileStatus(fileType, file.name, `✓ Đã tải ${normalizedData.length} dòng (Chưa đồng bộ).`, 'success', false, null);
        }

        console.log(`%c[DEBUG PRE-RENDER] About to call updateAndRenderCurrentTab for ${fileType}`, "color: blue;");
        appController.updateAndRenderCurrentTab();

    } catch (error) {
        console.error(`Lỗi xử lý file ${dataName}:`, error);
        uiComponents.updateFileStatus(fileType, file.name, `Lỗi đọc file: ${error.message}`, 'error');
        ui.showNotification(`Lỗi khi xử lý file "${dataName}".`, 'error');
    } finally {
        ui.hideProgressBar(fileType);
        fileInput.value = '';
        console.log(`%c[DEBUG FUNCTION END] handleFileInputChange finished for ${fileType}`, "color: gray;");
    }
}


function handleFilterChange(prefix) {
    appState.viewingDetailFor = null;
    uiComponents.updateEmployeeFilter(prefix);
    appController.updateAndRenderCurrentTab();
}

// --- MAIN INITIALIZER ---

export function initializeEventListeners(mainAppController) {
    appController = mainAppController;

    // Khởi tạo Choices.js và Flatpickr (Giữ nguyên)
    try {
        const multiSelectConfig = { removeItemButton: true, placeholder: true, placeholderValue: 'Chọn hoặc gõ để tìm...', searchPlaceholderValue: 'Tìm kiếm...' };
        const competitionMultiSelectConfig = { ...multiSelectConfig };

        ['luyke', 'sknv', 'realtime'].forEach(prefix => {
            const employeeEl = document.getElementById(`${prefix}-filter-name`);
            if (employeeEl) appState.choices[`${prefix}_employee`] = new Choices(employeeEl, multiSelectConfig);
            ['warehouse', 'department'].forEach(type => {
                 const el = document.getElementById(`${prefix}-filter-${type}`);
                if(el) appState.choices[`${prefix}_${type}`] = new Choices(el, { searchEnabled: true, removeItemButton: false, itemSelectText: 'Chọn' });
            });
            ['nhanhang', 'nhomhang', 'employee'].forEach(type => {
                const highlightEl = document.getElementById(`${prefix}-highlight-${type}`);
                if (highlightEl) appState.choices[`${prefix}_highlight_${type}`] = new Choices(highlightEl, multiSelectConfig);
            });
        });
        const competitionBrandEl = document.getElementById('competition-brand');
        if (competitionBrandEl) appState.choices['competition_brand'] = new Choices(competitionBrandEl, competitionMultiSelectConfig);
        const competitionGroupEl = document.getElementById('competition-group');
        if (competitionGroupEl) appState.choices['competition_group'] = new Choices(competitionGroupEl, competitionMultiSelectConfig);
        
        const singleSelectConfig = { searchEnabled: true, removeItemButton: false, itemSelectText: 'Chọn', searchPlaceholderValue: 'Tìm kiếm...' };
        
        // === FIX 4 (Sửa) ===
        // Thêm 2 ID bộ lọc của tab Realtime vào đây
        const singleSelects = {
             'thidua-employee-filter': 'thidua_employee_detail',
            'thidua-vung-filter-supermarket': 'thiDuaVung_sieuThi',
            'realtime-brand-category-filter': 'realtime_brand_category_filter', // Đã thêm
            'realtime-brand-filter': 'realtime_brand_filter' // Đã thêm
        };
        // === END FIX 4 ===

        for (const [id, key] of Object.entries(singleSelects)) {
             const el = document.getElementById(id);
             if (el) appState.choices[key] = new Choices(el, singleSelectConfig);
        }
    } catch (error) { console.error("Lỗi khi khởi tạo Choices.js:", error); }

    try {
        const initDatePicker = (prefix, renderFunc) => {
            const datePickerEl = document.getElementById(`${prefix}-filter-date`);
            if (!datePickerEl) return;
            const datePicker = flatpickr(datePickerEl, {
                mode: "multiple", dateFormat: "d/m", maxDate: "today",
                onClose: (selectedDates, dateStr, instance) => {
                    if (selectedDates.length === 2) {
                         const [start, end] = selectedDates.sort((a,b) => a - b);
                        const dateRange = Array.from({length: (end - start) / 86400000 + 1}, (_, i) => new Date(start.getTime() + i * 86400000));
                         instance.setDate(dateRange, false);
                    }
                    uiComponents.updateDateSummary(document.getElementById(`${prefix}-date-summary`), instance);
                    appState.viewingDetailFor = null;
                    renderFunc();
                }
            });
            appState.choices[`${prefix}_date_picker`] = datePicker;
            document.getElementById(`${prefix}-clear-date`)?.addEventListener('click', () => { datePicker.clear(); renderFunc(); });
        };
        initDatePicker('luyke', luykeTab.render);
        initDatePicker('sknv', sknvTab.render);
    } catch (error) { console.error("Lỗi khi khởi tạo Flatpickr:", error); }


    // Gọi các hàm khởi tạo listener con
    initializeSettingsListeners(appController);
    initializeHighlightingListeners(appController);
    initializeActionListeners();
    initializeCollaborationListeners(appController);
    initializeSortingListeners(appController);
    initializeCompetitionListeners(appController);
    dragDroplisteners.init(appController);

    // General UI Listeners (Giữ nguyên)
    document.getElementById('force-reload-btn')?.addEventListener('click', () => window.location.reload());
    document.querySelectorAll('a.nav-link').forEach(link => link.addEventListener('click', (e) => { e.preventDefault(); appController.switchTab(link.getAttribute('href').substring(1)); }));
    document.querySelectorAll('.sub-tab-btn').forEach(btn => btn.addEventListener('click', (e) => {
        ui.handleSubTabClick(e.currentTarget);
        appState.viewingDetailFor = null;
        const mainTabId = e.currentTarget.closest('.page-section')?.id || e.currentTarget.closest('.settings-drawer')?.id;
        if (mainTabId === 'health-section') luykeTab.render();
        else if (mainTabId === 'health-employee-section') sknvTab.render();
        else if (mainTabId === 'realtime-section') uiRealtime.render();
    }));
    document.querySelectorAll('.toggle-filters-btn').forEach(button => button.addEventListener('click', () => ui.toggleFilterSection(button.dataset.target)));

    // File input listeners - Gán hàm xử lý chung đã sửa
    document.querySelectorAll('.file-input').forEach(input => {
        if (input.id !== 'file-thidua-vung' && input.id !== 'file-category-structure' && input.id !== 'realtime-file-input' && input.id !== 'debug-competition-file-input') {
            input.addEventListener('change', handleFileInputChange); // Gán hàm đã định nghĩa ở trên
        }
    });
    // Gán các handler đặc biệt (Giữ nguyên)
    document.getElementById('file-category-structure')?.addEventListener('change', (e) => appController.handleCategoryFile(e));
    document.getElementById('paste-luyke')?.addEventListener('input', () => appController.handleLuykePaste());
    document.getElementById('paste-thiduanv')?.addEventListener('input', () => appController.handleThiduaNVPaste());
    document.getElementById('paste-thuongerp')?.addEventListener('input', () => appController.handleErpPaste());
    document.getElementById('paste-thuongerp-thangtruoc')?.addEventListener('input', (e) => appController.handleErpThangTruocPaste(e));
    document.getElementById('realtime-file-input')?.addEventListener('change', (e) => appController.handleRealtimeFileInput(e));
    document.getElementById('download-danhsachnv-template-btn')?.addEventListener('click', () => appController.handleTemplateDownload());
    document.getElementById('file-thidua-vung')?.addEventListener('change', (e) => appController.handleThiDuaVungFileInput(e));
    document.getElementById('thidua-vung-filter-supermarket')?.addEventListener('change', () => appController.handleThiDuaVungFilterChange());
    document.getElementById('debug-competition-file-input')?.addEventListener('change', (e) => appController.handleCompetitionDebugFile(e));

    // Filter change listeners (Giữ nguyên)
    ['luyke', 'sknv', 'realtime'].forEach(prefix => {
        document.getElementById(`${prefix}-filter-warehouse`)?.addEventListener('change', () => handleFilterChange(prefix));
        document.getElementById(`${prefix}-filter-department`)?.addEventListener('change', () => handleFilterChange(prefix));
         document.getElementById(`${prefix}-filter-name`)?.addEventListener('change', () => handleFilterChange(prefix));
    });

    // Warehouse selector listener (Giữ nguyên)
    document.getElementById('data-warehouse-selector')?.addEventListener('change', (e) => {
        const selectedKho = e.target.value;
        console.log("[DEBUG] Kho selection changed. Selected:", selectedKho);
        if (selectedKho) {
            appState.selectedWarehouse = selectedKho;
            localStorage.setItem('selectedWarehouse', selectedKho);
            ui.showNotification(`Đã chuyển sang làm việc với kho ${selectedKho}.`, 'success');
             if(appController.unsubscribeDataListener) {
                console.log("[DEBUG] Unsubscribing from previous warehouse listener.");
                appController.unsubscribeDataListener();
            }
            appController.unsubscribeDataListener = firebase.listenForDataChanges(selectedKho, (cloudData) => {
                appController.handleCloudDataUpdate(cloudData);
            });
            ['ycx', 'giocong', 'thuongnong'].forEach(ft => {
                const versionInfo = appController._localDataVersions?.[selectedKho]?.[ft];
                if (!versionInfo || !versionInfo.version || versionInfo.version === 0) {
                     uiComponents.updateFileStatus(ft, 'Cloud', `Đang chờ đồng bộ từ kho ${selectedKho}...`, 'default');
                }
            });
        } else {
            appState.selectedWarehouse = null;
            localStorage.removeItem('selectedWarehouse');
            ui.showNotification(`Đã bỏ chọn kho. Đồng bộ cloud tạm dừng.`, 'success');
            if(appController.unsubscribeDataListener) {
                 console.log("[DEBUG] Unsubscribing warehouse listener (no warehouse selected).");
                appController.unsubscribeDataListener();
                appController.unsubscribeDataListener = null;
            }
             ['ycx', 'giocong', 'thuongnong'].forEach(ft => uiComponents.updateFileStatus(ft, '', 'Chọn kho để đồng bộ...', 'default'));
        }
        appController.updateAndRenderCurrentTab();
    });

    // Other specific listeners (Giữ nguyên)
    document.getElementById('sknv-view-selector')?.addEventListener('click', (e) => appController.handleSknvViewChange(e));
    document.getElementById('sknv-employee-filter')?.addEventListener('change', () => sknvTab.render());

    // Body click listener (Giữ nguyên)
    document.body.addEventListener('click', (e) => {
        const interactiveRow = e.target.closest('.interactive-row');
        if (interactiveRow && interactiveRow.dataset.employeeId) {
            e.preventDefault();
            if (appState.viewingDetailFor && appState.viewingDetailFor.employeeId === interactiveRow.dataset.employeeId) return;
            appState.viewingDetailFor = { employeeId: interactiveRow.dataset.employeeId, sourceTab: interactiveRow.dataset.sourceTab };
            appController.updateAndRenderCurrentTab();
            return;
        }
        const backButton = e.target.closest('.back-to-summary-btn');
        if (backButton) {
            e.preventDefault();
            appState.viewingDetailFor = null;
            appController.updateAndRenderCurrentTab();
            return;
        }
        const captureDetailBtn = e.target.closest('#capture-sknv-detail-btn, #capture-dtnv-lk-detail-btn, #capture-dtnv-rt-detail-btn');
        if (captureDetailBtn) {
            e.preventDefault();
            const areaToCapture = captureDetailBtn.closest('.sub-tab-content')?.querySelector('[id$="-capture-area"]');
            const title = appState.viewingDetailFor?.employeeId || 'ChiTietNV';
            if (areaToCapture) captureService.captureDashboardInParts(areaToCapture, title);
            return;
        }
        const luykeViewSwitcherBtn = e.target.closest('#luyke-thidua-view-selector .view-switcher__btn');
        if (luykeViewSwitcherBtn) {
            e.preventDefault();
            appController.handleLuykeThiDuaViewChange(e);
            return;
        }

        // *** NEW (v3.29) ***
        const sknvThiDuaViewSwitcherBtn = e.target.closest('#sknv-thidua-view-selector .view-switcher__btn');
        if (sknvThiDuaViewSwitcherBtn) {
            e.preventDefault();
            // Xử lý chuyển đổi view trực tiếp
            const viewSelector = sknvThiDuaViewSwitcherBtn.closest('#sknv-thidua-view-selector');
            if (viewSelector) {
                 viewSelector.querySelectorAll('.view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            }
            sknvThiDuaViewSwitcherBtn.classList.add('active');
            
            // Render lại tab SKNV (nó sẽ đọc nút active này)
            appController.updateAndRenderCurrentTab(); 
            return;
        }
        // *** END NEW ***

        const thiDuaViewSwitcherBtn = e.target.closest('#thidua-view-selector .view-switcher__btn');
        if (thiDuaViewSwitcherBtn) {
            e.preventDefault();
            appController.handleThiDuaViewChange(e);
            return;
        }
        const dtHangViewSwitcherBtn = e.target.closest('#dthang-realtime-view-selector .view-switcher__btn');
        if (dtHangViewSwitcherBtn) {
            e.preventDefault();
            appController.handleDthangRealtimeViewChange(e);
            return;
        }

        const downloadBtn = e.target.closest('.download-data-btn');
        if (downloadBtn) {
            e.preventDefault();
            const dataType = downloadBtn.dataset.type;
            const warehouse = downloadBtn.dataset.warehouse;
            if (dataType && warehouse && appController) {
                console.log(`[Body Click Listener] Download button clicked for ${dataType} @ ${warehouse}`);
                appController.handleDownloadAndProcessData(dataType, warehouse);
            } else {
                console.error("Download button clicked but missing data-type or data-warehouse.", downloadBtn);
            }
            return;
        }
    });

    // Specific filter listeners (Giữ nguyên)
    document.getElementById('thidua-employee-filter')?.addEventListener('change', () => ui.displayCompetitionReport('employee'));
    document.getElementById('realtime-brand-category-filter')?.addEventListener('change', () => uiRealtime.handleBrandFilterChange());
    document.getElementById('realtime-brand-filter')?.addEventListener('change', () => uiRealtime.handleBrandFilterChange());
}
--- END FILE: ./event-listeners/ui-listeners.js ---

--- START FILE: ./index.html ---
<!DOCTYPE html>
<html lang="vi" data-contrast="3">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Công cụ phân tích số cho QLST MWG 5.0</title>

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>

    <script src="https://unpkg.com/feather-icons"></script>

    <link rel="stylesheet" href="./dashboard.css">

     <style>
       #luyke-category-details-content td:first-child,
        #luyke-unexported-revenue-content td:first-child {
            text-transform: capitalize;
        }

       /* === START: Declaration Accordion Styles === */
       .declaration-group {
            border-bottom: 1px solid #e5e7eb; /* gray-200 */
       }
       .declaration-group:last-child {
            border-bottom: none;
       }
       .declaration-group summary {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0.5rem;
            cursor: pointer;
            font-size: 1.125rem; /* text-lg */
            font-weight: 700; /* font-bold */
            color: #374151; /* gray-700 */
            list-style: none; /* Hide default marker */
       }
       .declaration-group summary::-webkit-details-marker {
            display: none; /* Hide default marker for Chrome */
       }
       .declaration-group summary:hover {
            background-color: #f9fafb; /* gray-50 */
       }
       .declaration-group summary::after {
            content: '+';
            font-size: 1.5rem;
            font-weight: 500;
            color: #6b7280; /* gray-500 */
            transition: transform 0.2s ease-in-out;
       }
       .declaration-group[open] > summary::after {
            transform: rotate(45deg);
            content: '×';
       }
       .declaration-content {
            padding: 1rem 0.5rem 1.5rem 0.5rem;
       }
       /* === END: Declaration Accordion Styles === */
    </style>
</head>
<body class="overflow-x-hidden">

    <div id="update-notification" class="hidden fixed bottom-5 right-5 bg-blue-600 text-white py-3 px-5 rounded-lg shadow-lg z-[1001] flex items-center gap-4">
        <p class="font-semibold">Đã có phiên bản mới! Xem chi tiết nội dung cập nhật ở tab "Hướng Dẫn & Góp Ý"</p>
     
   <button onclick="window.location.reload()" class="bg-white text-blue-600 font-bold py-1 px-3 rounded-md hover:bg-blue-100 transition">Tải lại trang</button>
    </div>

    <div id="interface-drawer-container"></div>
    <div id="goal-drawer-container"></div>
    <div id="drawer-overlay" class="hidden fixed inset-0 bg-black bg-opacity-40 z-40"></div>

    <div class="flex min-h-screen">
        <div id="sidebar-container"></div>
         <main id="main-content" class="flex-1 p-6">

            <div class="max-w-full mx-auto">

                <section id="home-section" class="page-section hidden">
                    <div class="page-header">
                        
 <h2 class="page-header__title">Hướng Dẫn & Góp Ý</h2>
                
                        <div id="usage-counter-display" class="text-sm font-semibold">
                            <span class="text-blue-600">Người dùng:</span>
                            <span id="user-count" class="text-red-600 font-bold">-</span>
                            <span class="text-blue-600 ml-4">Lượt truy cập:</span>
                 
           <span id="visitor-count" class="text-red-600 font-bold">-</span>
                  
                            <span class="text-blue-600 ml-4">Lượt sử dụng:</span>
                            <span id="action-count" class="text-red-600 font-bold">-</span>
                        </div>
                    </div>


                    <div class="content-card">
 
                        <h3 class="content-card__header">Video Hướng Dẫn Sử Dụng Nhanh</h3>
            
                             
  <div id="video-container" class="bg-gray-200 rounded-lg">
                             <iframe
                                class="w-full h-full aspect-video"
                      
          src="https://www.youtube.com/embed/bmImlht_yB4?si=iIo9NZ7wc9FvKZKf"
                                title="YouTube video player"
       
                                 frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                              
  allowfullscreen>
                            </iframe>

                        
 </div>
     
                    </div>


                   <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
                        <div class="flex flex-col">
                   
         <h2 class="text-2xl font-bold text-gray-800 mb-6">Góp ý & Thảo luận</h2>

                            <div id="feedback-composer" class="bg-white rounded-xl shadow-md p-6 border border-gray-200 flex-grow">

 
               
                             </div>
                        </div>

                        <div class="flex flex-col">

            
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Danh sách góp ý</h2>
                            <div id="feedback-list-container" class="bg-white rounded-xl shadow-md p-6 border border-gray-200 flex-grow">
                   
                             <div id="feedback-list" class="space-y-6">

                                </div>
                  
          </div>
                        </div>
                    
  </div>

                    <div class="mt-12">

           
                             <h2 class="text-2xl font-bold text-gray-800 mb-6">Lịch sử cập nhật</h2>
                         <div id="update-history-list" class="space-y-6">

         
                </div>
                    </div>
                </section>

  
               <section id="data-section" class="page-section">
                        <div class="page-header">

 
                             <div class="flex items-center gap-x-3">
                
                <h2 class="page-header__title">Cập nhật dữ liệu</h2>
                                <button class="page-header__help-btn" data-help-id="data"
    title="Xem hướng dẫn">
                                    <i data-feather="help-circle"></i>
         
                                 </button>
             
               </div>
                        <div id="version-marquee-container" class="marquee-container">

             
                           <p class="marquee-text"></p>
                        </div>


          
                        <div class="header-qr-container">

                        
    <span>THAM GIA THẢO LUẬN - GÓP Ý</span>
                             <img id="header-qr-image" src="" alt="Mã QR" class="header-qr-image">

          
               </div>
                    </div>

                    <div id="warehouse-selection-container" class="content-card bg-blue-50 border-blue-300">
 
                        <h3 class="content-card__header !border-blue-300">Kho Làm Việc Hiện Tại</h3>
 
                       <p class="text-sm text-gray-700 mb-2">Chọn kho bạn muốn làm việc. Lựa chọn này sẽ được ghi nhớ. Mọi dữ liệu tải lên sẽ được đồng bộ cho kho đã chọn.</p>
   
                         <div class="max-w-xs">
                            <label for="data-warehouse-selector" class="block text-sm font-medium text-gray-700 mb-1">Mã Kho</label>
        
                             <select id="data-warehouse-selector" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full" disabled>
                                <option>Vui lòng tải file DSNV để chọn kho...</option>
          
                           </select>
                        </div>
                    </div>
    
                    <div class="content-card">

      
                  <div class="flex justify-start items-baseline gap-x-4">
                            <h3 class="content-card__header !mb-0 !border-b-0">DỮ LIỆU CẬP NHẬT HÀNG NGÀY</h3>

                           <a href="#" id="download-bookmark-link" download="QLST_Bookmark.zip" class="data-input-group__link">
                                Tải Bookmark Chrome

       
              
        </a>
                        </div>



                      
   <div class="flex flex-col gap-6 pt-4">

                            <div class="grid md:grid-cols-3 gap-6">
                                <div class="data-input-group">

               
     
                   <a href="https://report.mwgroup.vn/home/dashboard/077" target="_blank" class="data-input-group__label data-input-group__label--link">📄 Yêu cầu xuất lũy kế:</a>

                          
           <div class="data-input-group__content">
                                        <div class="flex items-center gap-2">

                                   
     
                   <label for="file-ycx" class="data-input-group__file-trigger">Thêm file</label>

                                       
     <span id="file-name-ycx" class="data-input-group__file-name">Chưa thêm file</span>
                                        </div>

                                        
   <input type="file" id="file-ycx" class="hidden file-input" data-name="Yêu cầu xuất lũy
    kế" data-state-key="ycxData" data-save-key="saved_ycx" accept=".xlsx, .xls, .csv">
                                  
      <div class="data-input-group__status-wrapper"><span id="file-status-ycx" class="data-input-group__status-text"></span></div>
                                        <div id="progress-ycx" class="progress-bar-container hidden"><div class="progress-bar"></div></div>


                                    
</div>
                                </div>
                      
           <div class="data-input-group">

                                      <a href="https://reports.thegioididong.com/#/viewreport/168754" target="_blank" class="data-input-group__label data-input-group__label--link">📄 Giờ công:</a>

                                  
  <div class="data-input-group__content">

                                         <div class="flex items-center gap-2">

       
                                      <label for="file-giocong" class="data-input-group__file-trigger">Thêm file</label>

                                            <span id="file-name-giocong" class="data-input-group__file-name">Chưa thêm file</span>
 
                                       </div>

    
               
                         <input type="file" id="file-giocong" class="hidden file-input" data-name="Giờ công" data-state-key="rawGioCongData" data-save-key="saved_giocong" accept=".xlsx, .xls, .csv">
                                        <div class="data-input-group__status-wrapper">
            
                                 <span id="file-status-giocong" class="data-input-group__status-text"></span>

                  
  
                     </div>

                                     <div id="progress-giocong" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
                           
         </div>

                                </div>
             
         
                   <div class="data-input-group">

                                      <a href="https://report.mwgroup.vn/home/dashboard/105" target="_blank" class="data-input-group__label data-input-group__label--link">📄 Thưởng nóng:</a>

                         
           <div class="data-input-group__content">
                                        <div class="flex items-center gap-2">

                  
                                      <label for="file-thuongnong" class="data-input-group__file-trigger">Thêm file</label>

                                        
    <span id="file-name-thuongnong" class="data-input-group__file-name">Chưa thêm file</span>
                                        </div>

      
                             
                   <input
    type="file" id="file-thuongnong" class="hidden file-input" data-name="Thưởng nóng" data-state-key="thuongNongData" data-save-key="saved_thuongnong" accept=".xlsx, .xls, .csv">
                                      
  <div class="data-input-group__status-wrapper">
                                             <span id="file-status-thuongnong" class="data-input-group__status-text"></span>


    
                                     </div>
 
                                        <div id="progress-thuongnong" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
         
                           </div>


                           
     </div>
                            </div>
                             <div class="grid md:grid-cols-3 gap-6">
                         
       <div class="data-input-group h-full">

                                    <a href="https://bi.thegioididong.com/reward?id=-1&tab=1" target="_blank" class="data-input-group__label data-input-group__label--link">📋 Thưởng ERP:<br><span class="font-normal">(Copy từ BI)</span></a>
                                    <div class="data-input-group__content">
                    
                                     <textarea id="paste-thuongerp" rows="5" class="data-textarea" placeholder="Dán toàn bộ dữ liệu thưởng ERP..."></textarea>

  
                                      <div class="data-input-group__status-wrapper"><span id="status-thuongerp" class="data-input-group__status-text"></span></div>

             
                         </div>
                                </div>

          
                               <div class="data-input-group h-full">
                                    <a href="https://bi.thegioididong.com/sieu-thi-con?id=16612&tab=1" target="_blank" class="data-input-group__label data-input-group__label--link">📋 Data lũy kế:<br><span class="font-normal">(Copy từ BI)</span></a>

       
                               <div class="data-input-group__content">

                                        <textarea id="paste-luyke" rows="5" class="data-textarea" placeholder="Dán dữ liệu đã sao chép..."></textarea>
         
                               <div class="data-input-group__status-wrapper"><span id="status-luyke" class="data-input-group__status-text"></span></div>

                    
                </div>

                                </div>
                                <div class="data-input-group h-full">
   
           
                            <a href="https://bi.thegioididong.com/sieu-thi-con?id=16758&tab=bcdtnv&rt=2&dm=1" target="_blank" class="data-input-group__label data-input-group__label--link">📋 Thi đua nhân viên:<br><span class="font-normal">(Copy từ BI)</span></a>

               
                     <div class="data-input-group__content">


                                        <textarea id="paste-thiduanv" rows="5" class="data-textarea" placeholder="Dán dữ liệu đã sao chép..."></textarea>
                  
     
                                     <div class="data-input-group__status-wrapper"><span
    id="status-thiduanv" class="data-input-group__status-text"></span></div>


                           
           </div>
                                </div>
                            </div>

                   
     </div>
                    </div>


                    <div class="mb-6">
                        <button id="toggle-debug-btn" class="text-sm text-blue-600 hover:underline">Hiển thị Công cụ Gỡ lỗi</button>
                        <div id="debug-tool-container" class="hidden mt-4 p-4 border-2 border-dashed border-red-300 rounded-lg bg-red-50">

                            <h3 class="text-lg font-bold text-red-700 mb-2">Công cụ Gỡ lỗi & Chẩn đoán</h3>


                
                               <p class="text-sm text-gray-600 mb-4">Công cụ này sẽ tự động kiểm tra các file bạn tải lên và dữ liệu bạn dán vào. Nếu có cột báo <span class="font-bold text-red-600">LỖI</span>, vui lòng kiểm tra lại file hoặc dữ liệu copy.</p>

                            <div id="debug-results-container" class="space-y-4">

                                  <p class="text-gray-500">Chưa có file nào được tải lên để kiểm tra.</p>
                            </div>
                         <div id="pasted-debug-results-container" class="space-y-4 mt-4"></div>

                        </div>
                    </div>



                    <div class="content-card">
             
           <h3 class="content-card__header">DỮ LIỆU CẬP NHẬT 1 THÁNG 1 LẦN</h3>

                        <p class="text-sm text-yellow-600 bg-yellow-50 p-3 rounded-lg mb-4">Lưu ý: Dữ liệu trong phần này sẽ được lưu vào trình duyệt của bạn. Dữ liệu sẽ tồn tại cho đến khi bạn cập nhật lại.</p>



                        <div class="grid md:grid-cols-3 gap-6">

                            <div class="space-y-4">
            
                    <div class="data-input-group">

                                 
  
         <label class="data-input-group__label">📄 Danh sách nhân viên:</label>
                                     <div class="data-input-group__content">

                                        <div class="flex items-center gap-2">

                                              <label for="file-danhsachnv" class="data-input-group__file-trigger">Thêm file</label>

    
           
                                               <span id="file-name-danhsachnv" class="data-input-group__file-name">Chưa thêm file</span>
                                        </div>

     
                                    <button id="download-danhsachnv-template-btn" class="data-input-group__link text-left">Tải file mẫu</button>

             
                 
                       <input type="file" id="file-danhsachnv" class="hidden file-input" data-name="Danh sách nhân viên" data-state-key="danhSachNhanVien" data-save-key="saved_danhsachnv" accept=".xlsx, .xls, .csv">
                                        <div class="data-input-group__status-wrapper">

        
                                   <span
    id="file-status-danhsachnv" class="data-input-group__status-text"></span>
              
                           
 </div>
                                        <div id="progress-danhsachnv" class="progress-bar-container hidden"><div class="progress-bar"></div></div>


                   
                 </div>
                                </div>
     
                           <div class="data-input-group">

        
                                      <label class="data-input-group__label">📄 YCX Lũy Kế tháng trước:</label>

                 
                   <div class="data-input-group__content">
                                  
      <div class="flex items-center gap-2">

                                            <label for="file-ycx-thangtroc" class="data-input-group__file-trigger">Thêm file</label>

                                 
           <span id="file-name-ycx-thangtruoc" class="data-input-group__file-name">Chưa thêm file</span>
                                       
 </div>

                                        <input type="file" id="file-ycx-thangtruoc" class="hidden file-input" data-name="YCX Lũy Kế tháng trước" data-state-key="ycxDataThangTruoc" data-save-key="saved_ycx_thangtruoc" accept=".xlsx, .xls, .csv">

 
                                  
   <div class="data-input-group__status-wrapper">
                                            <span id="file-status-ycx-thangtruoc" class="data-input-group__status-text"></span>

    
                                     </div>

                                          <div id="progress-ycx-thangtruoc" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
       
                             </div>

                         
        </div>
                            </div>

                              <div class="space-y-4">
                       
         <div class="data-input-group">

                                    <label class="data-input-group__label">📄 Thưởng nóng tháng trước:</label>
   
                                  <div class="data-input-group__content">

                                           <div class="flex items-center gap-2">

         
                                   <label for="file-thuongnong-thangtruoc" class="data-input-group__file-trigger">Thêm file</label>
                
                             <span id="file-name-thuongnong-thangtruoc" class="data-input-group__file-name">Chưa thêm file</span>

                                        </div>

                 
                         <input type="file" id="file-thuongnong-thangtruoc" class="hidden file-input" data-name="Thưởng nóng tháng trước" data-state-key="thuongNongDataThangTruoc" data-save-key="saved_thuongnong_thangtruoc" accept=".xlsx, .xls, .csv">
                
                         <div class="data-input-group__status-wrapper">

                                            <span id="file-status-thuongnong-thangtruoc" class="data-input-group__status-text"></span>

                  
                       </div>
                               
         <div id="progress-thuongnong-thangtruoc" class="progress-bar-container hidden"><div class="progress-bar"></div></div>

                                    </div>
                                </div>

        
                          </div>

                            
 <div class="space-y-4">
                                <div class="data-input-group h-full">

                                     <label class="data-input-group__label">📋 Thưởng ERP tháng trước:</label>
            
                        <div class="data-input-group__content">

                             
           <textarea id="paste-thuongerp-thangtruoc" rows="5" class="data-textarea" placeholder="Dán dữ liệu thưởng ERP tháng trước..."></textarea>
                                        <div class="data-input-group__status-wrapper">



                           
                                     <span id="status-thuongerp-thangtruoc" class="data-input-group__status-text"></span>
                                  
       </div>
                                    </div>


                                </div>
               
             </div>
                        </div>
                 
   </div>
                </section>
                <section id="health-section" class="page-section hidden">


                    <div id="health-section-placeholder" class="placeholder-message hidden">Vui lòng cập nhật danh sách nhân viên để xem kết quả.</div>
                 
   <div id="health-section-content">
                        <div class="content-card">
                         
     <div class="page-header border-b pb-4 mb-6">

                                <h2 class="page-header__title">Sức khỏe siêu thị</h2>
                                <button class="page-header__help-btn" data-help-id="luyke" title="Xem hướng dẫn">
        
                            <i data-feather="help-circle"></i>

                         
        </button>


                             </div>
                            <button class="toggle-filters-btn" data-target="luyke-filter-container">
                        
        <span class="text">Hiện bộ lọc nâng cao</span>

                                <i data-feather="chevron-down" class="icon"></i>

       
                        </button>
                            <div id="luyke-filter-container" class="advanced-filters hidden">
                                <div id="luyke-filter-bar" class="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-4">

                                    <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">

        
                                    <div class="md:col-span-2">

                                            <label for="luyke-filter-date" class="block text-sm font-medium text-gray-600 mb-1">Ngày tạo</label>
  
                                          <div class="relative">

           
                                                      <input type="text" id="luyke-filter-date" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full" placeholder="Chọn ngày...">

                           
                     <button id="luyke-clear-date" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-red-500 text-xs">Bỏ chọn</button>
                        
                     </div>


                                            <span id="luyke-date-summary" class="text-xs text-red-500 mt-1 block"></span>
                    
                    </div>
                                  
       <div class="md:col-span-2"><label for="luyke-filter-warehouse" class="block text-sm font-medium text-gray-600 mb-1">Mã Kho</label><select id="luyke-filter-warehouse" class="p-2 border
    rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
                                        <div class="md:col-span-2"><label for="luyke-filter-department" class="block text-sm font-medium text-gray-600 mb-1">Bộ Phận</label><select id="luyke-filter-department" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
        
                                <div class="md:col-span-6"><label for="luyke-filter-name" class="block text-sm font-medium text-gray-600 mb-1">Nhân Viên</label><select id="luyke-filter-name" multiple></select></div>


            
                         </div>
                                    <div class="border-t pt-4 grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
                      
                  <div class="md:col-span-3"><label for="luyke-highlight-nhanhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu
    ngành hàng</label><select id="luyke-highlight-nhanhang" multiple></select></div>

                     
                     <div class="md:col-span-3"><label for="luyke-highlight-nhomhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhóm hàng</label><select id="luyke-highlight-nhomhang" multiple></select></div>
                                        <div class="md:col-span-3"><label for="luyke-highlight-employee" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhân viên</label><select id="luyke-highlight-employee" multiple></select></div>

     
                                   <div class="md:col-span-3 flex items-end gap-2">

               
                                 <div><label for="luyke-highlight-color" class="block text-sm font-medium text-gray-600 mb-1">Chọn màu</label><input type="color" id="luyke-highlight-color" value="#ffff00" class="p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg"></div>

                                      
      <button id="luyke-clear-highlight" class="bg-red-500 text-white px-4 h-10 rounded-lg hover:bg-red-600 transition text-sm">Xóa màu</button>

                                      
     </div>
                                    </div>

                                </div>
                 
           </div>

                         </div>

                  
       <div class="flex justify-between items-center mb-8">

                            <nav id="luyke-subtabs-nav" class="border-b border-gray-200 -mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs" data-content-container="luyke-subtabs-content">
                                <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-luyke-sieu-thi" data-title="SieuThiLuyKe">
                                    <i data-feather="home"></i>
                                     <span>Siêu thị Lũy kế</span>
                                </button>
                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-luyke-thi-dua" data-title="ThiDuaLuyKe">
                                    <i data-feather="award"></i>
           
                             <span>Thi đua Lũy kế</span>
                                </button>
                             
   <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-luyke-thidua-vung" data-title="ThiDuaVung">
                                    <i data-feather="map"></i>
     
                                <span>Thi Đua Vùng TNB</span>
                                </button>
                       
     </nav>
                             <div class="flex items-center gap-x-2">

                 
                  <button id="compose-luyke-notification-btn" class="action-btn action-btn--composer" title="Nhận xét">
                                    <i data-feather="pen-tool"></i>
                              
      <span>Nhận xét</span>
                                </button>


          
            
               <button id="export-luyke-btn" class="action-btn action-btn--export" title="Xuất Excel tab hiện tại">
                                    <i data-feather="download"></i>
                              
      <span>Xuất Excel</span>
                                </button>


               
    
                  <button id="capture-luyke-btn" class="action-btn action-btn--capture" title="Chụp ảnh tab hiện tại">
                                    <i data-feather="camera"></i>
                           
         <span>Chụp màn hình</span>
                                </button>
           
                  </div>
                        </div>

                        <div id="luyke-subtabs-content">

                       
      <div id="subtab-luyke-sieu-thi" class="sub-tab-content space-y-8">

                                <h2 id="luyke-supermarket-title" class="text-2xl font-bold text-center text-gray-700"></h2>
        
                         <div id="luyke-kpi-cards-container" data-capture-group="kpi" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Doanh thu thực</h4>
              
                          <p id="luyke-kpi-dt-thuc-main" class="font-bold mt-2 mb-3">0</p>
                        
                 <p id="luyke-kpi-dt-thuc-sub1" class="text-sm">DK: 0 / Target: 0</p>
                                    </div>
                               
     <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Doanh thu Quy đổi</h4>
                                        
 <p id="luyke-kpi-dt-qd-main" class="font-bold mt-2 mb-3">0</p>
                                        <p id="luyke-kpi-dt-qd-sub1" class="text-sm">DK: 0 / Target: 0</p>
                                    </div>
   
                                 <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Tỷ lệ hoàn thành Target</h4>
           
                                     <p id="luyke-kpi-ht-target-qd-main" class="font-bold mt-2 mb-3">0%</p>
                                        <p id="luyke-kpi-ht-target-thuc-sub" class="text-sm">DT Thực: 0%</p>
            
                        </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Tỷ lệ quy đổi</h4>
                    
                     <p id="luyke-kpi-tl-qd-main" class="font-bold mt-2 mb-3">0%</p>
                                        <p id="luyke-kpi-tl-qd-sub" class="text-sm">Mục tiêu: 0%</p>
                     
               </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Doanh thu trả chậm</h4>
                             
           <p id="luyke-kpi-dt-tc-main" class="font-bold mt-2 mb-3">0</p>
                                        <p id="luyke-kpi-dt-tc-sub" class="text-sm">% thực trả chậm: 0%</p>
                            
        </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">DTQĐ Chưa xuất</h4>
                                     
   <p id="luyke-kpi-dtqd-chua-xuat-main" class="font-bold mt-2 mb-3">0</p>
                                    </div> <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Thi đua ngành hàng</h4>
                 
                                    
    <p id="luyke-kpi-thidua-main" class="font-bold mt-2 mb-3">0%</p>
                                        <p id="luyke-kpi-thidua-sub" class="text-sm">0/0 Ngành</p>
   
                                  </div>
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg"> <h4 class="kpi-card-title">Tăng/giảm cùng kỳ</h4>
            
                            <p id="luyke-kpi-dtck-main" class="font-bold mt-2 mb-3">N/A</p>
                      
                   <p id="luyke-kpi-dtck-sub" class="text-sm">Doanh thu: 0 | 0%</p>
                                        <p id="luyke-kpi-lkck-sub" class="text-sm">Lượt khách: 0 | 0%</p>
                   
                 </div>
                                </div>
     
                               <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">

                                     <div data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold text-gray-700 mb-4 uppercase">Hiệu quả khai thác</h3><div
    
id="luyke-efficiency-content"></div></div>
                                    <div data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold text-gray-700 mb-4 uppercase">Nhóm hàng quy đổi cao</h3><div id="luyke-qdc-content"></div></div>
                                </div>

                                 <div
    class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
                
                    <div data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold text-gray-700 mb-4 uppercase">Ngành hàng chi tiết</h3><div id="luyke-category-details-content"></div></div>

                 
                   <div data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200"><h3 class="text-xl font-bold uppercase mb-4">Doanh thu chưa xuất</h3><div id="luyke-unexported-revenue-content"></div></div>

                                </div>
                      
      </div>
                             <div id="subtab-luyke-thi-dua" class="sub-tab-content hidden space-y-4">
                                 <div class="flex flex-wrap items-center justify-between gap-4">
                                    <div class="flex flex-wrap items-center gap-4">
                            
            <h3 class="text-xl font-bold text-gray-800 uppercase">Thi đua lũy kế <span id="luyke-competition-summary" class="text-sm font-normal"></span></h3>
                                         <div id="luyke-thidua-view-selector" class="view-switcher">
                                            <button data-view="summary" class="view-switcher__btn active">Theo Phân Loại</button>
                             
               <button data-view="completion" class="view-switcher__btn">Theo % Hoàn Thành</button>
                                        </div>
                                    </div>
                                    <div id="luyke-competition-content"></div>
          
                       </div>
                            </div>
    
                         <div id="subtab-luyke-thidua-vung" class="sub-tab-content hidden">
                                <div class="content-card">
                             
       <div class="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                                        <div class="data-input-group">
                                             <div class="flex flex-col sm:flex-row sm:items-center sm:gap-4">
                                         
       <label class="data-input-group__label !mb-2 sm:!mb-0 flex-shrink-0">File Thi Đua Vùng:</label>
                                                 <div class="flex items-center gap-2">
                                                    <label for="file-thidua-vung" class="data-input-group__file-trigger">Thêm file</label>
                       
                             <span id="file-name-thidua-vung" class="data-input-group__file-name">Chưa thêm file</span>
                                                  </div>
                                            </div>
                  
                          <input type="file" id="file-thidua-vung" class="hidden file-input" data-name="Thi đua vùng" accept=".xlsx, .xls, .csv">
                                           <div class="data-input-group__status-wrapper mt-2"><span id="file-status-thidua-vung" class="data-input-group__status-text"></span></div>
                                        </div>
                   
                     <div>
                                             <label for="thidua-vung-filter-supermarket" class="block text-sm font-medium text-gray-600 mb-1">Chọn Siêu thị</label>
                                            <select id="thidua-vung-filter-supermarket"></select>
                         
               </div>
                                    </div>
                                 </div>
                                <div id="thidua-vung-infographic-container">
                           
         <div class="placeholder-message">Vui lòng tải file và chọn một siêu thị để xem báo cáo.</div>
                                
 </div>
                             </div>
                             </div>
                    </div>
           
     </section>

                <section id="health-employee-section" class="page-section hidden">

                      <div id="health-employee-section-placeholder" class="placeholder-message hidden">Vui lòng cập nhật danh sách nhân viên để xem kết quả.</div>
                    <div id="health-employee-section-content">
                        <div class="content-card">

                            <div class="page-header border-b pb-4 mb-6">

     
                          <h2 class="page-header__title">Sức khỏe nhân viên</h2>
                                 <button class="page-header__help-btn" data-help-id="sknv" title="Xem hướng dẫn">
                                    <i data-feather="help-circle"></i>

                                
 </button>

       
                    </div>

                            <button class="toggle-filters-btn" data-target="sknv-filter-container">

    
                             <span class="text">Hiện bộ lọc nâng cao</span>

                                  <i data-feather="chevron-down" class="icon"></i>
                    
        </button>
                            <div id="sknv-filter-container" class="advanced-filters hidden">

               
                 <div id="sknv-filter-bar" class="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-4">

                                       <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
                     
                   <div class="md:col-span-2">

                                  
           <label for="sknv-filter-date" class="block text-sm font-medium text-gray-600 mb-1">Ngày tạo</label>

                                           <div class="relative">

                            
                    <input type="text" id="sknv-filter-date" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full" placeholder="Chọn ngày...">

                                              <button id="sknv-clear-date" class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-red-500 text-xs">Bỏ chọn</button>

                                            </div>
          
                                  <span id="sknv-date-summary" class="text-xs text-red-500 mt-1 block"></span>

               
                               </div>

                                        <div class="md:col-span-2"><label for="sknv-filter-warehouse" class="block text-sm font-medium text-gray-600 mb-1">Mã Kho</label><select id="sknv-filter-warehouse" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
   
                                     <div class="md:col-span-2"><label for="sknv-filter-department" class="block text-sm font-medium text-gray-600 mb-1">Bộ Phận</label><select id="sknv-filter-department" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>

 
                                        <div class="md:col-span-6"><label for="sknv-filter-name" class="block text-sm font-medium text-gray-600 mb-1">Nhân Viên</label><select id="sknv-filter-name" multiple></select></div>
                                    </div>

    
                                   <div class="border-t pt-4 grid grid-cols-1 md:grid-cols-12 gap-4 items-end">

            
                                     <div class="md:col-span-3"><label for="sknv-highlight-nhanhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu ngành hàng</label><select id="sknv-highlight-nhanhang" multiple></select></div>
                                        <div class="md:col-span-3"><label for="sknv-highlight-nhomhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhóm hàng</label><select id="sknv-highlight-nhomhang" multiple></select></div>

                                             <div
    class="md:col-span-3"><label for="sknv-highlight-employee" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhân viên</label><select id="sknv-highlight-employee" multiple></select></div>
                                        <div class="md:col-span-3 flex items-end gap-2">

                                    
           <div><label for="sknv-highlight-color" class="block text-sm font-medium text-gray-600 mb-1">Chọn màu</label><input type="color" id="sknv-highlight-color" value="#ffff00" class="p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg"></div>

                        
                     <button id="sknv-clear-highlight" class="bg-red-500 text-white px-4 h-10 rounded-lg hover:bg-red-600 transition text-sm">Xóa màu</button>
                                        </div>


                   
                 </div>
                                </div>
     
                         </div>
                        </div>



                        <div class="content-card">
                 
           <div class="flex justify-between items-center mb-8">
                                <nav id="employee-subtabs-nav" class="border-b border-gray-200 -mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs" data-content-container="employee-subtabs-content">
                                    <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-sknv" data-title="SKNV">
                                        <i data-feather="users"></i>
                                        <span>SKNV</span>

              
                        </button>
                                    <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-doanhthu-lk" data-title="DoanhThuLK">
                     
                   <i data-feather="dollar-sign"></i>


                                  
        <span>Doanh thu LK</span>
                                     </button>
                                    <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-thunhap" data-title="ThuNhap">


                                        <i data-feather="briefcase"></i>
            
                                     <span>Thu nhập</span>
                                     </button>


                       
             <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-hieu-qua-khai-thac-luy-ke" data-title="HieuQuaKhaiThacLuyKe">
                                
         <i data-feather="bar-chart-2"></i>

                                         <span>Hiệu quả NV LK</span>
 
                                    
</button>
                                    <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-doanhthu-nganhhang" data-title="DTNganhHang">

         
                                         <i data-feather="layers"></i>

                                         <span>DT ngành hàng</span>
             
                       </button>

                               
        <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-hieu-qua-thi-dua-lk" data-title="HieuQuaThiDuaLK">
                                         <i data-feather="award"></i>
                               
          <span>Thi đua NV LK</span>

                                     </button>
    
                                 </nav>
                                 <div class="flex items-center gap-x-2">

                         
           <button id="compose-sknv-notification-btn" class="action-btn action-btn--composer" title="Nhận xét">
                                      
   <i data-feather="pen-tool"></i>
                                         <span>Nhận xét</span>

                                       </button>
      
                              <button id="export-sknv-btn" class="action-btn action-btn--export" title="Xuất Excel tab hiện tại">


                
                           <i data-feather="download"></i>
                                           <span>Xuất Excel</span>
                  
                  </button>

                                    
    <button id="capture-sknv-btn" class="action-btn action-btn--capture" title="Chụp ảnh tab hiện tại">
                                         <i data-feather="camera"></i>
                                    
     <span>Chụp màn hình</span>

                                     </button>
          
                       </div>
                            </div>

                            <div id="employee-subtabs-content">

          
                        <div id="subtab-sknv" class="sub-tab-content">
                            
         <div id="sknv-summary-container"></div>

                                    <div id="sknv-details-container" class="mt-6 hidden">
                                        <p class="text-gray-500">Vui lòng chọn một nhân viên để xem chi tiết.</p>

                                         </div>

    
                             </div>
                                <div id="subtab-doanhthu-lk" class="sub-tab-content hidden space-y-6" data-capture-preset="landscape-table">

                        
            <div id="revenue-report-container-lk"></div>

                                    <div id="dtnv-lk-details-container"></div>
    
                             </div>
                                <div id="subtab-thunhap" class="sub-tab-content hidden space-y-6" data-capture-preset="landscape-table">


                        
               <div id="income-report-placeholder">

                                      
   <p class="text-gray-500 mb-4">Vui lòng tải đủ các file: <b>Danh sách nhân viên, Yêu cầu xuất lũy kế, Giờ công, Thưởng nóng</b> và xử lý <b>Thưởng ERP</b> ở tab Data để xem báo cáo thu nhập.</p>
                                    </div>


                 
                   <div id="income-report-container"></div>
                                </div>
  
                               <div id="subtab-hieu-qua-khai-thac-luy-ke" class="sub-tab-content hidden space-y-6" data-capture-preset="landscape-table">

                                    <div id="efficiency-report-container"></div>

                 
                  </div>
                                <div id="subtab-doanhthu-nganhhang" class="sub-tab-content hidden space-y-6" data-capture-preset="mobile-portrait">
                                    <div id="category-revenue-report-container"></div>

                                </div>


                   
              <div id="subtab-hieu-qua-thi-dua-lk" class="sub-tab-content hidden space-y-6">
                
                <div class="flex justify-start items-center">
                    <div id="sknv-thidua-view-selector" class="view-switcher">
                        <button data-view="program" class="view-switcher__btn active">Theo Chương Trình (Mục tiêu)</button>
                        <button data-view="employee" class="view-switcher__btn">Theo Nhân Viên (Dữ liệu dán)</button>
                    </div>
                </div>

                <div id="competition-report-container-lk" class="mt-4 view-content-program">
                    <p class="text-gray-500">Vui lòng khai báo chương trình thi đua trong "Thiết lập mục tiêu" để xem báo cáo.</p>
                </div>

                <div class="overflow-x-auto">
                    <div id="pasted-competition-report-container" class="mt-4 view-content-employee hidden">
                        <p class="text-gray-500">Vui lòng dán dữ liệu "Thi đua nhân viên" ở tab "Cập nhật dữ liệu" để xem báo cáo.</p>
                    </div>
                </div>

              </div>
              </div>
                        </div>
                    </div>

                </section>
                <section id="realtime-section" class="page-section hidden">
                    <div
    id="realtime-section-placeholder" class="placeholder-message hidden">Vui lòng cập nhật danh sách nhân viên để xem kết quả.</div>
               
     <div id="realtime-section-content">
                        <div class="content-card">

                             <div class="page-header border-b pb-4 mb-6">

                         
       <div class="flex items-center gap-x-3">
                                    <h2 class="page-header__title">Phân Tích Doanh Thu Realtime</h2>

   
                                     <button class="page-header__help-btn" data-help-id="realtime" title="Xem hướng dẫn">
                                        <i data-feather="help-circle"></i>

        
                            </button>

                          
       </div>
                                <div class="flex-shrink-0 flex items-center gap-x-4 ml-auto">

                                    <label for="realtime-file-input" class="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition text-sm font-medium whitespace-nowrap">Thêm file Realtime</label>
                                    <input type="file" id="realtime-file-input" class="hidden" accept=".xlsx, .xls, .csv">


        
                             <a href="https://report.mwgroup.vn/home/dashboard/077" target="_blank" class="text-blue-600 hover:underline whitespace-nowrap text-sm">Lấy file tại đây</a>
                                </div>
                    
        </div>


                              <button class="toggle-filters-btn" data-target="realtime-filter-container">

              
                   <span class="text">Hiện bộ lọc nâng cao</span>

                                <i data-feather="chevron-down" class="icon"></i>
                            </button>
    
                        <div id="realtime-filter-container" class="advanced-filters hidden">

                           
     <div id="realtime-filter-bar" class="p-4 bg-slate-50 border border-slate-200 rounded-lg space-y-4">
                                    <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">
                                    
    <div class="md:col-span-3"><label
    for="realtime-filter-warehouse" class="block text-sm font-medium text-gray-600 mb-1">Mã Kho</label><select id="realtime-filter-warehouse" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>

                               
             <div class="md:col-span-3"><label for="realtime-filter-department" class="block text-sm font-medium text-gray-600 mb-1">Bộ Phận</label><select id="realtime-filter-department" class="p-2 border rounded-lg text-sm bg-white shadow-sm w-full"></select></div>
                                        <div class="md:col-span-6"><label for="realtime-filter-name" class="block text-sm font-medium text-gray-600 mb-1">Nhân Viên</label><select
    id="realtime-filter-name" multiple></select></div>

        
                              </div>
                        
             <div class="border-t pt-4 grid grid-cols-1 md:grid-cols-12 gap-4 items-end">

                                        <div class="md:col-span-3"><label for="realtime-highlight-nhanhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu ngành hàng</label><select id="realtime-highlight-nhanhang" multiple></select></div>

                  
                      <div class="md:col-span-3"><label for="realtime-highlight-nhomhang" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhóm hàng</label><select id="realtime-highlight-nhomhang" multiple></select></div>
                    
                     <div class="md:col-span-3"><label for="realtime-highlight-employee" class="block text-sm font-medium text-gray-600 mb-1">Tô màu nhân viên</label><select id="realtime-highlight-employee" multiple></select></div>

                                        <div class="md:col-span-3 flex items-end gap-2">

             
                                <div><label for="realtime-highlight-color" class="block text-sm font-medium text-gray-600 mb-1">Chọn màu</label><input type="color" id="realtime-highlight-color" value="#ffff00" class="p-1 h-10 w-14 block bg-white border border-gray-300 cursor-pointer rounded-lg"></div>

   
                                          <button id="realtime-clear-highlight" class="bg-red-500 text-white px-4 h-10 rounded-lg hover:bg-red-600 transition text-sm">Xóa màu</button>


                                      
     </div>
                                    </div>

             
                   </div>
                            </div>
                         </div>


                  
         <div class="flex justify-between items-center mb-8">

                                <nav id="realtime-subtabs-nav" class="border-b border-gray-200 -mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs" data-content-container="realtime-subtabs-content">
                                <button class="sub-tab-btn active whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-sieu-thi" data-title="SieuThiRealtime">
                                    <i data-feather="zap"></i>


          
                          <span>Siêu thị Realtime</span>
                          
       </button>
                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-nhan-vien" data-title="DTNVRealtime">

                                    <i data-feather="pie-chart"></i>


     
                              <span>DT NV Realtime</span>
                      
           </button>
                                <button
    class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-hieu-qua" data-title="HieuQuaKhaiThacRealtime">

                                   
  <i data-feather="bar-chart-2"></i>
                                    <span>Hiệu quả NV Realtime</span>
            
                     </button>

                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-nganh-hang" data-title="NganhHangRealtime">

                            
          <i data-feather="tag"></i>
                                    <span>Ngành hàng Realtime</span>

     
                            </button>
                                <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-realtime-hang" data-title="HangRealtime">


                     
               <i data-feather="globe"></i>

                                    <span>DT Hãng Realtime</span>
                                </button>


                                  <button class="sub-tab-btn whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" data-target="subtab-hieu-qua-thi-dua-realtime" data-title="HieuQuaThiDuaRealtime">

              
                      <i data-feather="award"></i>
                               
      <span>Thi đua NV Realtime</span>
                                </button>


                             </nav>

                    
            <div class="flex items-center gap-x-2">
                                <button id="compose-realtime-notification-btn" class="action-btn action-btn--composer" title="Nhận xét">
  
                                   <i data-feather="pen-tool"></i>


                                     <span>Nhận xét</span>
                
                </button>
                                <button id="export-realtime-btn" class="action-btn action-btn--export" title="Xuất Excel tab hiện tại">

                                    <i data-feather="download"></i>

                                         <span>Xuất Excel</span>
        
                        </button>
                              
   <button id="capture-realtime-btn" class="action-btn action-btn--capture" title="Chụp ảnh tab hiện tại">

                                    <i data-feather="camera"></i>


                                         <span>Chụp màn hình</span>
                                </button>

                     
        </div>
                        </div>


                         <div id="realtime-subtabs-content">
                             <div id="subtab-realtime-sieu-thi" class="sub-tab-content space-y-8">

                                <h2 id="realtime-supermarket-title" class="text-2xl font-bold text-center text-gray-700"></h2>

                 
                      <div id="realtime-kpi-cards-container" data-capture-group="kpi" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg">

                      
                  <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Doanh thu thực</h4>

                              
                 <p id="rt-kpi-dt-thuc-main" class="font-bold mt-2 mb-3">0</p>
                                        <p id="rt-kpi-dt-thuc-sub1" class="text-sm">% HT: <span class="kpi-percentage-value">0%</span> / Target: 0</p>

                     
                   <p id="rt-kpi-dt-thuc-sub2" class="text-sm mt-1">DT Chưa xuất: 0</p>

                             
        </div>
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg">

                                        <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Doanh thu Quy đổi</h4>
                                        <p id="rt-kpi-dt-qd-main" class="font-bold mt-2 mb-3">0</p>


     
                                    <p id="rt-kpi-dt-qd-sub1" class="text-sm">% HT: <span class="kpi-percentage-value">0%</span> / Target: 0</p>
                                        <p id="rt-kpi-dt-qd-sub2" class="text-sm mt-1">DTQĐ Chưa xuất: 0</p>

                                    </div>


                  
                   <div class="kpi-card p-6 rounded-2xl shadow-lg">
                                         <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Tỷ lệ quy đổi</h4>
                   
                     <p id="rt-kpi-tl-qd-main" class="font-bold mt-2 mb-3 kpi-percentage-value">0%</p>


                            
             <p id="rt-kpi-tl-qd-sub" class="text-sm">Mục tiêu: 0%</p>
                                    </div>
                                    <div class="kpi-card p-6 rounded-2xl shadow-lg">

         
                                        <h4 class="kpi-card-title font-semibold uppercase tracking-wider">Doanh thu trả chậm</h4>

    
                                     <p id="rt-kpi-dt-tc-main" class="font-bold mt-2 mb-3">0</p>

                                        <p id="rt-kpi-dt-tc-sub" class="text-sm">% thực trả chậm: <span class="kpi-percentage-value">0%</span></p>


  
                                </div>
                      
           </div>


                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">

                                          
 <div id="realtime-qdc-panel" data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200">
                                        <h3 id="realtime-qdc-title" class="text-xl font-bold text-gray-700 mb-4 uppercase
    flex items-center gap-2"><span>NHÓM HÀNG QUY ĐỔI CAO</span></h3>
                                        <div id="realtime-qdc-content"><p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p></div>
                          
           </div>

                                    <div id="realtime-category-panel" data-capture-group="1" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200">


                                          <h3 id="realtime-category-title" class="text-xl font-bold text-gray-700 mb-4 uppercase flex items-center gap-2">
                                     
       <span>NGÀNH HÀNG CHI TIẾT</span>

                                         </h3>
    
                                     <div id="realtime-category-details-content"><p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p></div>



                                    </div>
      
                           </div>
                            
     <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">

                                          <div id="realtime-efficiency-panel" data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200">

                             
               <h3 id="realtime-efficiency-title" class="text-xl font-bold text-gray-700 mb-4 uppercase bg-yellow-100 text-yellow-800 p-2 rounded-md">HIỆU QUẢ KHAI THÁC</h3>
                           
                <div id="realtime-efficiency-content"><p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p></div>


                                    </div>
                            
        <div id="realtime-unexported-revenue-panel" data-capture-group="2" class="bg-white rounded-xl shadow-md p-4 sm:p-6 border border-gray-200 flex flex-col">
                                   
       <h3 class="text-xl font-bold uppercase mb-4 bg-red-100 text-red-800 p-2 rounded-md">DOANH THU CHƯA
    XUẤT</h3>

                                          <div id="realtime-unexported-revenue-content" class="flex-grow"><p class="text-gray-500 font-bold text-center">Vui lòng tải file realtime để xem chi tiết.</p></div>
              
                      </div>

                                
 </div>
                            </div>

                             <div id="subtab-realtime-nhan-vien" class="sub-tab-content hidden space-y-4" data-capture-preset="large-font-report">
                           
     <div id="realtime-employee-detail-container"></div>

                                <div id="realtime-revenue-report-container"></div>
               
             </div>
                            <div id="subtab-realtime-hieu-qua" class="sub-tab-content hidden space-y-4" data-capture-preset="landscape-table">
                                <div id="realtime-efficiency-report-container"></div>

          
                  </div>
                            <div id="subtab-realtime-nganh-hang" class="sub-tab-content hidden space-y-4" data-capture-preset="mobile-portrait">
                                 <div id="realtime-category-revenue-report-container"></div>
                            </div>

                            <div id="subtab-realtime-hang" class="sub-tab-content hidden space-y-4">
                                <div class="content-card" data-capture-group="1">
                                  <div class="flex flex-wrap items-center justify-between gap-4 mb-4">

                                        <h3 class="text-xl font-bold text-gray-700 uppercase">Thống kê theo Hãng</h3>
                  
                      <div id="dthang-realtime-view-selector" class="view-switcher">
                                           <button data-view="brand" class="view-switcher__btn active">Theo Hãng</button>

                                            <button data-view="employee" class="view-switcher__btn">Theo Nhân viên</button>
                       
                 </div>

                                     </div>
                                     <div class="flex flex-wrap items-center gap-4 mb-4">
                                        <div>

 
         
                                   <label for="realtime-brand-category-filter" class="font-semibold text-sm text-gray-600">Ngành hàng:</label>
                                           <select id="realtime-brand-category-filter" class="p-2 border rounded-lg text-sm bg-white shadow-sm mt-1"></select>
                                        </div>

           
   
                             <div>

                         
                                     <label for="realtime-brand-filter" class="font-semibold text-sm text-gray-600">Hãng:</label>
                                            <select id="realtime-brand-filter"
    class="p-2 border rounded-lg text-sm bg-white shadow-sm mt-1"></select>
          
                              </div>
                        
             </div>


                                    <div id="realtime-brand-report-container">
                                        
 <div id="realtime-brand-table-container"></div>
                                        <div id="realtime-employee-table-container"
    class="hidden"></div>
       
                             </div>
                                </div>
                            
</div>

                             <div id="subtab-hieu-qua-thi-dua-realtime" class="sub-tab-content hidden space-y-6">
                      
           <div id="competition-report-container-rt">
                                     <p class="text-gray-500">Vui lòng khai báo chương trình thi đua trong "Thiết lập mục tiêu" để xem báo cáo.</p>

                        
        </div>
                            </div>
                  
           </div>
                    </div>
                </section>

                <section id="declaration-section" class="page-section hidden">
                    <h2 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-6">Khai báo dữ liệu</h2>
                    
                    <div class="content-card">
                         <p class="text-sm text-yellow-600 bg-yellow-50 p-3 rounded-lg mb-4">Lưu ý: Dữ liệu khai báo tại đây sẽ được lưu vào trình duyệt và sử dụng cho các logic tính toán. Chỉnh sửa và nhấn "Lưu" để cập nhật.</p>

                        <div class="space-y-0"> 
                            
                            <details class="declaration-group" open>
                                <summary>Khai báo Danh mục & Cấu trúc</summary>
                                <div class="declaration-content">
                                    <div class="grid md:grid-cols-2 gap-6 mt-4">
                                        <div class="data-input-group">
                                            <label class="data-input-group__label">Danh mục Ngành hàng - Nhóm hàng - Hãng:</label>
                                            <div class="data-input-group__content">
                                                <div class="flex items-center gap-2">
                                                    <label for="file-category-structure" class="data-input-group__file-trigger">Thêm file Excel</label>
                                                    <span id="file-name-category-structure" class="data-input-group__file-name">Chưa thêm file</span>
                                                </div>
                                                <p class="text-xs text-gray-500">File Excel có 2 sheet: sheet đầu tiên có cột "Ngành hàng", "Nhóm hàng"; sheet thứ hai tên là "Hãng" có 1 cột chứa tên các hãng.</p>
                                                <input type="file" id="file-category-structure" class="hidden file-input" data-name="Danh mục Ngành/Nhóm hàng" data-state-key="categoryStructure" data-save-key="saved_category_structure" accept=".xlsx, .xls, .csv">
                                                <div class="data-input-group__status-wrapper">
                                                    <span id="file-status-category-structure" class="data-input-group__status-text"></span>
                                                    <span id="category-structure-saved-status" class="data-input-group__status-text"></span>
                                                </div>
                                                <div id="progress-category-structure" class="progress-bar-container hidden"><div class="progress-bar"></div></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </details>

                            <details class="declaration-group">
                                <summary>Dữ liệu tính toán</summary>
                                <div class="declaration-content">
                                    <div class="grid md:grid-cols-2 gap-6 mt-4">
                                        <div>
                                            <label for="declaration-ycx" class="block text-md font-semibold text-gray-700 mb-2">Hình thức xuất (Tính doanh thu)</label>
                                            <textarea id="declaration-ycx" rows="8" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm" placeholder="Dán danh sách các loại YCX vào đây, mỗi loại một dòng..."></textarea>
                                        </div>
                                        <div>
                                            <label for="declaration-ycx-gop" class="block text-md font-semibold text-gray-700 mb-2">Hình thức xuất (Trả góp)</label>
                                            <textarea id="declaration-ycx-gop" rows="8" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm" placeholder="Dán danh sách các loại YCX Góp vào đây, mỗi loại một dòng..."></textarea>
                                        </div>
                                        <div class="md:col-span-2">
                                            <label for="declaration-heso" class="block text-md font-semibold text-gray-700 mb-2">Hệ số quy đổi</label>
                                            <textarea id="declaration-heso" rows="8" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm" placeholder="Dán danh sách hệ số quy đổi vào đây, định dạng: Tên nhóm hàng,Hệ số"></textarea>
                                        </div>
                                    </div>
                                    <div class="mt-4">
                                        <button id="save-declaration-btn" class="bg-indigo-600 text-white px-6 py-2 rounded-lg hover:bg-indigo-700 transition">Lưu Dữ liệu tính toán</button>
                                    </div>
                                </div>
                            </details>

                            <details class="declaration-group">
                                <summary>Khai báo Tên Rút Gọn (Thi Đua NV)</summary>
                                <div class="declaration-content">
                                    <p class="text-sm text-gray-600 mt-4 mb-4">Dữ liệu dán ở tab "Cập nhật dữ liệu" sẽ tự động trích xuất tên chương trình thi đua gốc vào đây. Hãy nhập "Tên Rút Gọn" để bảng biểu hiển thị gọn gàng hơn. Thay đổi sẽ được <strong>tự động lưu</strong>.</p>
                                    <div id="competition-name-mapping-container" class="max-h-96 overflow-y-auto pr-2">
                                        <p class="text-gray-500 italic">Vui lòng dán dữ liệu "Thi đua nhân viên" ở tab "Cập nhật dữ liệu" để hệ thống tự động trích xuất tên...</p>
                                    </div>
                                </div>
                            </details>

                            <details class="declaration-group">
                                <summary>Nội dung Hướng dẫn</summary>
                                <div class="declaration-content">
                                    <div class="grid md:grid-cols-1 gap-6 mt-4">
                                        <div>
                                            <label for="edit-help-data" class="block text-md font-semibold text-gray-700 mb-2">Hướng dẫn Tab Cập nhật dữ liệu</label>
                                            <textarea id="edit-help-data" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Cập nhật dữ liệu..."></textarea>
                                        </div>
                                        <div>
                                            <label for="edit-help-luyke" class="block text-md font-semibold text-gray-700 mb-2">Hướng dẫn Tab Lũy kế</label>
                                            <textarea id="edit-help-luyke" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Lũy kế..."></textarea>
                                        </div>
                                        <div>
                                            <label for="edit-help-sknv" class="block text-md font-semibold text-gray-700 mb-2">Hướng dẫn Tab Sức khỏe NV</label>
                                            <textarea id="edit-help-sknv" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Sức khỏe NV..."></textarea>
                                        </div>
                                        <div>
                                            <label for="edit-help-realtime" class="block text-md font-medium text-gray-700 mb-2">Hướng dẫn Tab Realtime</label>
                                            <textarea id="edit-help-realtime" rows="6" class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm" placeholder="Nhập nội dung hướng dẫn cho tab Realtime..."></textarea>
                                        </div>
                                    </div>
                                    <div class="mt-4">
                                        <button id="save-help-content-btn" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition">Lưu Hướng dẫn</button>
                                    </div>
                                </div>
                            </details>

                        </div>
                    </div>

                    <details class="declaration-group content-card mt-8">
                        <summary>Thống kê Người dùng</summary>
                        <div class="declaration-content !p-0">
                            <div id="user-stats-container" class="mt-4">
                                <p class="text-gray-500">Đang tải danh sách người dùng...</p>
                            </div>
                        </div>
                    </details>
                </section>
                </div>
        </main>
    </div>

    <div id="modal-force-update-container"></div>
    <div id="notification"></div>
    <div id="modal-admin-container"></div>
    <div id="modal-login-container"></div>
    <div id="modal-help-container"></div>
   
 <div id="modal-chart-container"></div>
    <div id="modal-composer-container"></div>
    <div id="modal-preview-container"></div>
    <div id="modal-selection-container"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
        
     const tailwindScript = document.querySelector('script[src="https://cdn.tailwindcss.com"]');
            if (tailwindScript && window.location.protocol !== "file:") {
                console.warn("cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation");
            }
        });
    </script>
    <script type="module" src="./main.js?v=3.6"></script> </body>
</html>
--- END FILE: ./index.html ---

--- START FILE: ./main.js ---
// Version 4.43 - Add deep logging for saving/loading pasted data (Debug Problem 1)
// Version 4.42 - Fix restore pasted data (raw text) & luyke parsing on load; Fix "cache" status text; Update file status for cloud categories
// Version 4.41 - Load competitionNameMappings from Firestore in continueInit
// Version 4.40 - Update handleThiduaNVPaste with new parsing/mapping logic
// Version 4.39 - Load competitionNameMappings from localStorage
// MODULE 5: BỘ ĐIỀU KHIỂN TRUNG TÂM (MAIN)
// File này đóng vai trò điều phối, nhập khẩu các module khác và khởi chạy ứng dụng.

import { config } from './config.js';
import { appState } from './state.js';
import { services } from './services.js';
import { ui } from './ui.js';
import { firebase } from './firebase.js';
import { auth } from './auth.js';
import { luykeTab } from './tab-luyke.js';
import { sknvTab } from './tab-sknv.js';
import { uiRealtime } from './ui-realtime.js';
import { initializeEventListeners } from './event-listeners/ui-listeners.js';
import { sidebar } from './components/sidebar.js';
import { storage } from './modules/storage.js';
import { drawerInterface } from './components/drawer-interface.js';
import { drawerGoal } from './components/drawer-goal.js';
import { modalForceUpdate } from './components/modal-force-update.js';
import { modalAdmin } from './components/modal-admin.js';
import { modalLogin } from './components/modal-login.js';
import { modalHelp } from './components/modal-help.js';
import { modalChart } from './components/modal-chart.js';
import { modalComposer } from './components/modal-composer.js';
import { modalPreview } from './components/modal-preview.js';
import { modalSelection } from './components/modal-selection.js';
import { settingsService } from './modules/settings.service.js';
import { highlightService } from './modules/highlight.service.js';
import { uiComponents } from './ui-components.js';

const LOCAL_DATA_VERSIONS_KEY = '_localDataVersions';
const LOCAL_METADATA_PREFIX = '_localMetadata_';
const LOCAL_DSNV_FILENAME_KEY = '_localDsnvFilename'; // Key for DSNV filename
const RAW_PASTE_THIDUANV_KEY = 'raw_paste_thiduanv'; // === FIX 2a.2 (Thêm) ===

const ALL_DATA_MAPPING = {
    // Daily Files
    'ycx': { stateKey: 'ycxData', saveKey: 'saved_ycx', isPasted: false, uiId: 'ycx', firestoreKey: 'ycx' },
    'giocong': { stateKey: 'rawGioCongData', saveKey: 'saved_giocong', isPasted: false, uiId: 'giocong', firestoreKey: 'giocong' },
    'thuongnong': { stateKey: 'thuongNongData', saveKey: 'saved_thuongnong', isPasted: false, uiId: 'thuongnong', firestoreKey: 'thuongnong' },
    // Daily Pasted
    'pastedLuykeBI': { stateKey: null, saveKey: 'daily_paste_luyke', isPasted: true, uiId: 'status-luyke', firestoreKey: 'pastedLuykeBI' },
    'pastedThuongERP': { stateKey: 'thuongERPData', saveKey: 'daily_paste_thuongerp', isPasted: true, uiId: 'status-thuongerp', firestoreKey: 'pastedThuongERP', processFunc: services.processThuongERP },
    'pastedThiduaNVBI': { stateKey: 'pastedThiDuaReportData', saveKey: 'daily_paste_thiduanv', isPasted: true, uiId: 'status-thiduanv', firestoreKey: 'pastedThiduaNVBI' }, // *** MODIFIED (v4.40) ***
    // Previous Month Files
    'ycx-thangtruoc': { stateKey: 'ycxDataThangTruoc', saveKey: 'saved_ycx_thangtruoc', isPasted: false, uiId: 'ycx-thangtruoc', firestoreKey: 'ycx_thangtruoc' },
    'thuongnong-thangtruoc': { stateKey: 'thuongNongDataThangTruoc', saveKey: 'saved_thuongnong_thangtruoc', isPasted: false, uiId: 'thuongnong-thangtruoc', firestoreKey: 'thuongnong_thangtruoc' },
    // Previous Month Pasted
    'pastedThuongERPThangTruoc': { stateKey: 'thuongERPDataThangTruoc', saveKey: 'saved_thuongerp_thangtruoc', isPasted: true, uiId: 'status-thuongerp-thangtruoc', firestoreKey: 'pastedThuongERPThangTruoc', processFunc: services.processThuongERP }
};

const app = {
    currentVersion: '3.5', // Giữ nguyên version này, bạn có thể tự cập nhật sau khi tích hợp xong
    storage: storage,
    unsubscribeDataListener: null,
    _isInitialized: false,
    _localDataVersions: {},

    async init() {
        try {
            await firebase.initCore();
            console.log("Rendering static UI components...");
            sidebar.render('#sidebar-container');
            drawerInterface.render('#interface-drawer-container');
            drawerGoal.render('#goal-drawer-container');
            modalForceUpdate.render('#modal-force-update-container');
            modalAdmin.render('#modal-admin-container');
            await modalLogin.render('#modal-login-container');
            console.log("[main.js init] Finished awaiting modalLogin.render.");
            modalHelp.render('#modal-help-container');
            modalChart.render('#modal-chart-container');
            modalComposer.render('#modal-composer-container');
            modalPreview.render('#modal-preview-container');
            modalSelection.render('#modal-selection-container');
            feather.replace();
            console.log("Static UI components rendered.");

            console.log("Ensuring anonymous authentication...");
            const user = await auth.ensureAnonymousAuth();

            if (user && !this._isInitialized) {
                this._isInitialized = true;
                console.log("Anonymous auth confirmed. Setting up listeners and email identification...");
                firebase.setupListeners();
                console.log("[main.js init] Calling auth.initEmailIdentification...");
                auth.initEmailIdentification(this.continueInit.bind(this));
            } else if (user && this._isInitialized) {
                console.log("App already initialized, skipping init steps.");
            }

        } catch (error) {
            console.error("Lỗi nghiêm trọng trong quá trình khởi tạo ứng dụng:", error);
            ui.showNotification("Lỗi khởi tạo. Vui lòng thử tải lại trang.", "error");
            const mainContent = document.getElementById('main-content');
            if (mainContent) {
                 mainContent.innerHTML = '<div class="placeholder-message notification-error">Lỗi nghiêm trọng, không thể khởi động ứng dụng. Vui lòng kiểm tra kết nối mạng, cài đặt Firebase Rules và thử lại.</div>';
            }
        }
    },

    async continueInit() {
        if (!appState.currentUser || !appState.currentUser.email) {
             console.error("continueInit called without user email in appState.");
             ui.showNotification("Lỗi: Không tìm thấy thông tin người dùng.", "error");
             return;
        }
        console.log(`Email identification complete: ${appState.currentUser.email}. Continuing app initialization...`);

        // *** >>> SỬA LỖI ĐẾM LƯỢT TRUY CẬP: GỌI HÀM ĐẾM Ở ĐÂY <<< ***
        firebase.upsertUserRecord(appState.currentUser.email);
        // *** >>> KẾT THÚC SỬA LỖI <<< ***

        appState.competitionConfigs = [];
        appState.viewingDetailFor = null;

        try {
            const storedVersions = localStorage.getItem(LOCAL_DATA_VERSIONS_KEY);
            if (storedVersions) {
                this._localDataVersions = JSON.parse(storedVersions);
                console.log("%c[continueInit] Loaded _localDataVersions from localStorage:", "color: brown;", this._localDataVersions);
            } else {
                this._localDataVersions = {};
                console.log("%c[continueInit] No _localDataVersions found in localStorage, initialized as {}.", "color: brown;");
            }
        } catch (e) {
            console.error("%cError loading _localDataVersions from localStorage:", "color: red;", e);
            this._localDataVersions = {};
        }

        this.loadAndApplyBookmarkLink();
        this.loadAndDisplayQrCode();
        this.setupMarquee();
        await this.storage.openDB();
        console.log("Loading category data from Firestore...");
        try {
            const { categories, brands } = await firebase.loadCategoryDataFromFirestore();
            appState.categoryStructure = categories;
            appState.brandList = brands;
            console.log(`Successfully populated ${appState.categoryStructure.length} categories and ${appState.brandList.length} brands from Firestore.`);
            
            // === FIX 1a (Thêm) ===
            // Cập nhật trạng thái UI sau khi tải từ cloud, thay vì để trống
            uiComponents.updateFileStatus('category-structure', 'Tải từ Cloud', `✓ Đã tải ${categories.length} nhóm & ${brands.length} hãng.`, 'success', false);
            // === END FIX ===

        } catch (error) {
             console.error("Error loading category data after auth:", error);
             ui.showNotification("Không thể tải cấu trúc ngành hàng từ cloud.", "error");
        }

        console.log("Loading calculation declarations from Firestore...");
        try {
            const declarations = await firebase.loadDeclarationsFromFirestore();
            appState.declarations = declarations;
            const decYcxEl = document.getElementById('declaration-ycx');
            if (decYcxEl) decYcxEl.value = declarations.hinhThucXuat || config.DEFAULT_DATA.HINH_THUC_XUAT_TINH_DOANH_THU.join('\n');
            const decYcxGopEl = document.getElementById('declaration-ycx-gop');
            if (decYcxGopEl) decYcxGopEl.value = declarations.hinhThucXuatGop || config.DEFAULT_DATA.HINH_THUC_XUAT_TRA_GOP.join('\n');
            const decHeSoEl = document.getElementById('declaration-heso');
            if (decHeSoEl) decHeSoEl.value = declarations.heSoQuyDoi || Object.entries(config.DEFAULT_DATA.HE_SO_QUY_DOI).map(([k, v]) => `${k},${v}`).join('\n');
        } catch (error) {
             console.error("Error loading declarations after auth:", error);
             ui.showNotification("Không thể tải khai báo tính toán từ cloud.", "error");
        }
        
        // *** NEW (v4.41): Load competition name mappings from Firestore ***
        console.log("Loading competition name mappings from Firestore...");
        try {
            appState.competitionNameMappings = await firebase.loadCompetitionNameMappings();
            console.log("Successfully loaded competition name mappings from Firestore.");
        } catch (error) {
             console.error("Error loading competition name mappings:", error);
             ui.showNotification("Không thể tải tên rút gọn (thi đua) từ cloud.", "error");
             appState.competitionNameMappings = {}; // Ensure it's an object on failure
        }
        // *** END NEW ***

         initializeEventListeners(this);
        await this.loadDataFromStorage();

        const savedWarehouse = localStorage.getItem('selectedWarehouse');
        if (savedWarehouse) {
            appState.selectedWarehouse = savedWarehouse;
            if(this.unsubscribeDataListener) this.unsubscribeDataListener();
            console.log(`Re-attaching listener for saved warehouse: ${savedWarehouse}`);
            this.unsubscribeDataListener = firebase.listenForDataChanges(savedWarehouse, (cloudData) => {
                this.handleCloudDataUpdate(cloudData);
            });

            console.log(`%c[continueInit] Checking sync status for warehouse ${savedWarehouse} (AFTER loadDataFromStorage)...`, "color: teal; font-weight: bold;");

            const fileDataTypes = Object.keys(ALL_DATA_MAPPING).filter(k => !ALL_DATA_MAPPING[k].isPasted);

            fileDataTypes.forEach(fileTypeKey => {
                const mappingInfo = ALL_DATA_MAPPING[fileTypeKey];
                if (!mappingInfo) return;

                const { firestoreKey, uiId } = mappingInfo;
                const metadata = this._getSavedMetadata(savedWarehouse, firestoreKey);
                const localVersionInfo = this._localDataVersions?.[savedWarehouse]?.[firestoreKey] || { version: 0, timestamp: 0 };

                console.log(`%c[continueInit] --> Checking ${firestoreKey}:`, "color: teal;");
                console.log(`%c    Metadata (localStorage):`, "color: teal;", metadata ? `v${metadata.version}, ts ${metadata.timestamp}, by ${metadata.updatedBy}` : 'null');
                console.log(`%c    Local Version Info (_localDataVersions):`, "color: teal;", `v${localVersionInfo.version}, ts ${localVersionInfo.timestamp}`);

                const fileStatusSpan = document.getElementById(`file-status-${uiId}`);
                // === FIX 2b.1 (Sửa) ===
                // Thay đổi cách kiểm tra 'cache', vì chúng ta sẽ hiển thị số dòng
                const currentStatusIsCache = fileStatusSpan?.textContent?.includes('Đã tải');

                if (currentStatusIsCache) {
                     if (metadata && metadata.version > localVersionInfo.version) {
                        console.log(`%c[continueInit] Cache loaded for ${firestoreKey}, but cloud v${metadata.version} is newer. Showing download button.`, "color: orange;");
                        uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', '', 'default', true, metadata, firestoreKey, savedWarehouse);
                     } else {
                         console.log(`%c[continueInit] UI status for ${firestoreKey} was set by loadDataFromStorage (cache) and is up-to-date. Keeping it.`, "color: green;");
                     }
                } else if (metadata) {
                    if (metadata.version > localVersionInfo.version) {
                        uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', '', 'default', true, metadata, firestoreKey, savedWarehouse);
                        console.log(`%c[continueInit] UI status for ${firestoreKey} requires download (Cloud v${metadata.version} > Local v${localVersionInfo.version}).`, "color: green;");
                    } else {
                         uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', '', 'default', true, metadata, firestoreKey, savedWarehouse);
                        console.log(`%c[continueInit] UI status for ${firestoreKey} requires download (v${metadata.version}). Cache empty or not loaded.`, "color: orange;");
                    }
                } else {
                    uiComponents.updateFileStatus(uiId, '', `Đang chờ đồng bộ từ kho ${savedWarehouse}...`, 'default');
                    console.log(`%c[continueInit] No metadata for ${firestoreKey}, waiting for sync.`, "color: orange;");
                }
            });
            console.log(`%c[continueInit] Finished checking sync status.`, "color: teal; font-weight: bold;");

        } else {
             Object.keys(ALL_DATA_MAPPING).filter(k => !ALL_DATA_MAPPING[k].isPasted).forEach(fileTypeKey => {
                 uiComponents.updateFileStatus(ALL_DATA_MAPPING[fileTypeKey].uiId, '', 'Chọn kho để đồng bộ...', 'default');
             });
             const dsnvFilename = localStorage.getItem(LOCAL_DSNV_FILENAME_KEY);
             if (!dsnvFilename) {
                 uiComponents.updateFileStatus('danhsachnv', '', 'Chưa thêm file', 'default');
             }
        }

        if (appState.danhSachNhanVien.length > 0) {
            uiComponents.populateWarehouseSelector();
        } else {
             console.error("[main.js continueInit] CRITICAL: appState.danhSachNhanVien is empty! Warehouse selector cannot be populated.");
             const selector = document.getElementById('data-warehouse-selector');
             if (selector) {
                 selector.innerHTML = '<option value="">-- Vui lòng tải Danh sách Nhân viên --</option>';
                 selector.disabled = true;
             }
        }

        settingsService.loadInterfaceSettings();
        settingsService.applyContrastSetting();
        settingsService.loadHighlightSettings();
        ui.populateAllFilters();
        settingsService.loadAndApplyLuykeGoalSettings();
        settingsService.loadAndApplyRealtimeGoalSettings();
        this.loadPastedDataFromStorage();
        this.switchTab('data-section');
        this.checkForUpdates();
        setInterval(() => this.checkForUpdates(), 15 * 60 * 1000);
    },

    async handleCloudDataUpdate(cloudData) {
        // ... (Giữ nguyên)
        const receivedTime = new Date().toLocaleTimeString();
        console.log(`%c[handleCloudDataUpdate @ ${receivedTime}] Received data snapshot from Firestore listener:`, "color: blue; font-weight: bold;", JSON.stringify(cloudData).substring(0, 500) + "...");
        let showSyncNotification = false;

        const currentWarehouse = appState.selectedWarehouse;
        if (!currentWarehouse) {
            console.warn(`[handleCloudDataUpdate @ ${receivedTime}] Received update but no warehouse selected. Ignoring.`);
            return;
        }

        for (const [dataType, mappingInfo] of Object.entries(ALL_DATA_MAPPING)) {
            const cloudMetadata = cloudData[dataType];
            const { stateKey, saveKey, isPasted, uiId, processFunc } = mappingInfo;

            if (dataType === 'giocong' || dataType === 'thuongnong' || dataType.startsWith('pasted')) {
                console.log(`%c[handleCloudDataUpdate @ ${receivedTime}] --> Processing METADATA for WATCHED dataType: ${dataType}`, "color: fuchsia; font-weight: bold;", cloudMetadata);
            }

            if (cloudMetadata && typeof cloudMetadata === 'object' && cloudMetadata.version !== undefined && cloudMetadata.timestamp !== undefined) {

                const updatedBy = cloudMetadata.updatedBy;
                const cloudServerTimestampObj = cloudMetadata.updatedAt;
                 const updatedTime = cloudServerTimestampObj
                    ? ui.formatTimeAgo(cloudServerTimestampObj.toDate ? cloudServerTimestampObj.toDate() : new Date(cloudServerTimestampObj))
                    : 'vừa xong';


                const cloudVersion = cloudMetadata.version || 0;
                const cloudLocalTimestamp = cloudMetadata.timestamp || 0;
                const rowCount = cloudMetadata.rowCount || 0;
                const fileName = cloudMetadata.fileName || 'Cloud';

                const localVersionInfo = this._localDataVersions?.[currentWarehouse]?.[dataType] || { version: 0, timestamp: 0 };
                const lastLocalVersion = localVersionInfo.version;
                const lastLocalTimestamp = localVersionInfo.timestamp;

                let shouldUpdateLocalInfo = false;
                if (cloudVersion > lastLocalVersion) {
                    shouldUpdateLocalInfo = true;
                } else if (cloudVersion === lastLocalVersion && cloudLocalTimestamp > lastLocalTimestamp) {
                  shouldUpdateLocalInfo = true;
                }

                if (shouldUpdateLocalInfo) {
                    const metadataKey = `${LOCAL_METADATA_PREFIX}${currentWarehouse}_${dataType}`;
                    try {
                        localStorage.setItem(metadataKey, JSON.stringify(cloudMetadata));
                        console.log(`%c[handleCloudDataUpdate @ ${receivedTime}] Saved received metadata for ${dataType} @ ${currentWarehouse} to localStorage ('${metadataKey}').`, "color: green; font-weight: bold;");
                    } catch (e) {
                        console.error(`Error saving metadata for ${dataType} to localStorage:`, e);
                    }

                    if (appState.currentUser && updatedBy === appState.currentUser.email) {
                        if (isPasted) {
                            let processedCount = 0;
                            // *** MODIFIED (v4.40) ***
                            // Logic đếm số lượng cho pastedThiduaNVBI đã được chuyển sang hàm handleThiduaNVPaste
                            // Ở đây chỉ cần cập nhật trạng thái chung
                            if (stateKey && processFunc && cloudMetadata.content && dataType !== 'pastedThiduaNVBI') {
                                try {
                                     const processed = processFunc(cloudMetadata.content);
                                    processedCount = processed?.length || 0;
                                } catch (e) { console.error(`Error processing pasted content during status update for ${dataType}:`, e); }
                            } else if (dataType === 'pastedThiduaNVBI') {
                                // Tải lại dữ liệu đã xử lý từ localStorage (do chính người dùng này lưu)
                                const processedData = JSON.parse(localStorage.getItem(saveKey) || '[]');
                                processedCount = processedData.length;
                            }
                             uiComponents.updatePasteStatus(uiId, '', 'success', cloudMetadata, processedCount);
                        } else {
                             uiComponents.updateFileStatus(uiId, fileName, '', 'success', false, cloudMetadata);
                        }
                    } else {
                        showSyncNotification = true;
                        if (isPasted) {
                            console.log(`%c[handleCloudDataUpdate] Pasted data ${dataType} is new. Processing content...`, "color: darkcyan; font-weight: bold;");
                            const content = cloudMetadata.content || '';
                            let processedCount = 0;
                            try {
                                 // *** MODIFIED (v4.40) ***
                                 if (dataType === 'pastedThiduaNVBI') {
                                    // Đây là logic quan trọng: Dữ liệu thi đua cần chạy qua BỘ XỬ LÝ ĐẦY ĐỦ
                                    // 1. Phân tích cú pháp
                                    const parsedData = services.parsePastedThiDuaTableData(content);
                                    if (!parsedData.success) throw new Error(parsedData.error);
                                    
                                    // 2. Cập nhật Bảng Ánh Xạ (nhưng không ghi đè tên rút gọn đã có)
                                    services.updateCompetitionNameMappings(parsedData.mainHeaders);
                                    
                                    // 3. Chuẩn hóa (tra cứu DSNV, áp dụng tên rút gọn)
                                    const processedData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
                                    
                                    // 4. Lưu kết quả đã xử lý (KHÔNG LƯU NỘI DUNG THÔ)
                                    appState[stateKey] = processedData;
                                    localStorage.setItem(saveKey, JSON.stringify(processedData)); // Lưu mảng đã xử lý
                                    processedCount = processedData.length;

                                    // === FIX 2a.1 (Thêm) ===
                                    localStorage.setItem(RAW_PASTE_THIDUANV_KEY, content); // Lưu cả text thô
                                    const el = document.getElementById('paste-thiduanv');
                                    if (el) el.value = content;
                                    // === END FIX ===

                                } else {
                                    // Logic cũ cho các ô dán khác
                                    localStorage.setItem(saveKey, content);
                                    if (stateKey && processFunc) {
                                         const processedData = processFunc(content);
                                        appState[stateKey] = processedData;
                                        processedCount = processedData?.length || 0;
                                    } else if (stateKey) {
                                        console.warn(`Missing processFunc for pasted data ${dataType}`);
                                    } else if (uiId === 'status-luyke') {
                                        document.getElementById('paste-luyke').value = content;
                                    }
                                }
                                // *** END MODIFIED (v4.40) ***

                                if (!this._localDataVersions[currentWarehouse]) this._localDataVersions[currentWarehouse] = {};
                                this._localDataVersions[currentWarehouse][dataType] = { version: cloudVersion, timestamp: cloudLocalTimestamp };
                                localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(this._localDataVersions));

                                uiComponents.updatePasteStatus(uiId, '', 'success', cloudMetadata, processedCount);
                                this.updateAndRenderCurrentTab();
                                // Cập nhật bảng khai báo nếu admin đang mở
                                if (dataType === 'pastedThiduaNVBI' && appState.isAdmin && document.getElementById('declaration-section')?.classList.contains('hidden') === false) {
                                    ui.renderAdminPage();
                                }
                            } catch (e) {
                                console.error(`Error processing pasted data ${dataType} from cloud:`, e);
                                uiComponents.updatePasteStatus(uiId, `Lỗi xử lý v${cloudVersion} từ cloud.`, 'error');
                            }
                        } else {
                            uiComponents.updateFileStatus(uiId, fileName, '', 'default', true, cloudMetadata, dataType, currentWarehouse);
                        }
                    }
                } else {
                    const reasonText = '';
                    if (appState.currentUser && updatedBy === appState.currentUser.email) {
                         const statusText = `✓ Đã đồng bộ cloud ${updatedTime} ${reasonText}`.trim();
                         isPasted ? uiComponents.updatePasteStatus(uiId, statusText, 'success', cloudMetadata) : uiComponents.updateFileStatus(uiId, fileName, statusText, 'success', false, cloudMetadata);
                    } else {
                         const statusText = `ⓘ ${updatedBy} cập nhật ${updatedTime} ${reasonText}`.trim();
                          isPasted ? uiComponents.updatePasteStatus(uiId, statusText, 'default', cloudMetadata) : uiComponents.updateFileStatus(uiId, fileName, statusText, 'default', false, cloudMetadata);
                    }
                }
            } else {
                 if (dataType === 'giocong' || dataType === 'thuongnong' || dataType.startsWith('pasted')) {
                     console.warn(`%c[handleCloudDataUpdate @ ${receivedTime}] No valid METADATA structure found (version or timestamp missing) for WATCHED dataType ${dataType}. Received:`, "color: red; font-weight: bold;", cloudMetadata);
                 }
            }
        }
        if (showSyncNotification) {
            ui.showNotification('Có bản cập nhật dữ liệu mới từ cloud!', 'success');
        }
    },

    async handleDownloadAndProcessData(dataType, warehouse) {
        // ... (Giữ nguyên)
        console.log(`%c[handleDownloadAndProcessData] User requested download for ${dataType} @ ${warehouse}`, "color: darkcyan; font-weight: bold;");
        const metadataKey = `${LOCAL_METADATA_PREFIX}${warehouse}_${dataType}`;

        const mappingInfo = Object.values(ALL_DATA_MAPPING).find(m => m.firestoreKey === dataType);

        if (!mappingInfo || mappingInfo.isPasted) {
            console.error(`[handleDownloadAndProcessData] Invalid or non-file dataType: ${dataType}`);
            ui.showNotification(`Lỗi: Loại dữ liệu không hợp lệ (${dataType}).`, 'error');
            return;
        }
        const { stateKey, saveKey, uiId } = mappingInfo;

        let metadata;

        try {
            const storedMetadata = localStorage.getItem(metadataKey);
            if (!storedMetadata) {
                throw new Error(`Không tìm thấy thông tin đồng bộ (${metadataKey}) trong localStorage.`);
            }
            metadata = JSON.parse(storedMetadata);
            const downloadURL = metadata.downloadURL;
            const expectedVersion = metadata.version;
            const expectedTimestamp = metadata.timestamp;
            const expectedFileName = metadata.fileName || `${dataType}_v${expectedVersion}.xlsx`;

            if (!downloadURL) {
                 throw new Error("URL tải xuống không hợp lệ trong thông tin đồng bộ.");
            }

            uiComponents.updateFileStatus(uiId, expectedFileName, `Đang tải file...`, 'default', false);
            ui.showProgressBar(uiId);

            console.log(`[handleDownloadAndProcessData] Fetching file from: ${downloadURL}`);
            const response = await fetch(downloadURL);
            if (!response.ok) {
                throw new Error(`Tải file thất bại: ${response.status} ${response.statusText}`);
            }
            const fileBlob = await response.blob();
            console.log(`[handleDownloadAndProcessData] File downloaded successfully. Blob size: ${fileBlob.size}`);
            const downloadedFile = new File([fileBlob], expectedFileName, { type: fileBlob.type });

            uiComponents.updateFileStatus(uiId, expectedFileName, `Đang xử lý file...`, 'default');

            const workbook = await this.handleFileRead(downloadedFile);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);

            const normalizeType = dataType.replace('_thangtruoc', '');

            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, normalizeType);
            console.log(`[handleDownloadAndProcessData] File processing result - Success: ${success}, Rows: ${normalizedData?.length}`);

            if (!success) {
                 throw new Error(`File tải về lỗi: Thiếu cột ${missingColumns.join(', ')}.`);
            }

            appState[stateKey] = normalizedData;
            if (saveKey) {
                console.log(`[handleDownloadAndProcessData] Saving downloaded & processed data (${normalizedData.length} rows) to cache: ${saveKey}`);
                await this.storage.setItem(saveKey, normalizedData);
            }

            if (!this._localDataVersions[warehouse]) this._localDataVersions[warehouse] = {};
            this._localDataVersions[warehouse][dataType] = { version: expectedVersion, timestamp: expectedTimestamp };
            try {
                localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(this._localDataVersions));
                console.log(`%c[handleDownloadAndProcessData] CRITICAL FIX: Updated local version tracker to (v${expectedVersion}, t${expectedTimestamp}) and saved to localStorage.`, "color: purple; font-weight: bold;");
            } catch (e) {
                 console.error("[handleDownloadAndProcessData] Error saving updated versions/timestamps to localStorage:", e);
            }

            uiComponents.updateFileStatus(uiId, expectedFileName, '', 'success', false, metadata);
            ui.showNotification(`Đã tải và xử lý thành công dữ liệu ${dataType} (v${expectedVersion})!`, 'success');

            this.updateAndRenderCurrentTab();

        } catch (error) {
            console.error(`%c[handleDownloadAndProcessData] Error processing ${dataType} @ ${warehouse}:`, "color: red;", error);
            ui.showNotification(`Lỗi khi tải/xử lý dữ liệu ${dataType}: ${error.message}`, 'error');
             if (metadata) {
                  const statusText = `Lỗi tải/xử lý. Thử lại?`;
                   uiComponents.updateFileStatus(uiId, metadata.fileName || 'Cloud', statusText, 'error', true, metadata, dataType, warehouse);
             } else {
                  const fallbackMetadata = this._getSavedMetadata(warehouse, dataType);
                  if(fallbackMetadata) {
                      const statusText = `Lỗi tải/xử lý. Thử lại?`;
                      uiComponents.updateFileStatus(uiId, fallbackMetadata.fileName || 'Cloud', statusText, 'error', true, fallbackMetadata, dataType, warehouse);
                  } else {
                      uiComponents.updateFileStatus(uiId, 'Cloud', 'Lỗi tải/xử lý. Không tìm thấy thông tin.', 'error', false);
                  }
             }
        } finally {
            ui.hideProgressBar(uiId);
        }
    },

    _getSavedMetadata(warehouse, dataType) {
        // ... (Giữ nguyên)
        const metadataKey = `${LOCAL_METADATA_PREFIX}${warehouse}_${dataType}`;
        try {
            const storedMetadata = localStorage.getItem(metadataKey);
            return storedMetadata ? JSON.parse(storedMetadata) : null;
        } catch (e) {
            console.error(`Error reading metadata ${metadataKey} from localStorage:`, e);
            return null;
        }
    },

    async setupMarquee() {
        // ... (Giữ nguyên)
        const marqueeContainer = document.getElementById('version-marquee-container');
        const marqueeText = marqueeContainer?.querySelector('.marquee-text');
        if (!marqueeContainer || !marqueeText) return;
        try {
            const versionRes = await fetch(`./version.json?v=${new Date().getTime()}`);
            const versionInfo = await versionRes.json();
            const currentVersion = versionInfo.version || this.currentVersion;
            marqueeText.textContent = `🔥 Chi tiết bản cập nhật - Phiên bản ${currentVersion}`;
            marqueeContainer.addEventListener('click', async () => {
                 try {
                    const changelogRes = await fetch(`./changelog.json?v=${new Date().getTime()}`);
                    const changelogData = await changelogRes.json();
                    const modalTitle = document.getElementById('help-modal-title');
                    const modalContent = document.getElementById('help-modal-content');
                    if (modalTitle) modalTitle.textContent = "Lịch Sử Cập Nhật";
                    if (modalContent) modalContent.innerHTML = this._formatChangelogForModal(changelogData);
                    ui.toggleModal('help-modal', true);
                } catch (error) {
                    console.error("Lỗi khi tải hoặc hiển thị changelog:", error);
                    ui.showNotification("Không thể tải chi tiết cập nhật.", "error");
                }
            });
        } catch (error) {
            console.error("Lỗi khi thiết lập marquee:", error);
            marqueeText.textContent = "Không thể tải thông tin phiên bản.";
        }
    },

    _formatChangelogForModal(changelogData) {
        // ... (Giữ nguyên)
        if (!changelogData || changelogData.length === 0) return '<p>Không có lịch sử cập nhật.</p>';
        return changelogData.map(item => `
            <div class="mb-4 pb-4 border-b last:border-b-0">
                <h4 class="font-bold text-blue-600 mb-2">Phiên bản ${item.version} (${item.date})</h4>
                <ul class="list-disc list-inside text-gray-700 space-y-1 text-sm">
                    ${item.notes.map(note => `<li>${note}</li>`).join('')}
                </ul>
            </div>
        `).join('');
    },

    async checkForUpdates() {
        // ... (Giữ nguyên)
        try {
            const response = await fetch(`./version.json?v=${new Date().getTime()}`);
            if (!response.ok) return;
            const serverConfig = await response.json();
            if (serverConfig.version && serverConfig.version !== this.currentVersion) {
                 console.log(`Phiên bản mới ${serverConfig.version} đã sẵn sàng!`);
                const changelogRes = await fetch(`./changelog.json?v=${new Date().getTime()}`);
                const changelogData = await changelogRes.json();
                const newVersionDetails = changelogData.find(log => log.version === serverConfig.version);
                const titleEl = document.getElementById('force-update-title');
                const notesContainer = document.getElementById('update-notes-container');
                if (titleEl) titleEl.textContent = `📢 Đã có phiên bản mới ${serverConfig.version}!`;
                if (notesContainer && newVersionDetails && newVersionDetails.notes) {
                    notesContainer.innerHTML = `
                        <p class="text-sm font-semibold text-gray-700 mb-2">Nội dung cập nhật:</p>
                        <ul class="list-disc list-inside text-sm text-gray-600 space-y-1">
                             ${newVersionDetails.notes.map(note => `<li>${note}</li>`).join('')}
                         </ul>
                    `;
                } else if (notesContainer) {
                    notesContainer.innerHTML = '<p class="text-sm text-gray-500">Không thể tải chi tiết cập nhật.</p>';
                }
                ui.toggleModal('force-update-modal', true);
            }
        } catch (error) {
             console.error('Không thể kiểm tra phiên bản mới:', error);
        }
    },

    async loadDataFromStorage() {
        // ... (Giữ nguyên)
 
        let dsnvLoadSuccess = false;
        const loadSavedFile = async (saveKey, stateKey, fileType, uiId) => {
            console.log(`[main.js loadDataFromStorage] Attempting to load ${saveKey} from IndexedDB...`);
            let savedData = null;
            try {
                savedData = await this.storage.getItem(saveKey);
            } catch (indexedDbError) {
                 console.error(`[main.js loadDataFromStorage] CRITICAL Error reading ${saveKey} from IndexedDB:`, indexedDbError);
                 uiComponents.updateFileStatus(uiId, '', `Lỗi đọc cache IndexedDB!`, 'error');
                 if (saveKey === 'saved_danhsachnv') {
                     const selector = document.getElementById('data-warehouse-selector');
                     if (selector) {
                         selector.innerHTML = '<option value="">Lỗi tải DSNV từ cache!</option>';
                         selector.disabled = true;
                     }
                 }
                 return;
            }

            if (!savedData) {
                console.log(`[main.js loadDataFromStorage] ${saveKey} not found in IndexedDB.`);
                return;
            }

            console.log(`[main.js loadDataFromStorage] Found ${saveKey} in IndexedDB.`);
            try {
                if (saveKey === 'saved_category_structure') {
                     if (appState.categoryStructure.length > 0 || appState.brandList.length > 0) {
                        // Đã được xử lý bởi logic Fix 1a, không cần làm gì ở đây
                    }
                    return;
                }
                const normalizedData = savedData;
                if (normalizedData && Array.isArray(normalizedData) && normalizedData.length > 0) {
                    console.log(`[main.js loadDataFromStorage] Successfully validated data for ${saveKey}, ${normalizedData.length} rows.`);
                    appState[stateKey] = normalizedData;

                    let fileNameToShow = `Cache (${normalizedData.length} dòng)`;
                    // === FIX 2b.1 (Sửa) ===
                    let statusText = `✓ Đã tải ${normalizedData.length} dòng`;
                    let statusType = 'success';
                    let metadata = null;

                    const mappingEntry = Object.values(ALL_DATA_MAPPING).find(m => m.saveKey === saveKey);
                    const firestoreKey = mappingEntry ? mappingEntry.firestoreKey : null;

                    if (saveKey === 'saved_danhsachnv') {
                         dsnvLoadSuccess = true;
                         fileNameToShow = localStorage.getItem(LOCAL_DSNV_FILENAME_KEY) || fileNameToShow;
                    } else if (firestoreKey && !mappingEntry.isPasted) {
                         const currentWarehouse = localStorage.getItem('selectedWarehouse');
                         if (currentWarehouse) {
                             metadata = this._getSavedMetadata(currentWarehouse, firestoreKey);
                             if (metadata) {
                                  fileNameToShow = metadata.fileName || fileNameToShow;
                                 console.log(`[main.js loadDataFromStorage] Found metadata for ${firestoreKey}, will use it in status update.`);
                             } else {
                                 console.log(`[main.js loadDataFromStorage] No metadata found in localStorage for ${firestoreKey}, using basic cache status.`);
                             }
                         } else {
                             console.log(`[main.js loadDataFromStorage] No warehouse selected, using basic cache status for ${firestoreKey}.`);
                         }
                    }

                    uiComponents.updateFileStatus(uiId, fileNameToShow, statusText, statusType, false, metadata);

                    if (stateKey === 'danhSachNhanVien') {
                        console.log("[main.js loadDataFromStorage] Updating employee maps after loading DSNV from cache.");
                        services.updateEmployeeMaps();
                    }
                } else {
                     console.error(`[main.js loadDataFromStorage] Invalid or empty data array found in cache for ${saveKey}.`);
                     uiComponents.updateFileStatus(uiId, '', `Lỗi dữ liệu cache.`, 'error');
                     try {
                         await this.storage.setItem(saveKey, null);
                         console.log(`[main.js loadDataFromStorage] Cleared potentially corrupted cache for ${saveKey}.`);
                     } catch(clearError) {
                         console.error(`[main.js loadDataFromStorage] Failed to clear corrupted cache for ${saveKey}:`, clearError);
                     }
                }
             } catch (e) {
                console.error(`[main.js loadDataFromStorage] Lỗi xử lý ${saveKey} từ IndexedDB:`, e);
                uiComponents.updateFileStatus(uiId, '', `Lỗi xử lý cache.`, 'error');
            }
        };

        await loadSavedFile('saved_danhsachnv', 'danhSachNhanVien', 'danhsachnv', 'danhsachnv');
        if (!dsnvLoadSuccess) {
              console.error("[main.js loadDataFromStorage] CRITICAL: Failed to load 'saved_danhsachnv' from IndexedDB. App state might be incorrect.");
            const selector = document.getElementById('data-warehouse-selector');
             if (selector) {
                 selector.innerHTML = '<option value="">Lỗi tải DSNV từ cache!</option>';
                 selector.disabled = true;
             }
        }

        await loadSavedFile('saved_ycx_thangtruoc', 'ycxDataThangTruoc', 'ycx', 'ycx-thangtruoc');
        await loadSavedFile('saved_thuongnong_thangtruoc', 'thuongNongDataThangTruoc', 'thuongnong', 'thuongnong-thangtruoc');
        await loadSavedFile('saved_ycx', 'ycxData', 'ycx', 'ycx');
        await loadSavedFile('saved_giocong', 'rawGioCongData', 'giocong', 'giocong');
        await loadSavedFile('saved_thuongnong', 'thuongNongData', 'thuongnong', 'thuongnong');

        try {
             const savedLuykeGoals = localStorage.getItem('luykeGoalSettings');
            if(savedLuykeGoals) appState.luykeGoalSettings = JSON.parse(savedLuykeGoals);
            const savedRealtimeGoals = localStorage.getItem('realtimeGoalSettings');
            if (savedRealtimeGoals) appState.realtimeGoalSettings = JSON.parse(savedRealtimeGoals);
            const savedTemplates = localStorage.getItem('composerTemplates');
            if (savedTemplates) {
                let parsedTemplates = JSON.parse(savedTemplates);
                for (const key in parsedTemplates) {
                    if (typeof parsedTemplates[key] === 'string') {
                        const oldString = parsedTemplates[key];
                        parsedTemplates[key] = {};
                        if (key === 'luyke') parsedTemplates[key]['subtab-luyke-sieu-thi'] = oldString;
                        else if (key === 'sknv') parsedTemplates[key]['subtab-sknv'] = oldString;
                        else if (key === 'realtime') parsedTemplates[key]['subtab-realtime-sieu-thi'] = oldString;
                    }
                }
                appState.composerTemplates = parsedTemplates;
            } else {
                appState.composerTemplates = { luyke: {}, sknv: {}, realtime: {} };
            }
            const savedCompetition = localStorage.getItem('competitionConfigs');
            if (savedCompetition) appState.competitionConfigs = JSON.parse(savedCompetition);
            
            // *** MODIFIED (v4.41): REMOVED localStorage load for competitionNameMappings ***
            // (Nó sẽ được tải từ Firestore trong continueInit)
            
            const savedPastedThiDua = localStorage.getItem('daily_paste_thiduanv');
            if (savedPastedThiDua) {
                try {
                    // Lưu ý: Chúng ta lưu mảng ĐÃ XỬ LÝ, không phải text thô
                    appState.pastedThiDuaReportData = JSON.parse(savedPastedThiDua); 
                    console.log(`[main.js loadDataFromStorage] Loaded ${appState.pastedThiDuaReportData.length} rows of processed pasted competition data.`);
                } catch (e) {
                    console.error("Lỗi đọc daily_paste_thiduanv từ localStorage:", e);
                    appState.pastedThiDuaReportData = [];
                }
            }
            // *** END MODIFIED ***

        } catch (e) { console.error("Lỗi đọc cài đặt từ localStorage:", e); }
    },

    loadPastedDataFromStorage() {
        // === START: DEBUG (v4.43) ===
        console.log("%c[DEBUG loadPastedDataFromStorage] Bắt đầu tải dữ liệu dán...", "color: brown; font-weight: bold;");
        // === END: DEBUG ===

        const loadPasted = (saveKey, stateKey, uiId, processFunc) => {
            // === START: DEBUG (v4.43) ===
            console.log(`%c[DEBUG loadPastedDataFromStorage] Đang xử lý key: ${saveKey}`, "color: brown;");
            // === END: DEBUG ===
            
            const pastedText = localStorage.getItem(saveKey); // Đây là text thô (ngoại trừ daily_paste_thiduanv)
            
            // === START: DEBUG (v4.43) ===
            if (pastedText) {
                console.log(`%c[DEBUG loadPastedDataFromStorage]   > Tìm thấy dữ liệu cho ${saveKey}. (Độ dài: ${pastedText.length})`, "color: green;");
            } else {
                console.log(`%c[DEBUG loadPastedDataFromStorage]   > Không tìm thấy dữ liệu cho ${saveKey} trong localStorage.`, "color: red;");
            }
            // === END: DEBUG ===

            if (pastedText) {
                 const el = document.getElementById(uiId.replace('status-', 'paste-'));
                 
                 // === FIX 2a.2 (Sửa) ===
                 // Không điền text thô cho ô thi đua NV, vì chúng ta lưu *dữ liệu đã xử lý* vào key đó
                 if (el && saveKey !== 'daily_paste_thiduanv') {
                    el.value = pastedText;
                 }
                 // === END FIX ===

                let processedCount = 0;
                
                // === FIX 2a.2 (Sửa) ===
                if (saveKey === 'daily_paste_thiduanv') {
                    // Dữ liệu đã được tải vào appState.pastedThiDuaReportData trong loadDataFromStorage
                    processedCount = appState.pastedThiDuaReportData.length;
                } 
                // === END FIX ===
                else if (stateKey && processFunc) {
                    const processedData = processFunc(pastedText);
                    appState[stateKey] = processedData;
                    processedCount = processedData?.length || 0;
                } else if (uiId === 'status-luyke') {
                    // === FIX 2a.3 (Thêm) ===
                    // Xử lý ngay dữ liệu Lũy kế dán vào để appState.competitionData sẵn sàng
                    try {
                       services.parseCompetitionDataFromLuyKe(pastedText);
                       console.log("[loadPastedData] Parsed luyke paste data from cache.");
                    } catch(e) {
                       console.warn("Lỗi xử lý 'paste-luyke' từ cache khi tải trang:", e);
                    }
                    // === END FIX ===
                }


                const kho = localStorage.getItem('selectedWarehouse');
                const mappingInfo = Object.values(ALL_DATA_MAPPING).find(m => m.saveKey === saveKey);
                let metadata = null;
                if (kho && mappingInfo) {
                    metadata = this._getSavedMetadata(kho, mappingInfo.firestoreKey);
                    if (metadata) {
                         uiComponents.updatePasteStatus(uiId, '', 'success', metadata, processedCount);
                    } else {
                         // === FIX 2b.2 (Sửa) ===
                         let countMsg = processedCount > 0 ? `(${processedCount} NV)` : '';
                         if (uiId === 'status-luyke') countMsg = ''; // Lũy kế không đếm
                         uiComponents.updatePasteStatus(uiId, `✓ Đã tải ${countMsg} (chưa đồng bộ)`, 'success', null, processedCount);
                    }
                } else if (pastedText) {
                     // === FIX 2b.2 (Sửa) ===
                     let countMsg = processedCount > 0 ? `(${processedCount} NV)` : '';
                     if (uiId === 'status-luyke') countMsg = '';
                     uiComponents.updatePasteStatus(uiId, `✓ Đã tải ${countMsg} (chưa chọn kho)`, 'success', null, processedCount);
                }
            }
        };

        loadPasted('saved_thuongerp_thangtruoc', 'thuongERPDataThangTruoc', 'status-thuongerp-thangtruoc', services.processThuongERP);
        loadPasted('daily_paste_luyke', null, 'status-luyke', null);
        loadPasted('daily_paste_thiduanv', 'pastedThiDuaReportData', 'status-thiduanv', null); // *** MODIFIED (v4.40) ***
        loadPasted('daily_paste_thuongerp', 'thuongERPData', 'status-thuongerp', services.processThuongERP);

        // === FIX 2a.2 (Thêm) - Xử lý tải lại raw text cho Thi đua NV ===
        const rawThiDuaPaste = localStorage.getItem(RAW_PASTE_THIDUANV_KEY);
        // === START: DEBUG (v4.43) ===
        if (rawThiDuaPaste) {
            console.log(`%c[DEBUG loadPastedDataFromStorage]   > Tìm thấy dữ liệu THÔ cho ${RAW_PASTE_THIDUANV_KEY}. (Độ dài: ${rawThiDuaPaste.length})`, "color: green;");
        } else {
            console.log(`%c[DEBUG loadPastedDataFromStorage]   > Không tìm thấy dữ liệu cho ${RAW_PASTE_THIDUANV_KEY} trong localStorage.`, "color: red;");
        }
        // === END: DEBUG ===
        if (rawThiDuaPaste) {
            const el = document.getElementById('paste-thiduanv');
            if (el) el.value = rawThiDuaPaste;
        }
        // === END FIX ===
    },


    async handleFileInputChange(e) {
        // ... (Giữ nguyên như phiên bản bạn cung cấp - đã có log chi tiết)
        const fileInput = e.target;
        const file = fileInput.files[0];
        const fileType = fileInput.id.replace('file-', '');

        const mappingInfo = Object.values(ALL_DATA_MAPPING).find(m => m.uiId === fileType);

        if (!file) return;

        if (!mappingInfo) {
            if (fileType === 'danhsachnv') {
                return this.handleDsnvUpload(e, file);
            }
            console.error(`[handleFileInputChange] No mapping info found for fileType: ${fileType}`);
            return;
        }

        const { stateKey, saveKey, firestoreKey } = mappingInfo;
        const dataName = fileInput.dataset.name || fileType;
        uiComponents.updateFileStatus(fileType, file.name, 'Đang đọc & chuẩn hóa...', 'default');
        ui.showProgressBar(fileType);

        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const normalizeType = fileType.replace('-thangtruoc', '');
            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, normalizeType);
            ui.displayDebugInfo(fileType);

            if (!success) {
                 const errorMessage = `Lỗi file "${dataName}": Thiếu cột: ${missingColumns.join(', ')}.`;
                 uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Thiếu cột dữ liệu.`, 'error');
                 ui.showNotification(errorMessage, 'error');
                 if (document.getElementById('debug-tool-container')?.classList.contains('hidden')) {
                     document.getElementById('toggle-debug-btn')?.click();
                 }
                 ui.hideProgressBar(fileType);
                 return;
            }

            appState[stateKey] = normalizedData;
            ui.showNotification(`Tải thành công file "${dataName}"!`, 'success');

            if (saveKey) {
                console.log(`[handleFileInputChange] Saving normalized data (${normalizedData.length} rows) to cache: ${saveKey}`);
                await this.storage.setItem(saveKey, normalizedData);
                console.log(`%c[DEBUG POST-CACHE] Successfully saved ${fileType} to cache. Proceeding...`, "color: brown;");
            }

            // --- Section before sync check ---
            let warehouseToSync = null;
            let currentFirestoreKey = null;
            try {
                console.log("[DEBUG STEP 1] Getting warehouseToSync..."); // Log added
                warehouseToSync = appState.selectedWarehouse;
                console.log(`[DEBUG STEP 2] warehouseToSync = ${warehouseToSync}`); // Log added
        
                console.log("[DEBUG STEP 3] Getting firestoreKey..."); // Log added
                currentFirestoreKey = firestoreKey; // Use the firestoreKey from mappingInfo
                console.log(`[DEBUG STEP 4] firestoreKey = ${currentFirestoreKey}`); // Log added

                console.log(`%c[DEBUG PRE-SYNC CHECK] File Type: ${fileType}, Warehouse: ${warehouseToSync}, Firestore Key: ${currentFirestoreKey}`, "color: purple; font-weight: bold;");

                if (warehouseToSync && currentFirestoreKey) {
                     console.log(`%c[DEBUG SYNC BLOCK START] Entering cloud sync block for ${fileType} (Firestore Key: ${currentFirestoreKey})`, "color: magenta;");

                    uiComponents.updateFileStatus(fileType, file.name, `Đang chuẩn bị đồng bộ cloud...`, 'default');
                    let localDataVersions = this._localDataVersions;
                    const currentVersion = localDataVersions?.[warehouseToSync]?.[currentFirestoreKey]?.version || 0;
                    const newVersion = currentVersion + 1;
                    const uploadTimestamp = Date.now();

                    const fileExtension = file.name.substring(file.name.lastIndexOf('.'));
                    const storagePath = `uploads/${warehouseToSync}/${currentFirestoreKey}_v${newVersion}${fileExtension}`;

                    console.log(`%c[handleFileInputChange] Cloud Upload for ${currentFirestoreKey}:`, "color: magenta; font-weight: bold;");

                    const onProgress = (progress) => {
                         uiComponents.updateFileStatus(fileType, file.name, `Đang tải lên cloud... ${Math.round(progress)}%`, 'default');
                    };

                    try {
                        const downloadURL = await firebase.uploadFileToStorage(file, storagePath, onProgress);
                        uiComponents.updateFileStatus(fileType, file.name, `Upload xong, đang lưu thông tin...`, 'default');

                        const metadata = {
                             storagePath: storagePath,
                            downloadURL: downloadURL,
                            version: newVersion,
                            timestamp: uploadTimestamp,
                            rowCount: normalizedData.length,
                             fileName: file.name
                        };

                        await firebase.saveMetadataToFirestore(warehouseToSync, currentFirestoreKey, metadata);

                        const metadataKey = `${LOCAL_METADATA_PREFIX}${warehouseToSync}_${currentFirestoreKey}`;
                        const metadataToSaveLocally = { ...metadata, updatedAt: new Date() };
                        try {
                            localStorage.setItem(metadataKey, JSON.stringify(metadataToSaveLocally));
                            console.log(`[handleFileInputChange] Saved metadata for ${currentFirestoreKey} to localStorage ('${metadataKey}') immediately.`);
                        } catch(lsError) {
                              console.error(`[handleFileInputChange] Error saving metadata for ${currentFirestoreKey} to localStorage:`, lsError);
                        }

                        if (!localDataVersions[warehouseToSync]) localDataVersions[warehouseToSync] = {};
                        localDataVersions[warehouseToSync][currentFirestoreKey] = { version: newVersion, timestamp: uploadTimestamp };
                        localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(localDataVersions));
                        this._localDataVersions = localDataVersions;

                        console.log(`%c[handleFileInputChange] Successfully uploaded ${currentFirestoreKey} (v${newVersion}).`, "color: magenta;");

                         uiComponents.updateFileStatus(fileType, file.name, '', 'success', false, metadataToSaveLocally);

                     } catch (syncError) {
                        console.error(`%c[handleFileInputChange] Cloud sync failed for ${currentFirestoreKey}:`, "color: red;", syncError);
                        uiComponents.updateFileStatus(fileType, file.name, `Lỗi đồng bộ cloud: ${syncError.message}`, 'error');
                    }
                     console.log(`%c[DEBUG SYNC BLOCK END] Finished cloud sync block for ${fileType}`, "color: magenta;");
                } else {
                     console.log(`%c[DEBUG SYNC SKIP] Skipping cloud sync for ${fileType}. Warehouse selected: ${!!warehouseToSync}, Firestore key exists: ${!!currentFirestoreKey}`, "color: orange;");
                     if (currentFirestoreKey) {
                        uiComponents.updateFileStatus(fileType, file.name, `✓ Đã tải ${normalizedData.length} dòng (Chưa đồng bộ).`, 'success', false, null);
                     }
                }

            } catch(preSyncError) {
                 // ** ADDED v4.36: Catch errors before sync check **
                 console.error(`%c[DEBUG PRE-SYNC ERROR] Error before sync check for ${fileType}:`, "color: red; font-weight: bold;", preSyncError);
                 uiComponents.updateFileStatus(fileType, file.name, `Lỗi chuẩn bị đồng bộ: ${preSyncError.message}`, 'error');
                 // ** END ADDED **
            }

            console.log(`%c[DEBUG PRE-RENDER] About to call updateAndRenderCurrentTab for ${fileType}`, "color: blue;");
            this.updateAndRenderCurrentTab();

        } catch (error) {
            console.error(`Lỗi xử lý file ${dataName}:`, error);
            uiComponents.updateFileStatus(fileType, file.name, `Lỗi đọc file: ${error.message}`, 'error');
            ui.showNotification(`Lỗi khi xử lý file "${dataName}".`, 'error');
        } finally {
            ui.hideProgressBar(fileType);
            fileInput.value = '';
            console.log(`%c[DEBUG FUNCTION END] handleFileInputChange finished for ${fileType}`, "color: gray;");
        }
    },

    async handleDsnvUpload(e, file) {
        // ... (Giữ nguyên)
        const fileType = 'danhsachnv';
        const dataName = 'Danh sách nhân viên';
        const stateKey = 'danhSachNhanVien';
        const saveKey = 'saved_danhsachnv';

        uiComponents.updateFileStatus(fileType, file.name, 'Đang đọc & chuẩn hóa...', 'default');
        ui.showProgressBar(fileType);

        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, fileType);
            ui.displayDebugInfo(fileType);

            if (!success) {
                const errorMessage = `Lỗi file "${dataName}": Thiếu cột: ${missingColumns.join(', ')}.`;
                uiComponents.updateFileStatus(fileType, file.name, `Lỗi: Thiếu cột dữ liệu.`, 'error');
                ui.showNotification(errorMessage, 'error');
                if (document.getElementById('debug-tool-container')?.classList.contains('hidden')) {
                     document.getElementById('toggle-debug-btn')?.click();
                }
                return;
            }

            appState[stateKey] = normalizedData;
            services.updateEmployeeMaps();
            ui.populateAllFilters();
            uiComponents.populateWarehouseSelector();

            try {
                localStorage.setItem(LOCAL_DSNV_FILENAME_KEY, file.name);
                console.log(`[handleDsnvUpload] Saved DSNV filename '${file.name}' to localStorage.`);
            } catch (lsError) {
                 console.error("[handleDsnvUpload] Error saving DSNV filename to localStorage:", lsError);
            }

            ui.showNotification(`Tải thành công file "${dataName}"!`, 'success');

            if (saveKey) {
                 console.log(`[handleDsnvUpload] Saving normalized data (${normalizedData.length} rows) to cache: ${saveKey}`);
                 await this.storage.setItem(saveKey, normalizedData);
            }

            uiComponents.updateFileStatus(fileType, file.name, `✓ Đã tải ${normalizedData.length} dòng.`, 'success', false, null);
            this.updateAndRenderCurrentTab();

        } catch (error) {
             console.error(`Lỗi xử lý file ${dataName}:`, error);
             uiComponents.updateFileStatus(fileType, file.name, `Lỗi đọc file: ${error.message}`, 'error');
             ui.showNotification(`Lỗi khi xử lý file "${dataName}".`, 'error');
        } finally {
            ui.hideProgressBar(fileType);
            e.target.value = '';
        }
    },


    handleFileRead(file) {
        // ... (Giữ nguyên)
        return new Promise((resolve, reject) => {
            if (!file) return reject(new Error("No file provided."));
            const reader = new FileReader();
             reader.onload = (event) => {
                 try {
                    const data = new Uint8Array(event.target.result);
                    const workbook = XLSX.read(data, { type: 'array', cellDates: true });
                    resolve(workbook);
                } catch (err) { reject(err); }
             };
            reader.onerror = (err) => reject(new Error("Could not read the file: " + err));
             reader.readAsArrayBuffer(file);
        });
    },

    updateAndRenderCurrentTab() {
        // ... (Giữ nguyên)
        uiComponents.renderCompetitionConfigUI();
        const activeTab = document.querySelector('.page-section:not(.hidden)');
        if (!activeTab) {
            return;
        }
        switch (activeTab.id) {
            case 'health-section': luykeTab.render(); break;
            case 'health-employee-section': sknvTab.render(); break;
            case 'realtime-section': uiRealtime.render(); break;
        }
        feather.replace();
    },

    switchTab(targetId) {
         // ... (Giữ nguyên)
        document.querySelectorAll('.page-section').forEach(section => section.classList.toggle('hidden', section.id !== targetId));
        document.querySelectorAll('.nav-link').forEach(link => {
             const isActive = link.getAttribute('href') === `#${targetId}`;
             link.classList.toggle('bg-blue-100', isActive);
            link.classList.toggle('text-blue-700', isActive);
        });
        if (targetId === 'home-section') ui.renderHomePage();
        else if (targetId === 'health-section') luykeTab.render();
        else if (targetId === 'health-employee-section') sknvTab.render();
        else if (targetId === 'realtime-section') uiRealtime.render();
        else if (targetId === 'declaration-section' && appState.isAdmin) ui.renderAdminPage();
        feather.replace();
    },

    async loadAndApplyBookmarkLink() {
        // ... (Giữ nguyên)
         try {
            const bookmarkUrl = await firebase.getBookmarkDownloadURL();
            const linkElement = document.getElementById('download-bookmark-link');
            if (linkElement) linkElement.href = bookmarkUrl;
        } catch (error) {
            console.error("Không thể tải link bookmark:", error);
            const linkElement = document.getElementById('download-bookmark-link');
            if (linkElement) linkElement.style.display = 'none';
        }
    },

    async _handlePastedDataSync(pastedText, kho, dataType, uiId, localStorageKey, stateKey = null, processFunc = null) {
        // ... (Giữ nguyên)
        
        // === START: DEBUG (v4.43) ===
        console.log(`%c[DEBUG _handlePastedDataSync] Bắt đầu đồng bộ cho: ${dataType}`, "color: darkcyan; font-weight: bold;");
        // === END: DEBUG ===

        // *** MODIFIED (v4.40): Chỉ lưu text thô nếu đó KHÔNG PHẢI là thi đua NV
        // Dữ liệu thi đua NV sẽ được lưu dưới dạng JSON đã xử lý ở hàm riêng
        if (dataType !== 'pastedThiduaNVBI') {
            // === START: DEBUG (v4.43) ===
            try {
                localStorage.setItem(localStorageKey, pastedText);
                console.log(`%c[DEBUG _handlePastedDataSync]   > Đã LƯU (setItem) text thô vào localStorage key: ${localStorageKey}`, "color: darkcyan;");
            } catch (e) {
                console.error(`%c[DEBUG _handlePastedDataSync]   > LỖI khi lưu text thô vào localStorage key: ${localStorageKey}`, "color: red;", e);
            }
            // === END: DEBUG ===
        }

        let processedData = null;
        let processedCount = 0;
        
        // *** MODIFIED (v4.40) ***
        if (dataType === 'pastedThiduaNVBI') {
            // Logic này chỉ chạy khi GỌI TỪ CLOUD (handleCloudDataUpdate)
            // Vì _handlePastedDataSync không còn được gọi trực tiếp bởi handleThiduaNVPaste
            const parsedData = services.parsePastedThiDuaTableData(pastedText);
            if(parsedData.success) {
                services.updateCompetitionNameMappings(parsedData.mainHeaders);
                processedData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
                appState[stateKey] = processedData;
                processedCount = processedData.length;
                localStorage.setItem(localStorageKey, JSON.stringify(processedData)); // Lưu JSON đã xử lý
            } else {
                throw new Error(parsedData.error || "Lỗi phân tích cú pháp dữ liệu thi đua từ cloud");
            }
        } 
        // *** END MODIFIED ***
        else if (stateKey && processFunc) {
            processedData = processFunc(pastedText);
            appState[stateKey] = processedData;
            processedCount = processedData?.length || 0;
        } else if (uiId === 'status-luyke') {
             // Cập nhật giá trị ô input nếu cần (hàm handleLuykePaste sẽ làm việc này)
        }

        if (!kho) {
            uiComponents.updatePasteStatus(uiId, '✓ Đã nhận (Chọn kho để đồng bộ)', 'success', null, processedCount);
            if (dataType !== 'pastedLuykeBI') this.updateAndRenderCurrentTab();
            return;
        }

        uiComponents.updatePasteStatus(uiId, 'Đang đồng bộ cloud...', 'default');

        try {
            const localDataVersions = this._localDataVersions;
            const currentVersion = localDataVersions?.[kho]?.[dataType]?.version || 0;
            const newVersion = currentVersion + 1;
            const uploadTimestamp = Date.now();
            const versionInfo = { version: newVersion, timestamp: uploadTimestamp };

            const metadata = {
                content: pastedText, // Luôn đồng bộ TEXT THÔ lên cloud
                version: versionInfo.version,
                timestamp: versionInfo.timestamp,
                updatedBy: appState.currentUser.email
             };

            await firebase.savePastedDataToFirestore(kho, dataType, metadata.content, versionInfo);

            if (!localDataVersions[kho]) localDataVersions[kho] = {};
            localDataVersions[kho][dataType] = versionInfo;
            localStorage.setItem(LOCAL_DATA_VERSIONS_KEY, JSON.stringify(localDataVersions));

            const metadataKey = `${LOCAL_METADATA_PREFIX}${kho}_${dataType}`;
            const metadataToSaveLocally = { ...metadata, updatedAt: new Date() };
            localStorage.setItem(metadataKey, JSON.stringify(metadataToSaveLocally));

             uiComponents.updatePasteStatus(uiId, '', 'success', metadataToSaveLocally, processedCount);

        } catch (error) {
            console.error(`[${dataType} Paste] Cloud sync failed:`, error);
            uiComponents.updatePasteStatus(uiId, `Lỗi đồng bộ cloud: ${error.message}`, 'error');
        }

        if (dataType !== 'pastedLuykeBI') {
             this.updateAndRenderCurrentTab();
        }
    },


    async handleLuykePaste() {
        // ... (Giữ nguyên)
        const pastedText = document.getElementById('paste-luyke')?.value || '';
        const kho = appState.selectedWarehouse;
        const mappingInfo = ALL_DATA_MAPPING['pastedLuykeBI'];

        // === START: DEBUG (v4.43) ===
        try {
            localStorage.setItem(mappingInfo.saveKey, pastedText);
            console.log(`%c[DEBUG handleLuykePaste] Đã LƯU (setItem) vào localStorage key: ${mappingInfo.saveKey} (Độ dài: ${pastedText.length})`, "color: green;");
        } catch (e) {
            console.error(`%c[DEBUG handleLuykePaste] LỖI khi lưu vào localStorage key: ${mappingInfo.saveKey}`, "color: red;", e);
        }
        // === END: DEBUG ===
        
        uiComponents.updatePasteStatus(mappingInfo.uiId, '✓ Đã nhận dữ liệu.', 'success');

        if (kho) {
             await this._handlePastedDataSync(
                 pastedText,
                 kho,
                 mappingInfo.firestoreKey,
                 mappingInfo.uiId,
                 mappingInfo.saveKey
             );
        }
         this.updateAndRenderCurrentTab();
    },

    // *** START: HÀM ĐƯỢC VIẾT LẠI (v4.40) ***
    async handleThiduaNVPaste() {
        const pastedText = document.getElementById('paste-thiduanv')?.value || '';
        const kho = appState.selectedWarehouse;
        const mappingInfo = ALL_DATA_MAPPING['pastedThiduaNVBI'];
        if (!mappingInfo) return;

        const { stateKey, saveKey, firestoreKey, uiId } = mappingInfo;

        // === FIX 2a.1 (Thêm) ===
        // Lưu văn bản thô để tải lại khi F5
        try {
            localStorage.setItem(RAW_PASTE_THIDUANV_KEY, pastedText);
            // === START: DEBUG (v4.43) ===
            console.log(`%c[DEBUG handleThiduaNVPaste] Đã LƯU (setItem) text thô vào localStorage key: ${RAW_PASTE_THIDUANV_KEY} (Độ dài: ${pastedText.length})`, "color: green;");
            // === END: DEBUG ===
        } catch (e) {
            console.warn("Không thể lưu raw_paste_thiduanv vào localStorage:", e);
        }
        // === END FIX ===

        try {
            // 1. Phân tích cú pháp văn bản thô (Theo thuật toán của bạn)
            const parsedData = services.parsePastedThiDuaTableData(pastedText);
            if (!parsedData.success) {
                throw new Error(parsedData.error || "Lỗi phân tích cú pháp dữ liệu.");
            }

            // 2. Cập nhật Bảng Ánh Xạ Tên
            services.updateCompetitionNameMappings(parsedData.mainHeaders);

            // 3. Chuẩn hóa dữ liệu (Tra cứu DSNV, áp dụng tên rút gọn)
            // Chúng ta dùng appState.competitionData (từ Lũy kế) để lấy mục tiêu
            const processedData = services.processThiDuaNhanVienData(parsedData, appState.competitionData);
            
            // 4. Lưu kết quả ĐÃ XỬ LÝ vào appState và localStorage
            appState[stateKey] = processedData;
            localStorage.setItem(saveKey, JSON.stringify(processedData)); // Lưu mảng JSON đã xử lý
            
            const processedCount = processedData.length;
            
            // 5. Đồng bộ TEXT THÔ lên Cloud (sử dụng logic _handlePastedDataSync)
            await this._handlePastedDataSync(
                pastedText, // Gửi text thô lên cloud
                kho,
                firestoreKey,
                uiId,
                saveKey, // saveKey này bây giờ lưu JSON, nhưng _handlePastedDataSync không dùng nó để ghi
                stateKey, // stateKey này đã được cập nhật
                null // Không cần processFunc ở đây nữa
            );

            // 6. Cập nhật giao diện
            this.updateAndRenderCurrentTab();
            // Cập nhật Tab Khai báo nếu Admin đang xem
            if (appState.isAdmin && document.getElementById('declaration-section')?.classList.contains('hidden') === false) {
                ui.renderAdminPage();
            }

        } catch (error) {
            console.error("Lỗi khi xử lý dữ liệu dán Thi đua NV:", error);
            uiComponents.updatePasteStatus(uiId, `Lỗi: ${error.message}`, 'error');
            // Hiển thị debug nếu có
            const debugContainer = document.getElementById('debug-tool-container');
            if (debugContainer?.classList.contains('hidden')) {
                document.getElementById('toggle-debug-btn')?.click();
            }
        }
    },
    // *** END: HÀM ĐƯỢC VIẾT LẠI (v4.40) ***

    async handleErpPaste() {
        // ... (Giữ nguyên)
        const pastedText = document.getElementById('paste-thuongerp')?.value || '';
        const kho = appState.selectedWarehouse;
        const mappingInfo = ALL_DATA_MAPPING['pastedThuongERP'];
        
        // === START: DEBUG (v4.43) ===
        try {
            localStorage.setItem(mappingInfo.saveKey, pastedText);
            console.log(`%c[DEBUG handleErpPaste] Đã LƯU (setItem) vào localStorage key: ${mappingInfo.saveKey} (Độ dài: ${pastedText.length})`, "color: green;");
        } catch (e) {
            console.error(`%c[DEBUG handleErpPaste] LỖI khi lưu vào localStorage key: ${mappingInfo.saveKey}`, "color: red;", e);
        }
        // === END: DEBUG ===

        await this._handlePastedDataSync(
             pastedText,
            kho,
            mappingInfo.firestoreKey,
            mappingInfo.uiId,
            mappingInfo.saveKey,
            mappingInfo.stateKey,
            mappingInfo.processFunc
        );
    },

    async handleErpThangTruocPaste(e) {
        // ... (Giữ nguyên)
         const pastedText = e.target.value;
         const kho = appState.selectedWarehouse;
         const mappingInfo = ALL_DATA_MAPPING['pastedThuongERPThangTruoc'];
         
         // === START: DEBUG (v4.43) ===
         try {
            localStorage.setItem(mappingInfo.saveKey, pastedText);
            console.log(`%c[DEBUG handleErpThangTruocPaste] Đã LƯU (setItem) vào localStorage key: ${mappingInfo.saveKey} (Độ dài: ${pastedText.length})`, "color: green;");
        } catch (lsError) {
            console.error(`%c[DEBUG handleErpThangTruocPaste] LỖI khi lưu vào localStorage key: ${mappingInfo.saveKey}`, "color: red;", lsError);
        }
        // === END: DEBUG ===

         await this._handlePastedDataSync(
             pastedText,
             kho,
            mappingInfo.firestoreKey,
            mappingInfo.uiId,
            mappingInfo.saveKey,
            mappingInfo.stateKey,
            mappingInfo.processFunc
        );
    },

    async handleRealtimeFileInput(e) {
        // ... (Giữ nguyên)
        const file = e.target.files[0];
        if (!file) return;
        ui.showNotification('Đang xử lý file realtime...', 'success');
        appState.realtimeYCXData = [];
        e.target.value = '';
        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const { normalizedData, success, missingColumns } = services.normalizeData(rawData, 'ycx');
            ui.displayDebugInfo('ycx-realtime');
            if (success) {
                appState.realtimeYCXData = normalizedData;
                uiRealtime.populateRealtimeBrandCategoryFilter();
                ui.showNotification(`Tải thành công ${normalizedData.length} dòng realtime!`, 'success');
                this.updateAndRenderCurrentTab();
            } else {
                 ui.showNotification(`File realtime lỗi: Thiếu cột ${missingColumns.join(', ')}.`, 'error');
                 const debugContainer = document.getElementById('debug-tool-container');
                 if (debugContainer?.classList.contains('hidden')) {
                     document.getElementById('toggle-debug-btn')?.click();
                 }
            }
        } catch (err) { ui.showNotification(`Có lỗi khi đọc file: ${err.message}`, 'error'); console.error(err); }
    },

    async handleCategoryFile(e) {
        // ... (Giữ nguyên)
        const fileInput = e.target;
        const file = fileInput.files[0];
        if (!file) return;
        uiComponents.updateFileStatus('category-structure', file.name, 'Đang xử lý...', 'default');
        ui.showProgressBar('category-structure');
        try {
            const workbook = await this.handleFileRead(file);
            const categorySheet = workbook.Sheets[workbook.SheetNames[0]];
            const categoryRawData = XLSX.utils.sheet_to_json(categorySheet);
            const categoryResult = services.normalizeCategoryStructureData(categoryRawData);
            let brandResult = { success: true, normalizedData: [] };
            const brandSheetName = workbook.SheetNames.find(name => name.toLowerCase().trim() === 'hãng');
            if (brandSheetName) {
                const brandSheet = workbook.Sheets[brandSheetName];
                const brandRawData = XLSX.utils.sheet_to_json(brandSheet);
                brandResult = services.normalizeBrandData(brandRawData);
            }
            if(categoryResult.success) {
                appState.categoryStructure = categoryResult.normalizedData;
                appState.brandList = brandResult.normalizedData;
                await firebase.saveCategoryDataToFirestore({ categories: categoryResult.normalizedData, brands: brandResult.normalizedData });
                uiComponents.updateFileStatus('category-structure', file.name, `✓ Đã xử lý và đồng bộ ${categoryResult.normalizedData.length} nhóm & ${brandResult.normalizedData.length} hãng.`, 'success');
            } else {
                 ui.showNotification(`Lỗi xử lý file khai báo: ${categoryResult.error}`, 'error');
            }
        } catch (error) {
            uiComponents.updateFileStatus('category-structure', file.name, `Lỗi: ${error.message}`, 'error');
        } finally {
            ui.hideProgressBar('category-structure');
            fileInput.value = '';
        }
    },

    async handleThiDuaVungFileInput(e) {
        // ... (Giữ nguyên)
        const fileInput = e.target;
        const file = fileInput.files[0];
        if (!file) return;
        uiComponents.updateFileStatus('thidua-vung', file.name, 'Đang xử lý...', 'default');
        try {
            const workbook = await this.handleFileRead(file);
            const { chiTietData, tongData } = services.processThiDuaVungFile(workbook);
            if (!tongData || tongData.length === 0) throw new Error('Không tìm thấy dữ liệu hợp lệ trong sheet "TONG".');
            appState.thiDuaVungChiTiet = chiTietData;
            appState.thiDuaVungTong = tongData;
            const supermarketKey = Object.keys(tongData[0]).find(k => k.trim().toLowerCase().includes('siêu thị'));
            const supermarketNames = [...new Set(tongData.map(row => row[supermarketKey]).filter(Boolean))].sort();
            const choicesInstance = appState.choices.thiDuaVung_sieuThi;
            if (choicesInstance) {
                choicesInstance.clearStore();
                choicesInstance.setChoices(supermarketNames.map(name => ({ value: name, label: name })), 'value', 'label', true);
            }
            uiComponents.updateFileStatus('thidua-vung', file.name, `✓ Đã xử lý ${supermarketNames.length} siêu thị.`, 'success');
        } catch (error) {
            uiComponents.updateFileStatus('thidua-vung', file.name, `Lỗi: ${error.message}`, 'error');
        }
    },

    handleThiDuaVungFilterChange() {
        // ... (Giữ nguyên)
        const choicesInstance = appState.choices.thiDuaVung_sieuThi;
        if (!choicesInstance) return;
        const selectedValue = choicesInstance.getValue(true);
        if (selectedValue) {
            const reportData = services.generateThiDuaVungReport(selectedValue);
            ui.renderThiDuaVungInfographic(reportData);
        } else {
            const container = document.getElementById('thidua-vung-infographic-container');
            if(container) container.innerHTML = `<div class="placeholder-message">Vui lòng chọn một siêu thị để xem báo cáo.</div>`;
        }
    },

    handleDthangRealtimeViewChange(e) {
        // ... (Giğ nguyên)
        const button = e.target.closest('.view-switcher__btn');
        if (button) {
            document.querySelectorAll('#dthang-realtime-view-selector .view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            uiRealtime.render();
        }
    },

    handleLuykeThiDuaViewChange(e) {
        // ... (Giữ nguyên)
        const button = e.target.closest('.view-switcher__btn');
        if (button) {
            document.querySelectorAll('#luyke-thidua-view-selector .view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            luykeTab.render();
        }
    },

    handleThiDuaViewChange(e) {
        // ... (Giữ nguyên)
         const button = e.target.closest('.view-switcher__btn');
        if (button) {
             document.querySelectorAll('#thidua-view-selector .view-switcher__btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            const view = button.dataset.view;
            const thiduaEmployeeSelectorEl = document.getElementById('thidua-employee-selector-container');
            if(thiduaEmployeeSelectorEl) thiduaEmployeeSelectorEl.classList.toggle('hidden', view !== 'employee');
            ui.displayCompetitionReport(view);
        }
    },

    async handleCompetitionDebugFile(e) {
        // ... (Giữ nguyên)
        const file = e.target.files[0];
        if (!file) return;
        ui.showNotification('Đang phân tích file gỡ lỗi...', 'success');
        try {
            const workbook = await this.handleFileRead(file);
            const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const debugResults = services.debugCompetitionFiltering(rawData);
            ui.renderCompetitionDebugReport(debugResults);
        } catch (err) {
            ui.showNotification(`Lỗi khi đọc file gỡ lỗi: ${err.message}`, 'error');
        }
    },

    _handleCompetitionFormShow(show = true, isEdit = false) {
        // ... (Giữ nguyên)
        const form = document.getElementById('competition-form');
        const addBtn = document.getElementById('add-competition-btn');
        if (!form || !addBtn) return;
        if (show) {
            uiComponents.populateCompetitionFilters();
            uiComponents.populateCompetitionBrandFilter();
        }
        form.classList.toggle('hidden', !show);
        addBtn.classList.toggle('hidden', show);
        if (show && !isEdit) {
             form.reset();
            document.getElementById('competition-id').value = '';
            appState.choices['competition_group']?.removeActiveItems();
            appState.choices['competition_brand']?.removeActiveItems();
            const priceSegmentEl = document.getElementById('price-segment');
            if(priceSegmentEl) priceSegmentEl.classList.add('hidden');
        }
    },

    _handleCompetitionFormEdit(index) {
        // ... (Giữ nguyên)
        const config = appState.competitionConfigs[index];
        if (!config) return;
        this._handleCompetitionFormShow(true, true);
        document.getElementById('competition-id').value = index;
        document.getElementById('competition-name').value = config.name;
        const brandChoices = appState.choices['competition_brand'];
        if(brandChoices) {
            brandChoices.removeActiveItems();
            brandChoices.setChoiceByValue(config.brands || []);
        }
        const compTypeEl = document.getElementById('competition-type');
        if(compTypeEl) compTypeEl.value = config.type;
        const compExcludeEl = document.getElementById('competition-exclude-apple');
        if(compExcludeEl) compExcludeEl.checked = config.excludeApple;
        const priceSegment = document.getElementById('price-segment');
        if(priceSegment) priceSegment.classList.toggle('hidden', config.type !== 'soluong');
        const minPriceEl = document.getElementById('competition-min-price');
        if(minPriceEl) minPriceEl.value = config.minPrice ? config.minPrice / 1000000 : '';
        const maxPriceEl = document.getElementById('competition-max-price');
        if(maxPriceEl) maxPriceEl.value = config.maxPrice ? config.maxPrice / 1000000 : '';
        const groupChoices = appState.choices['competition_group'];
        if (groupChoices) {
            groupChoices.removeActiveItems();
            groupChoices.setChoiceByValue(config.groups);
        }
    },

    _handleCompetitionDelete(index) {
        // ... (GiGiữ nguyên)
        appState.competitionConfigs.splice(index, 1);
        this._saveCompetitionConfigs();
        this.updateAndRenderCurrentTab();
        ui.showNotification('Đã xóa chương trình thi đua.', 'success');
    },

    _handleCompetitionFormSubmit(e) {
        // ... (Giữ nguyên)
        e.preventDefault();
        const id = document.getElementById('competition-id').value;
        const name = document.getElementById('competition-name').value.trim();
        if (!name) { ui.showNotification('Tên chương trình không được để trống.', 'error'); return; }
        const groupChoices = appState.choices['competition_group'];
        const groups = groupChoices ? groupChoices.getValue(true) : [];
        const brandChoices = appState.choices['competition_brand'];
        const brands = brandChoices ? brandChoices.getValue(true) : [];
        if (brands.length === 0) { ui.showNotification('Lỗi: Vui lòng chọn ít nhất một hãng sản xuất.', 'error'); return; }
        const compTypeEl = document.getElementById('competition-type');
        const minPriceEl = document.getElementById('competition-min-price');
        const maxPriceEl = document.getElementById('competition-max-price');
        const excludeAppleEl = document.getElementById('competition-exclude-apple');
        const newConfig = {
            id: id ? appState.competitionConfigs[parseInt(id, 10)].id : `comp_${new Date().getTime()}`,
            name: name,
            brands: brands,
            groups: groups,
            type: compTypeEl ? compTypeEl.value : 'doanhthu',
            minPrice: (parseFloat(minPriceEl?.value) || 0) * 1000000,
            maxPrice: (parseFloat(maxPriceEl?.value) || 0) * 1000000,
            excludeApple: excludeAppleEl ? excludeAppleEl.checked : false,
        };
        if (id !== '') { appState.competitionConfigs[parseInt(id, 10)] = newConfig; }
        else { appState.competitionConfigs.push(newConfig); }
        this._saveCompetitionConfigs();
        this._handleCompetitionFormShow(false);
        this.updateAndRenderCurrentTab();
        ui.showNotification('Đã lưu chương trình thi đua thành công!', 'success');
    },


     _saveCompetitionConfigs() {
        // ... (Giữ nguyên)
        localStorage.setItem('competitionConfigs', JSON.stringify(appState.competitionConfigs));
    },

    async handleTemplateDownload() {
        // ... (Giữ nguyên)
        ui.showNotification('Đang chuẩn bị file mẫu...', 'success');
        try {
             const url = await firebase.getTemplateDownloadURL();
             const link = document.createElement('a');
             link.href = url;
             link.download = 'Danh_Sach_Nhan_Vien_Mau.xlsx';
             document.body.appendChild(link);
             link.click();
             document.body.removeChild(link);
        } catch (error) {
            console.error("Lỗi khi tải file mẫu:", error);
            ui.showNotification('Không thể tải file mẫu. Vui lòng thử lại.', 'error');
        }
    },

    handleAdminLogin() {
        // ... (Giữ nguyên)
        const passInputEl = document.getElementById('admin-password-input');
        const errorMsgEl = document.getElementById('admin-error-msg');
        if (passInputEl?.value === config.ADMIN_PASSWORD) {
            appState.isAdmin = true;
            ui.renderFeedbackSection();
            ui.renderAdminHelpEditors();
            this.switchTab('declaration-section');
            ui.toggleModal('admin-modal', false);
            passInputEl.value = '';
            if(errorMsgEl) errorMsgEl.classList.add('hidden');
        } else {
            if(errorMsgEl) errorMsgEl.classList.remove('hidden');
        }
    },

    handleContrastChange(e) {
        // ... (Giữ nguyên)
          const level = e.target.value;
         localStorage.setItem('contrastLevel', level);
         document.documentElement.dataset.contrast = level;
    },

    handleHighlightColorChange(prefix) {
        // ... (Giữ nguyên)
        const activeType = appState.highlightSettings[prefix]?.type;
        if (activeType) {
             const choicesInstance = appState.choices[`${prefix}_highlight_${activeType}`];
             if(choicesInstance) {
                const values = choicesInstance.getValue(true);
                const colorEl = document.getElementById(`${prefix}-highlight-color`);
                const color = colorEl ? colorEl.value : '#ffff00';
                appState.highlightSettings[prefix] = { type: activeType, values, color };
                localStorage.setItem('highlightSettings', JSON.stringify(appState.highlightSettings));
                highlightService.applyHighlights(prefix);
             }
        }
    },

     handleClearHighlight(prefix) {
        // ... (Giữ nguyên)
        appState.highlightSettings[prefix] = {};
        localStorage.setItem('highlightSettings', JSON.stringify(appState.highlightSettings));
        ['nhanhang', 'nhomhang', 'employee'].forEach(type => {
            appState.choices[`${prefix}_highlight_${type}`]?.removeActiveItemsByValue(appState.choices[`${prefix}_highlight_${type}`]?.getValue(true) || []);
        });
        highlightService.applyHighlights(prefix);
    },

    async saveDeclarations() {
        // ... (Giữ nguyên)
        const ycxEl = document.getElementById('declaration-ycx');
        const ycxGopEl = document.getElementById('declaration-ycx-gop');
        const heSoEl = document.getElementById('declaration-heso');
        const declarationsToSave = {
            ycx: ycxEl ? ycxEl.value : '',
            ycxGop: ycxGopEl ? ycxGopEl.value : '',
            heSo: heSoEl ? heSoEl.value : ''
        };
        await firebase.saveDeclarationsToFirestore(declarationsToSave);
        appState.declarations.hinhThucXuat = declarationsToSave.ycx;
        appState.declarations.hinhThucXuatGop = declarationsToSave.ycxGop;
        appState.declarations.heSoQuyDoi = declarationsToSave.heSo;
        this.updateAndRenderCurrentTab();
    },

    saveHelpContent() {
        // ... (Giữ nguyên)
        const dataEl = document.getElementById('edit-help-data');
        const luykeEl = document.getElementById('edit-help-luyke');
        const sknvEl = document.getElementById('edit-help-sknv');
        const realtimeEl = document.getElementById('edit-help-realtime');
        const contents = {
             data: dataEl ? dataEl.value : '',
             luyke: luykeEl ? luykeEl.value : '',
             sknv: sknvEl ? sknvEl.value : '',
             realtime: realtimeEl ? realtimeEl.value : ''
        };
        firebase.saveHelpContent(contents);
    },

    async handleSubmitFeedback() {
        // ... (Giữ nguyên)
        const textarea = document.getElementById('feedback-textarea');
        if(textarea){
            const success = await firebase.submitFeedback(textarea.value.trim());
            if (success) textarea.value = '';
        }
    },

    async handleFeedbackReplyActions(e, feedbackItem) {
        // ... (Giữ nguyên)
        const docId = feedbackItem.dataset.id;
        const replyForm = feedbackItem.querySelector('.reply-form-container');
        if (!replyForm) return;
        if (e.target.classList.contains('reply-btn')) { replyForm.classList.remove('hidden'); }
         if (e.target.classList.contains('cancel-reply-btn')) { replyForm.classList.add('hidden'); }
        if (e.target.classList.contains('submit-reply-btn')) {
             const textarea = replyForm.querySelector('textarea');
             if(textarea){
                const success = await firebase.submitReply(docId, textarea.value.trim());
                if (success) { textarea.value = ''; replyForm.classList.add('hidden'); }
             }
        }
    },

    _getFilteredReportData(sectionId) {
        // ... (Giữ nguyên)
        const masterData = appState.masterReportData[sectionId] || [];
        if (masterData.length === 0) return [];
        const warehouseEl = document.getElementById(`${sectionId}-filter-warehouse`);
        const deptEl = document.getElementById(`${sectionId}-filter-department`);
        const selectedWarehouse = warehouseEl ? warehouseEl.value : '';
        const selectedDept = deptEl ? deptEl.value : '';
        const selectedNames = appState.choices[`${sectionId}_employee`] ? appState.choices[`${sectionId}_employee`].getValue(true) : [];
        let filteredReport = masterData;
        if (selectedWarehouse) filteredReport = filteredReport.filter(nv => nv.maKho == selectedWarehouse);
        if (selectedDept) filteredReport = filteredReport.filter(nv => nv.boPhan === selectedDept);
        if (selectedNames && selectedNames.length > 0) filteredReport = filteredReport.filter(nv => selectedNames.includes(String(nv.maNV)));
        return filteredReport;
    },

    async prepareAndShowComposer(sectionId) {
        // ... (Giữ nguyên)
        const modal = document.getElementById('composer-modal');
        if (!modal) return;
        modal.dataset.sectionId = sectionId;
        const deptFilter = document.getElementById('composer-dept-filter');
        if (deptFilter) {
            const uniqueDepartments = [...new Set(appState.danhSachNhanVien.map(nv => nv.boPhan).filter(Boolean))].sort();
            deptFilter.innerHTML = '<option value="ALL">Toàn siêu thị</option>' + uniqueDepartments.map(dept => `<option value="${dept}">${dept}</option>`).join('');
        }
        const navIdMap = { luyke: 'luyke-subtabs-nav', sknv: 'employee-subtabs-nav', realtime: 'realtime-subtabs-nav' };
        const mainViewNav = document.getElementById(navIdMap[sectionId]);
        const contextTabsContainer = document.getElementById('composer-context-tabs');
        const contextContentContainer = document.getElementById('composer-context-content');
        if(contextTabsContainer) contextTabsContainer.innerHTML = '';
        if(contextContentContainer) contextContentContainer.innerHTML = '';
        if (mainViewNav && contextTabsContainer && contextContentContainer) {
             const subTabButtons = mainViewNav.querySelectorAll('.sub-tab-btn');
            subTabButtons.forEach(btn => {
                 const subTabId = btn.dataset.target;
                const isActive = btn.classList.contains('active');
                const newTabBtn = document.createElement('button');
                newTabBtn.className = `composer__tab-btn ${isActive ? 'active' : ''}`;
                newTabBtn.dataset.target = `context-pane-${subTabId}`;
                newTabBtn.textContent = btn.textContent.trim();
                 newTabBtn.addEventListener('click', () => {
                    contextTabsContainer.querySelectorAll('.composer__tab-btn').forEach(t => t.classList.remove('active'));
                    contextContentContainer.querySelectorAll('.composer__context-pane').forEach(c => c.classList.add('hidden'));
                    newTabBtn.classList.add('active');
                    const targetPane = document.getElementById(`context-pane-${subTabId}`);
                    if(targetPane) targetPane.classList.remove('hidden');
                });
                 contextTabsContainer.appendChild(newTabBtn);
                 const newContentPane = document.createElement('div');
                 newContentPane.id = `context-pane-${subTabId}`;
                 newContentPane.className = `composer__context-pane ${!isActive ? 'hidden' : ''}`;
                 const textarea = document.createElement('textarea');
                 textarea.className = 'composer__textarea';
                 textarea.rows = 15;
                 textarea.placeholder = `Soạn thảo nhận xét cho tab ${btn.textContent.trim()}...`;
                 if (!appState.composerTemplates[sectionId]) appState.composerTemplates[sectionId] = {};
                 textarea.value = appState.composerTemplates[sectionId]?.[subTabId] || '';
                 newContentPane.appendChild(textarea);
                 contextContentContainer.appendChild(newContentPane);
            });
            contextTabsContainer.classList.toggle('hidden', contextTabsContainer.children.length === 0);
        }
        const filteredReportData = this._getFilteredReportData(sectionId);
        const supermarketReport = services.aggregateReport(filteredReportData);
        ui.populateComposerDetailTags(supermarketReport);
        ui.showComposerModal(sectionId);
    },

    handleComposerActions(e, modal) {
        // ... (Giữ nguyên)
        const sectionId = modal.dataset.sectionId;
        const activeContextPane = modal.querySelector('.composer__context-pane:not(.hidden)');
        const activeTextarea = activeContextPane ? activeContextPane.querySelector('textarea') : null;
        if (e.target.matches('.composer__tab-btn:not([data-context-tab])')) {
            const nav = e.target.closest('.composer__nav');
            const content = nav?.nextElementSibling;
            if (nav && content) {
                 nav.querySelectorAll('.active').forEach(el => el.classList.remove('active'));
                 content.querySelectorAll('.active').forEach(el => el.classList.remove('active'));
                 e.target.classList.add('active');
                 const targetId = e.target.dataset.tab;
                 const targetContent = content.querySelector(`#${targetId}`);
                 if (targetContent) targetContent.classList.add('active');
            }
            return;
        }
        if (e.target.matches('.composer__icon-btn, .composer__tag-btn')) {
             if (!activeTextarea) { ui.showNotification("Vui lòng chọn một tab nội dung để chèn thẻ.", "error"); return; }
             let tagToInsert = e.target.dataset.tag;
            if (e.target.dataset.tagTemplate) {
                const deptFilterEl = document.getElementById('composer-dept-filter');
                const dept = deptFilterEl ? deptFilterEl.value : 'ALL';
                tagToInsert = e.target.dataset.tagTemplate.replace('{dept}', dept);
            }
            ui.insertComposerTag(activeTextarea, tagToInsert || e.target.textContent);
            return;
        }
         if (e.target.id === 'save-composer-template-btn') {
            if (!activeTextarea) return;
            const activeContextTab = modal.querySelector('#composer-context-tabs .composer__tab-btn.active');
            const subTabId = activeContextTab?.dataset.target.replace('context-pane-', '');
            if (subTabId) {
                 if (!appState.composerTemplates[sectionId]) appState.composerTemplates[sectionId] ={};
                appState.composerTemplates[sectionId][subTabId] = activeTextarea.value;
                localStorage.setItem('composerTemplates', JSON.stringify(appState.composerTemplates));
                ui.showNotification(`Đã lưu mẫu cho tab con!`, 'success');
            } else { ui.showNotification(`Không tìm thấy tab con để lưu.`, 'error'); }
        }
        if (e.target.id === 'copy-composed-notification-btn') {
             if (!activeTextarea) { ui.showNotification("Lỗi: Không tìm thấy ô nội dung đang hoạt động.", "error"); return; }
             const template = activeTextarea.value;
             const filteredReportData = this._getFilteredReportData(sectionId);
             const supermarketReport = services.aggregateReport(filteredReportData);
             const warehouseEl = document.getElementById(`${sectionId}-filter-warehouse`);
             const selectedWarehouse = warehouseEl ? warehouseEl.value : null;
             const goals = sectionId === 'realtime' ? settingsService.getRealtimeGoalSettings(selectedWarehouse).goals : settingsService.getLuykeGoalSettings(selectedWarehouse).goals;
             const pasteLuykeEl = document.getElementById('paste-luyke');
             const competitionDataForComposer = services.parseCompetitionDataFromLuyKe(pasteLuykeEl?.value || '');
             const processedText = services.processComposerTemplate(template, supermarketReport, goals, filteredReportData, competitionDataForComposer, sectionId);
             ui.showPreviewAndCopy(processedText);
        }
    },

    async loadAndDisplayQrCode() {
        // ... (Giữ nguyên)
         try {
            const qrUrl = await firebase.getQrCodeDownloadURL();
            const imgEl = document.getElementById('header-qr-image');
            if (imgEl) imgEl.src = qrUrl;
        }
        catch (error) {
             console.error("Không thể tải mã QR:", error);
            const container = document.querySelector('.header-qr-container');
            if (container) container.style.display = 'none';
        }
    }
};

// Khởi chạy ứng dụng khi DOM đã sẵn sàng
app.init();
--- END FILE: ./main.js ---

--- START FILE: ./modules/capture.service.js ---
// Version 1.0 - Refactored from utils.js
// MODULE: CAPTURE SERVICE
// Chứa toàn bộ logic liên quan đến việc chụp ảnh màn hình các thành phần UI.

import { ui } from '../ui.js';
import { firebase } from '../firebase.js';

// --- HELPER for Screenshot CSS Injection ---
const _injectCaptureStyles = () => {
    const styleId = 'dynamic-capture-styles';
    document.getElementById(styleId)?.remove();

    const styles = `
        .capture-container { 
            padding: 24px; 
            background-color: #f3f4f6; 
            box-sizing: border-box; 
            width: fit-content; 
            position: absolute;
            left: -9999px;
            top: 0;
            z-index: -1;
        }
        .capture-layout-container { 
            display: flex; 
            flex-direction: column; 
            gap: 24px; 
        }
        .capture-title { 
            font-size: 28px; 
            font-weight: 700; 
            text-align: center; 
            color: #1f2937; 
            margin-bottom: 24px; 
            padding: 12px; 
            background-color: #ffffff; 
            border-radius: 0.75rem; 
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); 
        }
        /* --- VIRTUAL STAGES / PRESETS --- */
        .prepare-for-kpi-capture {
            display: grid !important;
            grid-template-columns: repeat(2, 1fr) !important;
            gap: 24px !important;
            width: 900px !important;
        }
        .preset-mobile-portrait {
            width: 750px !important;
        }
        .preset-landscape-table {
            width: fit-content !important;
        }
        .preset-landscape-table table {
            table-layout: fixed !important;
        }
        .preset-landscape-table th, 
        .preset-landscape-table td {
            width: 95px !important;
            word-wrap: break-word;
        }
        .preset-landscape-table th:first-child,
        .preset-landscape-table td:first-child {
            width: 180px !important;
        }
        .preset-large-font-report {
            width: 800px !important;
        }
        .preset-large-font-report table th {
            white-space: normal !important;
            vertical-align: middle;
        }
        .preset-large-font-report table td {
            font-size: 22px !important;
            vertical-align: middle;
        }
        .preset-infographic-wide {
            width: 1100px !important;
        }
    `;

    const styleElement = document.createElement('style');
    styleElement.id = styleId;
    styleElement.innerHTML = styles;
    document.head.appendChild(styleElement);
    return styleElement;
};

export const captureService = {
    async captureAndDownload(elementToCapture, title, presetClass = '') {
        const date = new Date();
        const timeString = date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
        const dateString = date.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });
        const finalTitle = `${title.replace(/_/g, ' ')} - ${timeString} ${dateString}`;
    
        const captureWrapper = document.createElement('div');
        captureWrapper.className = 'capture-container';
    
        const titleEl = document.createElement('h2');
        titleEl.className = 'capture-title';
        titleEl.textContent = finalTitle;
        captureWrapper.appendChild(titleEl);
        
        const contentClone = elementToCapture.cloneNode(true);
        if (presetClass) {
            contentClone.classList.add(presetClass);
        }
        captureWrapper.appendChild(contentClone);

        document.body.appendChild(captureWrapper);
    
        try {
            const canvas = await html2canvas(captureWrapper, {
                scale: 2,
                useCORS: true,
                backgroundColor: '#f3f4f6'
            });
    
            const link = document.createElement('a');
            link.download = `${title}_${dateString.replace(/\//g, '-')}.png`;
            link.href = canvas.toDataURL('image/png');
            link.click();
            ui.showNotification('Đã chụp và tải xuống hình ảnh!', 'success');
        } catch (err) {
            console.error('Lỗi chụp màn hình:', err);
            ui.showNotification(`Lỗi khi chụp ảnh: ${err.message}.`, 'error');
        } finally {
            if (document.body.contains(captureWrapper)) {
                document.body.removeChild(captureWrapper);
            }
        }
    },
    
    async captureDashboardInParts(contentContainer, baseTitle) {
        if (!contentContainer) {
            ui.showNotification('Không tìm thấy vùng nội dung để chụp.', 'error');
            return;
        }

        firebase.incrementCounter('actionsTaken');
        
        ui.showNotification(`Bắt đầu chụp báo cáo ${baseTitle}...`, 'success');
    
        const captureGroups = new Map();
        contentContainer.querySelectorAll('[data-capture-group]').forEach(el => {
            if (el.offsetParent !== null) {
                const group = el.dataset.captureGroup;
                if (!captureGroups.has(group)) {
                    captureGroups.set(group, []);
                }
                captureGroups.get(group).push(el);
            }
        });
        
        const styleElement = _injectCaptureStyles();
        try {
            if (captureGroups.size === 0) {
                if (contentContainer.offsetParent !== null) {
                    const preset = contentContainer.dataset.capturePreset;
                    const presetClass = preset ? `preset-${preset}` : '';
                    await this.captureAndDownload(contentContainer, baseTitle, presetClass);
                } else {
                     ui.showNotification('Không tìm thấy đối tượng hiển thị để chụp.', 'error');
                }
                return;
            }

            for (const [group, elements] of captureGroups.entries()) {
                const captureTitle = captureGroups.size > 1 ? `${baseTitle}_Nhom_${group}` : baseTitle;
                
                const targetElement = elements[0];
                const preset = targetElement.dataset.capturePreset;
                const isKpiGroup = group === 'kpi';
                
                let elementToCapture;
                let presetClass = '';

                if (isKpiGroup) {
                    presetClass = 'prepare-for-kpi-capture';
                } else if (preset) {
                    presetClass = `preset-${preset}`;
                }

                if (elements.length > 1 && !isKpiGroup) {
                    const tempContainer = document.createElement('div');
                    tempContainer.className = 'capture-layout-container';
                    elements.forEach(el => tempContainer.appendChild(el.cloneNode(true)));
                    elementToCapture = tempContainer;
                } else {
                    elementToCapture = targetElement;
                }
    
                await this.captureAndDownload(elementToCapture, captureTitle, presetClass);
                await new Promise(resolve => setTimeout(resolve, 150));
            }
        } finally {
            styleElement.remove();
        }

        ui.showNotification(`Đã hoàn tất chụp ảnh báo cáo ${baseTitle}!`, 'success');
    },
};
--- END FILE: ./modules/capture.service.js ---

--- START FILE: ./modules/file-upload.service.js ---
// Version 1.0 - Initial Upload Service
// MODULE: FILE UPLOAD SERVICE
// Chứa logic để tải file lên Firebase Storage và lắng nghe kết quả xử lý từ Firestore.

import { appState } from '../state.js';
import { ui } from '../ui.js';
import { ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";
import { doc, onSnapshot } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

export const fileUploadService = {
    /**
     * Tải file lên Firebase Storage, sau đó lắng nghe kết quả xử lý từ Firestore.
     * @param {File} file - Đối tượng file người dùng đã chọn.
     * @param {string} fileType - Loại file (ví dụ: 'ycx', 'danhsachnv').
     * @returns {Promise<Object>} - Promise sẽ resolve với dữ liệu đã được xử lý hoặc reject với lỗi.
     */
    uploadAndProcessFile(file, fileType) {
        return new Promise((resolve, reject) => {
            if (!appState.storage || !appState.db) {
                return reject(new Error("Firebase chưa được khởi tạo."));
            }

            // 1. Tạo một ID độc nhất cho file để theo dõi
            const uniqueFileId = `${fileType}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
            const fileName = `${uniqueFileId}${file.name.substring(file.name.lastIndexOf('.'))}`;
            const storagePath = `uploads/${fileName}`;
            const storageRef = ref(appState.storage, storagePath);

            // 2. Bắt đầu quá trình tải file lên Storage
            const uploadTask = uploadBytesResumable(storageRef, file);
            let unsubscribeSnapshot = null; // Biến để lưu hàm hủy listener

            // Tạo listener trong Firestore để chờ kết quả
            const resultDocRef = doc(appState.db, "file_results", uniqueFileId);
            unsubscribeSnapshot = onSnapshot(resultDocRef, (docSnap) => {
                if (docSnap.exists()) {
                    const result = docSnap.data();
                    // Hủy listener ngay khi nhận được kết quả để tránh rò rỉ bộ nhớ
                    if (unsubscribeSnapshot) unsubscribeSnapshot();
                    clearTimeout(timeout); // Hủy timeout

                    if (result.status === 'success') {
                        resolve(result.data); // Trả về dữ liệu đã xử lý
                    } else {
                        reject(new Error(result.message || 'Lỗi không xác định từ máy chủ.'));
                    }
                }
            });

            // Cập nhật giao diện với tiến trình tải lên
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    ui.updateFileStatus(fileType, file.name, `Đang tải lên... ${Math.round(progress)}%`);
                },
                (error) => { // Xử lý lỗi tải lên
                    if (unsubscribeSnapshot) unsubscribeSnapshot();
                    clearTimeout(timeout);
                    console.error("Lỗi khi tải file lên Storage:", error);
                    reject(new Error("Không thể tải file lên máy chủ."));
                },
                () => { // Tải lên thành công, chuyển sang chờ xử lý
                    ui.updateFileStatus(fileType, file.name, 'Tải lên hoàn tất, đang chờ máy chủ xử lý...');
                }
            );

            // 3. Đặt một khoảng thời gian chờ tối đa (ví dụ: 60 giây)
            const timeout = setTimeout(() => {
                if (unsubscribeSnapshot) unsubscribeSnapshot();
                reject(new Error("Máy chủ xử lý quá lâu, vui lòng thử lại."));
            }, 60000); // 60 giây
        });
    }
};
--- END FILE: ./modules/file-upload.service.js ---

--- START FILE: ./modules/highlight.service.js ---
// Version 1.1 - Fix incorrect import paths for modules
// MODULE: HIGHLIGHT SERVICE
// Chứa logic để quản lý và áp dụng tính năng tô màu (highlight) trên các bảng.

import { appState } from '../state.js';
import { utils } from '../utils.js';

export const highlightService = {
    populateHighlightFilters(prefix, ycxData, reportData) {
        if (!appState.choices[`${prefix}_highlight_nhanhang`]) return;
        const uniqueNganhHang = [...new Set(ycxData.map(r => utils.cleanCategoryName(r.nganhHang)).filter(Boolean))].sort();
        const uniqueNhomHang = [...new Set(ycxData.map(r => utils.cleanCategoryName(r.nhomHang)).filter(Boolean))].sort();
        const uniqueEmployees = [...new Set(reportData.map(r => r.hoTen).filter(Boolean))].sort();

        const createOptions = (arr) => arr.map(item => ({ value: item, label: item, selected: false }));
        
        appState.choices[`${prefix}_highlight_nhanhang`]?.setChoices(createOptions(uniqueNganhHang), 'value', 'label', true);
        appState.choices[`${prefix}_highlight_nhomhang`]?.setChoices(createOptions(uniqueNhomHang), 'value', 'label', true);
        appState.choices[`${prefix}_highlight_employee`]?.setChoices(createOptions(uniqueEmployees), 'value', 'label', true);
    },

    applyHighlights(prefix) {
        const settings = appState.highlightSettings[prefix] || {};
        const tableContainer = document.getElementById(`${prefix === 'luyke' ? 'health' : (prefix === 'sknv' ? 'health-employee' : 'realtime')}-section`);
        if (!tableContainer) return;
        
        tableContainer.querySelectorAll('tbody tr').forEach(row => {
             row.classList.remove('highlighted-row');
             row.style.backgroundColor = '';
        });

        if (settings.values && settings.values.length > 0) {
            tableContainer.querySelectorAll('tbody tr').forEach(row => {
                const cellText = row.cells[0] ? row.cells[0].textContent : '';
                if (settings.values.includes(cellText)) {
                    row.classList.add('highlighted-row');
                    row.style.backgroundColor = settings.color;
                }
            });
        }
    },
};
--- END FILE: ./modules/highlight.service.js ---

--- START FILE: ./modules/settings.service.js ---
// Version 2.0 - Revert loading logic to respect user-saved drag-drop order
// MODULE: SETTINGS SERVICE
// Chứa toàn bộ logic liên quan đến việc quản lý cài đặt (lưu/tải từ localStorage).

import { appState } from '../state.js';
import { ui } from '../ui.js';

// Hằng số chứa danh sách đầy đủ và thứ tự cột chính xác cho bảng Hiệu quả khai thác
const ALL_EFFICIENCY_ITEMS = [
    { id: 'dtICT', label: 'DT ICT' },
    { id: 'dtPhuKien', label: 'DT Phụ kiện' },
    { id: 'pctPhuKien', label: '% Phụ kiện' },
    { id: 'dtCE', label: 'DT CE' },
    { id: 'dtGiaDung', label: 'DT Gia dụng' },
    { id: 'pctGiaDung', label: '% Gia dụng' },
    { id: 'pctMLN',    label: '% MLN' },
    { id: 'pctSim',    label: '% Sim' },
    { id: 'pctVAS',    label: '% VAS' },
    { id: 'pctBaoHiem', label: '% Bảo hiểm' }
];


export const settingsService = {
    /**
     * Lưu cài đặt hiển thị cho bảng Hiệu quả khai thác.
     * Cấu trúc mới là một mảng các đối tượng, mỗi đối tượng chứa {id, label, visible}.
     * @param {Array<Object>} settings - Mảng cấu hình cột đầy đủ.
     */
    saveEfficiencyViewSettings(settings) {
        if (!Array.isArray(settings)) return;
        try {
            localStorage.setItem('efficiencyViewSettings', JSON.stringify(settings));
        } catch (e) {
            console.error("Lỗi khi lưu cài đặt hiển thị Hiệu quả khai thác:", e);
        }
    },
    
    /**
     * Tải cài đặt hiển thị cho bảng Hiệu quả khai thác.
     * Logic mới: Ưu tiên thứ tự đã lưu của người dùng, và thêm các cột mới vào cuối.
     * @returns {Array<Object>} Mảng cấu hình cột đầy đủ.
     */
    loadEfficiencyViewSettings() {
        try {
            const savedSettingsJSON = localStorage.getItem('efficiencyViewSettings');
            if (savedSettingsJSON) {
                const savedItems = JSON.parse(savedSettingsJSON);
                
                // Đảm bảo dữ liệu lưu là một mảng các đối tượng
                if (Array.isArray(savedItems) && savedItems.length > 0 && typeof savedItems[0] === 'object') {
                    const savedIds = new Set(savedItems.map(s => s.id));
                    // Thêm các cột mới (nếu có trong bản cập nhật) mà người dùng chưa có trong cài đặt
                    const newItems = ALL_EFFICIENCY_ITEMS
                        .filter(item => !savedIds.has(item.id))
                        .map(item => ({ ...item, visible: true }));
                    
                    // Lọc ra các mục đã lưu mà không còn tồn tại trong code nữa
                    const currentItems = savedItems.filter(item => ALL_EFFICIENCY_ITEMS.some(config => config.id === item.id));
                    
                    return [...currentItems, ...newItems];
                }
            }
        } catch (e) {
            console.error("Lỗi khi tải cài đặt hiển thị Hiệu quả khai thác:", e);
        }

        // Trả về giá trị mặc định nếu không có gì được lưu hoặc có lỗi
        return ALL_EFFICIENCY_ITEMS.map(item => ({ ...item, visible: true }));
    },

    saveQdcViewSettings(settings) {
        if (!Array.isArray(settings)) return;
        try {
            localStorage.setItem('qdcViewSettings', JSON.stringify(settings));
        } catch (e) {
            console.error("Lỗi khi lưu cài đặt hiển thị Nhóm hàng QĐC:", e);
        }
    },

    saveCategoryViewSettings(settings) {
        if (!Array.isArray(settings)) return;
        try {
            localStorage.setItem('categoryViewSettings', JSON.stringify(settings));
        } catch (e) {
            console.error("Lỗi khi lưu cài đặt hiển thị Ngành hàng chi tiết:", e);
        }
    },

    loadQdcViewSettings(allItems) {
        try {
            const savedSettings = localStorage.getItem('qdcViewSettings');
            if (savedSettings) {
                return JSON.parse(savedSettings);
            }
        } catch (e) {
            console.error("Lỗi khi tải cài đặt hiển thị Nhóm hàng QĐC:", e);
        }
        // Mặc định hiển thị tất cả nếu chưa có cài đặt
        return allItems;
    },

    loadCategoryViewSettings(allItems) {
        try {
            const savedSettings = localStorage.getItem('categoryViewSettings');
            if (savedSettings) {
                return JSON.parse(savedSettings);
            }
        } catch (e) {
            console.error("Lỗi khi tải cài đặt hiển thị Ngành hàng chi tiết:", e);
        }
        // Mặc định hiển thị tất cả nếu chưa có cài đặt
        return allItems;
    },
    
    loadInterfaceSettings() {
        try {
            const savedSettings = JSON.parse(localStorage.getItem('interfaceSettings')) || {};
            const defaultSettings = {
                kpiCard1Bg: '#38bdf8', kpiCard2Bg: '#34d399', kpiCard3Bg: '#fbbf24',
                kpiCard4Bg: '#2dd4bf', kpiCard5Bg: '#a78bfa', kpiCard6Bg: '#f472b6', 
                kpiCard7Bg: '#818cf8', kpiCard8Bg: '#f87171',
                kpiTitleColor: '#ffffff',
                kpiMainColor: '#ffffff',
                kpiSubColor: '#ffffff',
                globalFontSize: '14',
                kpiFontSize: '36'
            };
            const settings = { ...defaultSettings, ...savedSettings };
            
            ui.applyInterfaceSettings(settings);
            
            // Cập nhật giá trị cho các bộ chọn màu
            Object.keys(defaultSettings).forEach((key) => {
                if (key.startsWith('kpiCard')) {
                    const keyNumber = key.replace('kpiCard', '').replace('Bg', '');
                    const colorPicker = document.getElementById(`kpi-color-${keyNumber}`);
                    if (colorPicker) colorPicker.value = settings[key];
                }
            });
            
            const titleColorPicker = document.getElementById('kpi-title-color');
            if(titleColorPicker) titleColorPicker.value = settings.kpiTitleColor;
            
            const mainColorPicker = document.getElementById('kpi-main-color');
            if(mainColorPicker) mainColorPicker.value = settings.kpiMainColor;

            const subColorPicker = document.getElementById('kpi-sub-color');
            if(subColorPicker) subColorPicker.value = settings.kpiSubColor;


            const globalSlider = document.getElementById('global-font-size-slider');
            const kpiSlider = document.getElementById('kpi-font-size-slider');
            if(globalSlider) globalSlider.value = settings.globalFontSize;
            if(kpiSlider) kpiSlider.value = settings.kpiFontSize;
            
            this.handleFontSizeChange({ target: globalSlider }, 'global');
            this.handleFontSizeChange({ target: kpiSlider }, 'kpi');
            
        } catch (e) { console.error("Lỗi khi tải cài đặt giao diện:", e); }
    },
    
    saveInterfaceSettings() {
        const settings = {
            kpiCard1Bg: document.getElementById('kpi-color-1')?.value,
            kpiCard2Bg: document.getElementById('kpi-color-2')?.value,
            kpiCard3Bg: document.getElementById('kpi-color-3')?.value,
            kpiCard4Bg: document.getElementById('kpi-color-4')?.value,
            kpiCard5Bg: document.getElementById('kpi-color-5')?.value,
            kpiCard6Bg: document.getElementById('kpi-color-6')?.value,
            kpiCard7Bg: document.getElementById('kpi-color-7')?.value,
            kpiCard8Bg: document.getElementById('kpi-color-8')?.value,
            kpiTitleColor: document.getElementById('kpi-title-color')?.value,
            kpiMainColor: document.getElementById('kpi-main-color')?.value,
            kpiSubColor: document.getElementById('kpi-sub-color')?.value,
            globalFontSize: document.getElementById('global-font-size-slider')?.value,
            kpiFontSize: document.getElementById('kpi-font-size-slider')?.value,
        };
        localStorage.setItem('interfaceSettings', JSON.stringify(settings));
        ui.applyInterfaceSettings(settings);
        this.applyFontSettings();
    },

    applyFontSettings() {
        const settings = JSON.parse(localStorage.getItem('interfaceSettings')) || {};
        const globalSize = settings.globalFontSize || '14';
        const kpiSize = settings.kpiFontSize || '36';
        
        document.documentElement.style.setProperty('--global-font-size', `${globalSize}px`);
        document.documentElement.style.setProperty('--kpi-main-font-size', `${kpiSize}px`);
    },

    handleFontSizeChange(event, type) {
        if (!event || !event.target) return;
        const value = event.target.value;
        const valueDisplayId = type === 'global' ? 'global-font-size-value' : 'kpi-font-size-value';
        const valueDisplayElement = document.getElementById(valueDisplayId);

        if (valueDisplayElement) {
            valueDisplayElement.textContent = `${value}px`;
        }
        
        this.saveInterfaceSettings();
    },

    saveRealtimeGoalSettings() {
        const warehouse = document.getElementById('rt-goal-warehouse-select').value;
        if (!warehouse) return;
        const settings = { goals: {}, timing: {} };
        document.querySelectorAll('.rt-goal-input').forEach(input => settings.goals[input.dataset.goal] = input.value);
        document.querySelectorAll('.rt-setting-input').forEach(input => settings.timing[input.id] = input.value);
        
        if (!appState.realtimeGoalSettings) appState.realtimeGoalSettings = {};
        appState.realtimeGoalSettings[warehouse] = settings;
        localStorage.setItem('realtimeGoalSettings', JSON.stringify(appState.realtimeGoalSettings));
        ui.showNotification(`Đã lưu cài đặt Realtime cho kho ${warehouse}!`, 'success');
    },

    loadAndApplyRealtimeGoalSettings() {
        const warehouseSelect = document.getElementById('rt-goal-warehouse-select');
        if (!warehouseSelect) return;
        const warehouse = warehouseSelect.value;
        const settings = (warehouse && appState.realtimeGoalSettings && appState.realtimeGoalSettings[warehouse]) 
            ? appState.realtimeGoalSettings[warehouse] 
            : { goals: {}, timing: {} };

        document.querySelectorAll('.rt-goal-input').forEach(input => input.value = settings.goals?.[input.dataset.goal] || '');
        document.querySelectorAll('.rt-setting-input').forEach(input => input.value = settings.timing?.[input.id] || '');
    },

    saveLuykeGoalSettings() {
        const warehouse = document.getElementById('luyke-goal-warehouse-select').value;
        if (!warehouse) return;
        const settings = {};
        document.querySelectorAll('.luyke-goal-input').forEach(input => settings[input.dataset.goal] = input.value);

        if(!appState.luykeGoalSettings) appState.luykeGoalSettings = {};
        appState.luykeGoalSettings[warehouse] = settings;
        localStorage.setItem('luykeGoalSettings', JSON.stringify(appState.luykeGoalSettings));
        ui.showNotification(`Đã lưu cài đặt mục tiêu Lũy kế cho kho ${warehouse}!`, 'success');
    },

    loadAndApplyLuykeGoalSettings() {
        const warehouseSelect = document.getElementById('luyke-goal-warehouse-select');
        if (!warehouseSelect) return;
        const warehouse = warehouseSelect.value;
        const settings = (warehouse && appState.luykeGoalSettings && appState.luykeGoalSettings[warehouse]) 
            ? appState.luykeGoalSettings[warehouse] 
            : {};
        document.querySelectorAll('.luyke-goal-input').forEach(input => input.value = settings[input.dataset.goal] || '');
    },

    getLuykeGoalSettings(selectedWarehouse = null) {
        const settings = { goals: {} };
        const goalKeys = ['doanhThuThuc', 'doanhThuQD', 'phanTramQD', 'phanTramTC', 'phanTramGiaDung', 'phanTramMLN', 'phanTramPhuKien', 'phanTramBaoHiem', 'phanTramSim', 'phanTramVAS'];

        if (selectedWarehouse && appState.luykeGoalSettings[selectedWarehouse]) {
             const source = appState.luykeGoalSettings[selectedWarehouse];
             goalKeys.forEach(key => settings.goals[key] = parseFloat(source[key]) || 0);
        } else if (!selectedWarehouse) {
            const allSettings = appState.luykeGoalSettings || {};
            const warehouseKeys = Object.keys(allSettings);
            const percentCounts = {};
            
            goalKeys.forEach(key => settings.goals[key] = 0);

            warehouseKeys.forEach(whKey => {
                const source = allSettings[whKey];
                goalKeys.forEach(key => {
                    const value = parseFloat(source[key]) || 0;
                    if (key.startsWith('phanTram')) {
                        settings.goals[key] += value;
                        percentCounts[key] = (percentCounts[key] || 0) + 1;
                    } else {
                        settings.goals[key] += value;
                    }
                });
            });
            
            Object.keys(percentCounts).forEach(key => {
                if (percentCounts[key] > 0) settings.goals[key] /= percentCounts[key];
            });
        }
        return settings;
    },

    getRealtimeGoalSettings(selectedWarehouse = null) {
        if (selectedWarehouse && appState.realtimeGoalSettings && appState.realtimeGoalSettings[selectedWarehouse]) {
            return appState.realtimeGoalSettings[selectedWarehouse];
        }
        if (!selectedWarehouse) {
            const allSettings = appState.realtimeGoalSettings || {};
            const validWarehouseSettings = Object.values(allSettings).filter(s => s.goals && Object.keys(s.goals).length > 0);
            if(validWarehouseSettings.length === 0) return { goals: {}, timing: {} };
            const aggregatedGoals = { doanhThuThuc: 0, doanhThuQD: 0 };
            const percentGoals = {}; const percentCounts = {};
            validWarehouseSettings.forEach(ws => {
                aggregatedGoals.doanhThuThuc += parseFloat(ws.goals.doanhThuThuc || 0);
                aggregatedGoals.doanhThuQD += parseFloat(ws.goals.doanhThuQD || 0);
                Object.entries(ws.goals).forEach(([key, value]) => {
                    if (key.startsWith('phanTram')) {
                        if (!percentGoals[key]) { percentGoals[key] = 0; percentCounts[key] = 0; }
                        const numValue = parseFloat(value);
                        if(!isNaN(numValue)) { percentGoals[key] += numValue; percentCounts[key]++; }
                    }
                });
            });
            Object.keys(percentCounts).forEach(key => { if(percentCounts[key] > 0) aggregatedGoals[key] = percentGoals[key] / percentCounts[key]; });
            const representativeTiming = validWarehouseSettings.length > 0 ? (validWarehouseSettings[0].timing || {}) : {};
            return { goals: aggregatedGoals, timing: representativeTiming };
        }
        return { goals: {}, timing: {} };
    },

    applyContrastSetting() {
        const savedLevel = localStorage.getItem('contrastLevel') || '3';
        document.documentElement.dataset.contrast = savedLevel;
        document.querySelectorAll('.contrast-selector').forEach(sel => sel.value = savedLevel);
    },

    loadHighlightSettings() {
        try {
            const saved = localStorage.getItem('highlightSettings');
            if (saved) appState.highlightSettings = JSON.parse(saved);
        } catch(e) {
            console.error("Error loading highlight settings", e);
            appState.highlightSettings = { luyke: {}, sknv: {}, realtime: {} };
        }
    },
};
--- END FILE: ./modules/settings.service.js ---

--- START FILE: ./modules/storage.js ---
// Version 1.1 - Add logging for debugging
// MODULE: STORAGE
// Quản lý tất cả các tương tác với IndexedDB để lưu trữ dữ liệu cục bộ.

export const storage = {
    db: null,
    dbName: 'AppStorageDB',
    storeName: 'fileStore',

    openDB() {
        console.log("[storage.js openDB] Opening IndexedDB..."); // Log mới
        return new Promise((resolve, reject) => {
            if (this.db) {
                console.log("[storage.js openDB] DB already open."); // Log mới
                return resolve(this.db);
            }
            const request = indexedDB.open(this.dbName, 1);
            request.onupgradeneeded = (event) => {
                console.log("[storage.js openDB] onupgradeneeded triggered."); // Log mới
                const db = event.target.result;
                if (!db.objectStoreNames.contains(this.storeName)) {
                    console.log(`[storage.js openDB] Creating object store: ${this.storeName}`); // Log mới
                    db.createObjectStore(this.storeName, { keyPath: 'id' });
                }
            };
            request.onsuccess = (event) => {
                console.log("[storage.js openDB] Success!"); // Log mới
                this.db = event.target.result;
                resolve(this.db);
            };
            request.onerror = (event) => {
                console.error("[storage.js openDB] IndexedDB error:", event.target.errorCode, event.target.error); // Log chi tiết lỗi
                reject(event.target.error);
            };
        });
    },

    async setItem(id, value) {
        console.log(`[storage.js setItem] Attempting to save item with id: ${id}`); // Log mới
        try {
            const db = await this.openDB();
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([this.storeName], 'readwrite');
                const store = transaction.objectStore(this.storeName);
                const request = store.put({ id, value });
                request.onsuccess = () => {
                    console.log(`[storage.js setItem] Successfully saved item with id: ${id}`); // Log mới
                    resolve();
                };
                request.onerror = (event) => {
                    console.error(`[storage.js setItem] Error saving item with id ${id}:`, event.target.error); // Log chi tiết lỗi
                    reject(event.target.error);
                };
                 transaction.onerror = (event) => { // Log lỗi transaction
                     console.error(`[storage.js setItem] Transaction error saving item with id ${id}:`, event.target.error);
                     reject(event.target.error);
                 };
            });
        } catch (error) {
            console.error(`[storage.js setItem] Error opening DB to save item ${id}:`, error); // Log lỗi mở DB
            throw error; // Re-throw để main.js có thể bắt
        }
    },

    async getItem(id) {
        console.log(`[storage.js getItem] Attempting to get item with id: ${id}`); // Log mới
        try {
            const db = await this.openDB();
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([this.storeName], 'readonly');
                const store = transaction.objectStore(this.storeName);
                const request = store.get(id);
                request.onsuccess = (event) => {
                    const result = event.target.result;
                    console.log(`[storage.js getItem] Successfully retrieved item for id ${id}. Found: ${!!result}`); // Log mới
                    resolve(result ? result.value : null);
                };
                request.onerror = (event) => {
                    console.error(`[storage.js getItem] Error getting item with id ${id}:`, event.target.error); // Log chi tiết lỗi
                    reject(event.target.error);
                };
                 transaction.onerror = (event) => { // Log lỗi transaction
                     console.error(`[storage.js getItem] Transaction error getting item with id ${id}:`, event.target.error);
                     reject(event.target.error);
                 };
            });
        } catch (error) {
             console.error(`[storage.js getItem] Error opening DB to get item ${id}:`, error); // Log lỗi mở DB
             throw error; // Re-throw
        }
    }
};
--- END FILE: ./modules/storage.js ---


--- END FILE: ./project_snapshot.txt ---

--- START FILE: ./services/data-processing.js ---
// Version 3.4 - Fix processThiDuaNhanVienData for 1-column logic & Fix ReferenceError
// Version 3.2 - Fix ReferenceError in parsePastedThiDuaTableData
// Version 3.1 - Fix parsePastedThiDuaTableData to filter out "Tổng" and "BP" rows
// Version 3.0 - Thêm logic phân tích và ánh xạ tên thi đua
// Version 2.0 - Read declarations from appState instead of localStorage
// MODULE: SERVICES - DATA PROCESSING
// Chứa các hàm xử lý, chuẩn hóa, và phân tích cú pháp dữ liệu thô.

import { config } from '../config.js';
import { appState } from '../state.js';
import { utils } from '../utils.js';

export const dataProcessing = {
    /**
     * Phân tích một tập dữ liệu YCX thô để gỡ lỗi các điều kiện lọc thi đua.
     * @param {Array} rawTestData - Dữ liệu YCX thô từ file người dùng tải lên.
     * @returns {Array} - Một mảng các đối tượng, mỗi đối tượng chứa dữ liệu hàng và kết quả của từng bước kiểm tra.
     */
    debugCompetitionFiltering(rawTestData) {
        if (!rawTestData || rawTestData.length === 0) {
            return [];
        }

        const { normalizedData } = this.normalizeData(rawTestData, 'ycx');
        if (normalizedData.length === 0) {
            return [];
        }

        const hinhThucXuatTinhDoanhThu = this.getHinhThucXuatTinhDoanhThu();

        const debugResults = normalizedData.map(row => {
            const checks = {
                isDoanhThuHTX: hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat),
                isThuTien: (row.trangThaiThuTien || "").trim() === 'Đã thu',
                isChuaHuy: (row.trangThaiHuy || "").trim() === 'Chưa hủy',
                isChuaTra: (row.tinhTrangTra || "").trim() === 'Chưa trả',
                isDaXuat: (row.trangThaiXuat || "").trim() === 'Đã xuất'
            };

            const isOverallValid = checks.isDoanhThuHTX && checks.isThuTien && checks.isChuaHuy && checks.isChuaTra && checks.isDaXuat;

            return {
                rowData: row,
                checks: checks,
                isOverallValid: isOverallValid
            };
        });

        return debugResults;
    },

    normalizeCategoryStructureData(rawData) {
        if (!rawData || rawData.length === 0) {
            return { success: false, error: 'File rỗng.', normalizedData: [] };
        }
        const header = Object.keys(rawData[0] || {});

        const nganhHangCol = this.findColumnName(header, ['ngành hàng', 'nganh hang']);
        const nhomHangCol = this.findColumnName(header, ['nhóm hàng', 'nhom hang']);

        if (!nganhHangCol || !nhomHangCol) {
            return { success: false, error: 'File phải có cột "Ngành hàng" và "Nhóm hàng".', normalizedData: [] };
        }

        const normalizedData = rawData
            .map(row => ({
                nganhHang: String(row[nganhHangCol] || '').trim(),
                nhomHang: String(row[nhomHangCol] || '').trim(),
            }))
            .filter(item => item.nganhHang && item.nhomHang);

        return { success: true, normalizedData };
    },

    normalizeBrandData(rawData) {
        if (!rawData || rawData.length === 0) {
            return { success: false, error: 'Sheet "Hãng" rỗng.', normalizedData: [] };
        }
        const header = Object.keys(rawData[0] || {});
        const brandCol = this.findColumnName(header, ['hãng', 'tên hãng', 'nhà sản xuất']);
        if (!brandCol) {
            return { success: false, error: 'Sheet "Hãng" phải có cột "Hãng" hoặc "Tên Hãng".', normalizedData: [] };
        }

        const normalizedData = rawData
            .map(row => String(row[brandCol] || '').trim())
            .filter(brand => brand);

        return { success: true, normalizedData: [...new Set(normalizedData)].sort() };
    },

    // === START: CẬP NHẬT LOGIC ĐỌC KHAI BÁO ===
    getHinhThucXuatTinhDoanhThu: () => {
        const declarationData = appState.declarations.hinhThucXuat;
        if (declarationData) return new Set(declarationData.split('\n').map(l => l.trim()).filter(Boolean));
        return new Set(config.DEFAULT_DATA.HINH_THUC_XUAT_TINH_DOANH_THU);
    },

    getHinhThucXuatTraGop: () => {
        const declarationData = appState.declarations.hinhThucXuatGop;
        if (declarationData) return new Set(declarationData.split('\n').map(l => l.trim()).filter(Boolean));
        return new Set(config.DEFAULT_DATA.HINH_THUC_XUAT_TRA_GOP);
    },

    getHeSoQuyDoi: () => {
        const declarationData = appState.declarations.heSoQuyDoi;
        const heSoMap = {};
        if (declarationData) {
            declarationData.split('\n').filter(l => l.trim()).forEach(line => {
                const parts = line.split(',');
                if (parts.length >= 2) {
                    const key = parts[0].trim();
                    const value = parseFloat(parts[1].trim());
                    if (key && !isNaN(value)) heSoMap[key] = value;
                }
            });
            return Object.keys(heSoMap).length > 0 ? heSoMap : config.DEFAULT_DATA.HE_SO_QUY_DOI;
        }
        return config.DEFAULT_DATA.HE_SO_QUY_DOI;
    },
    // === END: CẬP NHẬT LOGIC ĐỌC KHAI BÁO ===

    findColumnName(header, aliases) {
        for (const colName of header) {
            const processedColName = String(colName || '').trim().toLowerCase();
            if (aliases.includes(processedColName)) {
                return colName;
            }
        }
        return null;
    },

    normalizeData(rawData, fileType) {
        const mapping = config.COLUMN_MAPPINGS[fileType];
        if (!mapping) {
            console.error(`No column mapping found for fileType: ${fileType}`);
            return { normalizedData: [], success: false, missingColumns: ['Unknown mapping'] };
        }

        if (!rawData || rawData.length === 0) {
            return { normalizedData: [], success: true, missingColumns: [] };
        }

        const header = Object.keys(rawData[0] || {});
        const foundMapping = {};
        let allRequiredFound = true;
        const missingColumns = [];

        appState.debugInfo[fileType] = { required: [], found: header, firstFiveMsnv: [] };

        for (const key in mapping) {
            const { required, displayName, aliases } = mapping[key];
            const foundName = this.findColumnName(header, aliases);
            foundMapping[key] = foundName;

            if (required) {
                const status = !!foundName;
                appState.debugInfo[fileType].required.push({ displayName, foundName: foundName || 'Không tìm thấy', status: status });
                if (!status) {
                    allRequiredFound = false;
                    missingColumns.push(displayName);
                }
            }
        }

        if (fileType === 'giocong' || fileType === 'thuongnong') {
            if (!foundMapping.maNV && !foundMapping.hoTen) {
                allRequiredFound = false;
                const missingMsg = 'Mã NV hoặc Tên NV';
                missingColumns.push(missingMsg);
                if (!appState.debugInfo[fileType].required.some(r => r.displayName.includes('NV'))) {
                     appState.debugInfo[fileType].required.push({ displayName: missingMsg, foundName: 'Không tìm thấy', status: false });
                }
            }
        }

        if (!allRequiredFound) {
            return { normalizedData: [], success: false, missingColumns };
        }

        const normalizedData = rawData.map(row => {
            const newRow = {};
            for (const key in foundMapping) {
                if (foundMapping[key]) {
                    if (key === 'maNV' || key === 'hoTen') {
                        newRow[key] = String(row[foundMapping[key]] || '').trim();
                    } else if ((key === 'ngayTao' || key === 'ngayHenGiao') && row[foundMapping[key]]) {
                        const dateValue = row[foundMapping[key]];
                        if (dateValue instanceof Date) {
                            newRow[key] = dateValue;
                        } else if (typeof dateValue === 'number') {
                            newRow[key] = new Date(Math.round((dateValue - 25569) * 86400 * 1000));
                        } else if (typeof dateValue === 'string') {
                            const parsedDate = new Date(dateValue.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));
                            if (!isNaN(parsedDate)) newRow[key] = parsedDate;
                        }
                    }
                    else {
                        newRow[key] = row[foundMapping[key]];
                    }
                }
            }
            return newRow;
        });

        if (fileType === 'giocong') {
            appState.rawGioCongData = rawData.map(row => {
                const newRow = {};
                for (const key in foundMapping) {
                     if (foundMapping[key]) newRow[key] = row[foundMapping[key]];
                }
                return newRow;
            });
        }

        appState.debugInfo[fileType].firstFiveMsnv = normalizedData.slice(0, 5).map(r => r.maNV).filter(Boolean);

        return { normalizedData, success: true, missingColumns: [] };
    },

    processThuongERP: (pastedText) => {
        if (!pastedText || !pastedText.trim()) return [];
        const lines = pastedText.trim().split('\n');
        const results = [];
        const regex = /(ĐML_|TGD|ĐMM|ĐMS).*?(BP .*?)(?:Nhân Viên|Trưởng Ca)(.*?)([\d,]+)$/;
        lines.forEach(line => {
            const match = line.replace(/\s+/g, ' ').match(regex);
            if (match) results.push({ name: match[3].trim(), bonus: match[4].trim() });
        });
        return results;
    },

    parseLuyKePastedData: (text) => {
        const defaults = {
            mainKpis: {},
            comparisonData: { value: 0, percentage: 'N/A' },
            luotKhachData: { value: 0, percentage: 'N/A' },
            dtDuKien: 0,
            dtqdDuKien: 0,
        };
        if (!text) return defaults;

        const allLines = text.split('\n').map(line => line.trim());
        const textContent = allLines.join(' ');

        const patterns = {
            'Thực hiện DT thực': /DTLK\s+([\d,.]+)/,
            'Thực hiện DTQĐ': /DTQĐ\s+([\d,.]+)/,
            '% HT Target Dự Kiến (QĐ)': /% HT Target Dự Kiến \(QĐ\)\s+([\d.]+%?)/,
            'Tỷ Trọng Trả Góp': /Tỷ Trọng Trả Góp\s+([\d.]+%?)/,
        };

        for (const [key, regex] of Object.entries(patterns)) {
            const match = textContent.match(regex);
            if (match && match[1]) {
                defaults.mainKpis[key] = match[1];
            }
        }

        const findValueAfterKeyword = (lines, keyword, isQd = false) => {
            let keywordRegex;
            if (isQd) {
                keywordRegex = new RegExp(keyword.replace('(', '\\(').replace(')', '\\)'));
            } else {
                keywordRegex = new RegExp(`^${keyword}$`);
            }

            const index = lines.findIndex(line => keywordRegex.test(line) && !/lượt khách/i.test(line));
            if (index !== -1 && index + 1 < lines.length) {
                return parseFloat(lines[index + 1].replace(/,/g, '')) || 0;
            }
            return 0;
        };

        defaults.dtDuKien = findValueAfterKeyword(allLines, "DT Dự Kiến");
        defaults.dtqdDuKien = findValueAfterKeyword(allLines, "DT Dự Kiến (QĐ)", true);

        const dtckIndex = allLines.findIndex(line => line.includes('DTCK Tháng'));
        if (dtckIndex !== -1 && dtckIndex + 1 < allLines.length) {
            const valueLine = allLines[dtckIndex + 1];
            const values = valueLine.split(/\s+/);
            if (values.length >= 2) {
                defaults.comparisonData = {
                    value: parseFloat(values[0].replace(/,/g, '')) || 0,
                    percentage: values[1] || 'N/A'
                };
            }
        }

        const luotKhachIndex = allLines.findIndex(line => line.includes('Lượt Khách CK Tháng'));
        if (luotKhachIndex !== -1 && luotKhachIndex + 1 < allLines.length) {
            const valueLine = allLines[luotKhachIndex + 1];
            const values = valueLine.split(/\s+/);
            if (values.length >= 2) {
                defaults.luotKhachData = {
                    value: parseFloat(values[0].replace(/,/g, '')) || 0,
                    percentage: values[1] || 'N/A'
                };
            }
        }

        return defaults;
    },

    parseCompetitionDataFromLuyKe: (text) => {
        if (!text || !text.trim()) return [];
        const lines = text.split('\n').map(l => l.trim());
        const results = [];
        let currentCompetition = null;

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (line.toLowerCase().startsWith('thi đua')) {
                if (currentCompetition) results.push(currentCompetition);
                currentCompetition = {
                    name: line.replace("Thi đua doanh thu", "DT").replace("Thi đua số lượng", "SL"),
                    type: line.toLowerCase().includes('doanh thu') ? 'doanhThu' : 'soLuong',
                    luyKe: 0, target: 0, hoanThanh: '0%'
                };
            } else if (currentCompetition) {
                if (line.startsWith('DTLK') || line.startsWith('SLLK') || line.startsWith('DTQĐ')) {
                    if (i + 1 < lines.length) {
                        currentCompetition.luyKe = parseFloat(lines[i + 1].replace(/,/g, '')) || 0;
                    }
                } else if (line.startsWith('Target')) {
                    if (i + 1 < lines.length) {
                        currentCompetition.target = parseFloat(lines[i + 1].replace(/,/g, '')) || 0;
                    }
                } else if (line.startsWith('% HT Dự Kiến')) {
                    if (i + 1 < lines.length) {
                        currentCompetition.hoanThanh = lines[i + 1] || '0%';
                    }
                }
            }
        }
        if (currentCompetition) results.push(currentCompetition);

        appState.competitionData = results;
        return results;
    },

    /**
     * Cập nhật Bảng Ánh Xạ Tên Thi Đua trong appState và Cloud.
     * @param {Array<string>} mainHeaders - Danh sách tên gốc của các chương trình thi đua.
     */
    updateCompetitionNameMappings(mainHeaders) {
        if (!mainHeaders || mainHeaders.length === 0) return;

        // Tải mappings MỚI NHẤT từ appState (đã được tải từ Cloud khi init)
        const oldMappings = appState.competitionNameMappings || {};
        const newMappings = { ...oldMappings }; // Sao chép để tránh ghi đè
        let hasChanges = false;

        mainHeaders.forEach(originalName => {
            // Chỉ thêm nếu tên này chưa tồn tại
            if (!newMappings.hasOwnProperty(originalName)) {
                newMappings[originalName] = ''; // Thêm tên mới với giá trị rỗng
                hasChanges = true;
            }
        });

        // Chỉ lưu lên Cloud nếu có tên mới được thêm vào
        if (hasChanges) {
            appState.competitionNameMappings = newMappings;
            // Không lưu localStorage nữa, hàm gọi (listeners-settings) sẽ xử lý việc lưu cloud
            console.log("Phát hiện tên thi đua mới, Bảng Ánh Xạ đã được cập nhật trong appState.");
        }
    },

    /**
     * @private
     * Hàm dọn dẹp tên chương trình thi đua để so khớp.
     */
    _cleanCompetitionName(name) {
        return name.replace(/thi đua doanh thu bán hàng|thi đua doanh thu|thi đua số lượng/gi, "").trim();
    },

    // *** START: HÀM ĐƯỢC VIẾT LẠI (v3.4) - Sửa lỗi logic 1 cột ***
    /**
     * Xử lý dữ liệu thi đua nhân viên đã được phân tích cú pháp.
     * @param {Object} parsedData - Đối tượng trả về từ `parsePastedThiDuaTableData` ({ mainHeaders, subHeaders, dataRows }).
     * @param {Array} luykeCompetitionData - Dữ liệu mục tiêu thi đua từ `parseCompetitionDataFromLuyKe`.
     * @returns {Array} - Mảng dữ liệu báo cáo thi đua đã được chuẩn hóa.
     */
    processThiDuaNhanVienData(parsedData, luykeCompetitionData) {
        const { mainHeaders, subHeaders, dataRows } = parsedData;
        
        const debugInfo = { required: [], found: [], status: 'Đang xử lý...' };
        appState.debugInfo['thiduanv-pasted'] = debugInfo;

        if (appState.danhSachNhanVien.length === 0) {
            debugInfo.status = 'Lỗi: Danh sách nhân viên (DSNV) chưa được tải lên.';
            return [];
        }
        if (mainHeaders.length === 0 || dataRows.length === 0 || subHeaders.length === 0) {
            debugInfo.status = 'Lỗi: Dữ liệu dán vào không hợp lệ, không tìm thấy tiêu đề hoặc dòng dữ liệu.';
            return [];
        }

        // Tải bảng ánh xạ tên rút gọn (đã được tải từ Cloud)
        const nameMappings = appState.competitionNameMappings || {};
        
        // Tạo map mục tiêu từ dữ liệu lũy kế
        const competitionTargets = (luykeCompetitionData || []).map(comp => ({
            ...comp,
            cleanedName: this._cleanCompetitionName(comp.name)
        }));
        
        const finalReport = [];
        const totalEmployeesInDSNV = appState.danhSachNhanVien.length; // Chỉ đếm 1 lần

        dataRows.forEach(row => {
            // Bước 3.1: Trích xuất MSNV từ "Nguyễn Vũ Linh - 3031"
            const nameParts = row.name.split(' - ');
            const msnv = nameParts.length > 1 ? nameParts[nameParts.length - 1].trim() : null;

            let employee;
            if (msnv) {
                // Bước 3.2: Tra cứu DSNV
                employee = appState.employeeMaNVMap.get(msnv);
            }

            // Nếu không tìm thấy, tạo một đối tượng tạm
            if (!employee) {
                employee = { 
                    hoTen: row.name, 
                    maNV: msnv || 'N/A', 
                    boPhan: 'Nhân viên không tìm thấy' 
                };
            }

            const employeeResult = {
                maNV: employee.maNV,
                hoTen: employee.hoTen,
                boPhan: employee.boPhan,
                completedCount: 0,
                totalCompetitions: mainHeaders.length, // Số lượng chương trình
                competitions: [] // Mảng chứa dữ liệu của từng chương trình
            };

            // Lặp qua TẤT CẢ các cột (vì mainHeaders và subHeaders có cùng độ dài)
            // Giả định mainHeaders.length === subHeaders.length
            for (let i = 0; i < mainHeaders.length; i++) {
                const originalName = mainHeaders[i];
                const loaiSoLieu = subHeaders[i]; // "DTLK", "SLLK", "DTQĐ"
                
                // Bước 5.1: Tra cứu tên rút gọn
                const shortName = nameMappings[originalName] || originalName;
                
                // Logic tính toán mục tiêu (target)
                const cleanedName = this._cleanCompetitionName(originalName);
                const matchedTarget = competitionTargets.find(t => t.cleanedName === cleanedName);
                const groupTarget = matchedTarget ? matchedTarget.target : 0;
                const individualTarget = totalEmployeesInDSNV > 0 ? groupTarget / totalEmployeesInDSNV : 0;

                // Bước 3.3: Lấy GIÁ TRỊ THỰC TẾ (chỉ 1 giá trị)
                const giaTri = parseFloat(String(row.values[i] || '0').replace(/,/g, '')) || 0;
                const actualSales = giaTri; // actualSales chính là giaTri

                const percentExpected = individualTarget > 0 ? actualSales / individualTarget : (actualSales > 0 ? Infinity : 0);

                if (percentExpected >= 1) {
                    employeeResult.completedCount++;
                }

                // Lưu đối tượng mới với cấu trúc 1 cột
                employeeResult.competitions.push({
                    tenNganhHang: shortName, // Tên rút gọn
                    tenGoc: originalName,    // Tên gốc
                    loaiSoLieu: loaiSoLieu,  // Loại dữ liệu (DTLK, SLLK, DTQĐ)
                    giaTri: giaTri,        // Giá trị
                    
                    // Các trường cũ để so sánh (nếu cần)
                    thucHien: actualSales,
                    mucTieu: individualTarget,
                    percentExpected: percentExpected,
                });
            }

            employeeResult.completionRate = employeeResult.totalCompetitions > 0 ? employeeResult.completedCount / employeeResult.totalCompetitions : 0;
            finalReport.push(employeeResult);
        });

        debugInfo.status = `Thành công: Đã xử lý báo cáo cho ${finalReport.length} nhân viên.`;
        return finalReport;
    },
    // *** END: HÀM ĐƯỢC VIẾT LẠI (v3.4) ***

    // *** START: HÀM ĐƯỢC VIẾT LẠI (v3.2) - Sửa lỗi ReferenceError ***
    /**
     * Phân tích cú pháp dữ liệu thô từ ô dán "Thi đua nhân viên".
     * @param {string} rawText - Văn bản thô từ textarea.
     * @returns {Object} - { success, mainHeaders, subHeaders, dataRows, error? }
     */
    parsePastedThiDuaTableData(rawText) {
        const debugInfo = { required: [], found: [], status: 'Bắt đầu phân tích...' };
        appState.debugInfo['thiduanv-pasted'] = debugInfo;

        if (!rawText || !rawText.trim()) {
            debugInfo.status = 'Lỗi: Dữ liệu dán vào rỗng.';
            return { success: false, error: debugInfo.status, mainHeaders: [], subHeaders: [], dataRows: [] };
        }

        // Bước 0: Tiền xử lý (Làm sạch dữ liệu thô)
        const lines = rawText.split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0);

        // --- Các hằng số Regex ---
        const splitRegex = /\s{2,}|\t/; // Tách bằng 2+ dấu cách HOẶC 1 dấu tab
        const numberCheckRegex = /^-?[\d,.]+$/; // Kiểm tra là số

        // --- Tìm các "Mỏ neo" (Anchors) ---
        const mainHeaderStartIndex = lines.findIndex(line => line.includes('Phòng ban'));
        const subHeaderStartIndex = lines.findIndex(line => line.startsWith('DTLK') || line.startsWith('SLLK') || line.startsWith('DTQĐ'));
        
        let dataEndIndex = lines.findIndex(line => line.includes('Hỗ trợ BI'));
        if (dataEndIndex === -1) {
            dataEndIndex = lines.length; // Nếu không tìm thấy footer, lấy hết
        }

        // *** (LOGIC SỬA LỖI v3.2) ***
        // Tìm điểm bắt đầu của dữ liệu (dòng đầu tiên SAU tiêu đề phụ)
        // Phải tìm trước khi cắt mảng Tiêu đề phụ
        const dataRowsStartIndex = lines.findIndex((line, index) => {
            if (index <= subHeaderStartIndex) return false; // Phải ở SAU dòng sub-header đầu tiên
            
            const parts = line.split(splitRegex).map(p => p.trim());
            const firstPart = parts[0] || "";

            // Bỏ qua nếu là dòng tổng, dòng bộ phận, hoặc dòng sub-header bị ngắt
            if (firstPart.startsWith('Tổng') || firstPart.startsWith('BP ') || firstPart.startsWith('DTLK') || firstPart.startsWith('SLLK') || firstPart.startsWith('DTQĐ')) {
                return false;
            }
            
            // Đây là dòng dữ liệu NẾU nó có > 1 phần TỬ VÀ phần tử thứ 2 là số
            return parts.length > 1 && numberCheckRegex.test(parts[1]);
        });
        // *** (KẾT THÚC LOGIC SỬA LỖI v3.2) ***

        // --- Kiểm tra Mỏ neo ---
        if (mainHeaderStartIndex === -1 || subHeaderStartIndex === -1 || dataRowsStartIndex === -1) {
            let error = `Lỗi: Không thể tìm thấy mỏ neo. 'Phòng ban': ${mainHeaderStartIndex !== -1}. 'SLLK/DTLK': ${subHeaderStartIndex !== -1}. 'Dòng dữ liệu đầu tiên': ${dataRowsStartIndex !== -1}.`;
            debugInfo.status = error;
            return { success: false, error: error, mainHeaders: [], subHeaders: [], dataRows: [] };
        }
        
        // Bước 1: Trích xuất Tiêu Đề Chính (Main Headers)
        const mainHeaders = lines.slice(mainHeaderStartIndex + 1, subHeaderStartIndex);
        debugInfo.found.push({ name: 'Tiêu đề chính (Ngành hàng)', value: `${mainHeaders.length} mục`, status: mainHeaders.length > 0 });

        // Bước 2: Trích xuất Tiêu Đề Phụ (Sub Headers)
        // Lấy TẤT CẢ các dòng tiêu đề phụ (từ dòng sub-header đầu tiên đến trước dòng data đầu tiên)
        const subHeaderLines = lines.slice(subHeaderStartIndex, dataRowsStartIndex);
        const subHeaderString = subHeaderLines.join('\t'); // Nối bằng Tab
        const subHeaders = subHeaderString.split(/\s+/).filter(Boolean);
        debugInfo.found.push({ name: 'Tiêu đề phụ (SLLK/DTQĐ)', value: `${subHeaders.length} mục`, status: subHeaders.length > 0 });

        // Bước 3: Trích xuất Dữ Liệu Nhân Viên (Data Rows)
        const potentialDataLines = lines.slice(dataRowsStartIndex, dataEndIndex);
        const dataRows = [];
        
        for (const line of potentialDataLines) {
            const parts = line.split(splitRegex).map(p => p.trim());
            const firstPart = parts[0] || "";

            // *** QUY TẮC LỌC (v3.1) ***
            // Bỏ qua các dòng tổng và dòng tóm tắt bộ phận
            if (firstPart.startsWith('Tổng') || firstPart.startsWith('BP ')) {
                continue;
            }
            // *** KẾT THÚC QUY TẮC LỌC ***

            // Áp dụng "Quy tắc kiểm tra" (Kiểm tra lại để chắc chắn)
            if (parts.length > 1 && numberCheckRegex.test(parts[1])) {
                dataRows.push({
                    name: firstPart,
                    values: parts.slice(1)
                });
            }
        }
        debugInfo.found.push({ name: 'Dòng dữ liệu nhân viên', value: `${dataRows.length} dòng`, status: dataRows.length > 0 });

        if (mainHeaders.length === 0 || subHeaders.length === 0 || dataRows.length === 0) {
            debugInfo.status = 'Lỗi: Không thể phân tích dữ liệu. Thiếu Tiêu đề chính, Tiêu đề phụ, hoặc Dòng dữ liệu (sau khi lọc).';
            return { success: false, error: debugInfo.status, mainHeaders, subHeaders, dataRows };
        }
        
        // Kiểm tra tính toàn vẹn dữ liệu
        const expectedDataCols = subHeaders.length;
        if (dataRows.length > 0 && dataRows[0].values.length !== expectedDataCols) {
             console.warn(`[parsePastedThiDua] Cảnh báo: Số cột tiêu đề phụ (${expectedDataCols}) không khớp với số cột dữ liệu (${dataRows[0].values.length}). Dữ liệu có thể bị lệch.`);
             debugInfo.status = `Cảnh báo: Số cột không khớp! Tiêu đề phụ (${expectedDataCols}) vs Dữ liệu (${dataRows[0].values.length}).`;
             // Không thất bại, nhưng cảnh báo
        } else {
            debugInfo.status = `Phân tích thành công.`;
        }

        return { success: true, mainHeaders, subHeaders, dataRows };
    },
    // *** END: HÀM ĐƯỢC VIẾT LẠI (v3.2) ***

    classifyInsurance: (productName) => {
        if (!productName || typeof productName !== 'string') return null;
        const name = productName.trim().toLowerCase();
        if (name.includes('bảo hành mở rộng')) return 'BHMR';
        if (name.includes('1 đổi 1')) return 'BH1d1';
        if (name.includes('khoản vay')) return 'BHKV';
        if (name.includes('rơi vỡ')) return 'BHRV';
        if (name.includes('samsung care+')) return 'BHSC';
        if (name.includes('ô tô') || name.includes('vật chất ô tô')) return 'BHOTO';
        if (name.includes('xe máy') || name.includes('xe moto')) return 'BHXM';
        if (name.includes('xã hội') || name.includes('y tế')) return 'BHYT';
        return null;
    },

    processGioCongData: () => {
        const gioCongByMSNV = {};
        let currentMaNV = null;

        if (!appState.rawGioCongData || appState.rawGioCongData.length === 0) return gioCongByMSNV;

        for (const row of appState.rawGioCongData) {
            const maNV = String(row.maNV || '').trim();
            const hoTen = String(row.hoTen || '').trim().replace(/\s+/g, ' ');
            let foundMaNV = maNV || appState.employeeNameToMaNVMap.get(hoTen.toLowerCase()) || null;
            if (foundMaNV) currentMaNV = foundMaNV;

            if (currentMaNV && gioCongByMSNV[currentMaNV] === undefined) {
                gioCongByMSNV[currentMaNV] = 0;
            }

            const gioCongValue = parseFloat(String(row.tongGioCong || '0').replace(/,/g, '')) || 0;
            if (currentMaNV && gioCongValue > 0) {
                gioCongByMSNV[currentMaNV] += gioCongValue;
            }
        }
        return gioCongByMSNV;
    },

    _findHeaderAndProcess(sheet, requiredKeywords) {
        if (!sheet) return [];
        const rows = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: null });
        if (rows.length === 0) return [];

        let headerRowIndex = -1;
        let foundHeaders = [];

        for (let i = 0; i < Math.min(rows.length, 10); i++) {
            const row = rows[i];
            const lowerCaseRow = row.map(cell => String(cell || '').trim().toLowerCase());

            const allKeywordsFound = requiredKeywords.every(keyword =>
                lowerCaseRow.some(cell => cell.includes(keyword))
            );

            if (allKeywordsFound) {
                headerRowIndex = i;
                foundHeaders = rows[i].map(cell => String(cell || '').trim());
                break;
            }
        }

        if (headerRowIndex === -1) {
            throw new Error(`Không tìm thấy dòng tiêu đề chứa đủ các từ khóa: ${requiredKeywords.join(', ')}.`);
        }

        const dataRows = rows.slice(headerRowIndex + 1);
        const jsonData = dataRows.map(row => {
            const obj = {};
            foundHeaders.forEach((header, index) => {
                if (header) {
                    const value = row[index];
                    const upperKey = header.toUpperCase();
                    if (upperKey.includes('KÊNH') || upperKey.includes('SIÊU THỊ') || upperKey.includes('NGÀNH HÀNG') || upperKey.includes('TỈNH') || upperKey.includes('BOSS')) {
                        obj[header] = value;
                    } else if (typeof value === 'string' && value.includes('%')) {
                        obj[header] = parseFloat(value.replace(/%|,/g, '')) / 100 || 0;
                    } else if (value !== null && value !== undefined) {
                        obj[header] = parseFloat(String(value).replace(/,/g, '')) || 0;
                    } else {
                        obj[header] = 0;
                    }
                }
            });
            return obj;
        }).filter(obj => {
            const supermarketKey = Object.keys(obj).find(k => k.toLowerCase().includes('siêu thị'));
            return supermarketKey && obj[supermarketKey];
        });

        return jsonData;
    },

    processThiDuaVungFile(workbook) {
        const sheetNames = workbook.SheetNames;
        const chiTietSheet = workbook.Sheets[sheetNames.find(name => name.toUpperCase().includes('CHITIET'))];
        const tongSheet = workbook.Sheets[sheetNames.find(name => name.toUpperCase().includes('TONG'))];

        if (!chiTietSheet || !tongSheet) {
            throw new Error('File Excel phải chứa sheet có tên chứa "CHITIET" và "TONG".');
        }

        const chiTietData = this._findHeaderAndProcess(chiTietSheet, ['siêu thị', 'ngành hàng', 'kênh']);
        const tongData = this._findHeaderAndProcess(tongSheet, ['siêu thị', 'tổng thưởng']);

        return { chiTietData, tongData };
    },
};
--- END FILE: ./services/data-processing.js ---

--- START FILE: ./services.js ---
// Version 2.7 - Remove debug logs after fixing revenue calculation
// MODULE: SERVICES FACADE
// File này đóng vai trò điều phối, nhập khẩu các module logic con và export chúng ra ngoài.

import { config } from '../config.js';
import { appState } from './state.js';
import { ui } from './ui.js';
import { utils } from './utils.js';
import { dataProcessing } from './services/data-processing.js';

const reportGeneration = {
    calculateCompetitionFocusReport(sourceYcxData, competitionConfigs) {
        if (!sourceYcxData || sourceYcxData.length === 0 || !competitionConfigs || competitionConfigs.length === 0) {
            return [];
        }

        const hinhThucXuatTinhDoanhThu = dataProcessing.getHinhThucXuatTinhDoanhThu();

        const validSalesData = sourceYcxData.filter(row => {
            const isDoanhThuHTX = hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat);
            const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' &&
                                (row.trangThaiHuy || "").trim() === 'Chưa hủy' &&
                                (row.tinhTrangTra || "").trim() === 'Chưa trả' &&
                                (row.trangThaiXuat || "").trim() === 'Đã xuất';
            return isBaseValid && isDoanhThuHTX;
        });

        const report = competitionConfigs.map(config => {
            const cleanedConfigGroups = new Set((config.groups || []).map(g => utils.cleanCategoryName(g)));

            let baseSalesData = validSalesData.filter(row => {
                const cleanNhomHangFromYCX = utils.cleanCategoryName(row.nhomHang);

                const isInGroup = cleanedConfigGroups.has(cleanNhomHangFromYCX);
                if (!isInGroup) return false;

                if (config.type === 'soluong' && (config.minPrice > 0 || config.maxPrice > 0)) {
                    const price = (parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0) / (parseInt(String(row.soLuong || "1"), 10) || 1);
                    const minPrice = config.minPrice || 0;
                    const maxPrice = config.maxPrice || Infinity;
                    if (price < minPrice || price > maxPrice) return false;
                }
                return true;
            });

            if (config.excludeApple) {
                baseSalesData = baseSalesData.filter(row => row.nhaSanXuat !== 'Apple');
            }

            const employeeResults = appState.danhSachNhanVien.map(employee => {
                let performanceByBrand = {};
                let totalTargetRevenue = 0;
                let totalTargetQuantity = 0;
                let baseCategoryRevenue = 0;
                let baseCategoryQuantity = 0;

                baseSalesData.forEach(row => {
                    const msnvMatch = String(row.nguoiTao || '').match(/(\d+)/);
                    if (msnvMatch && msnvMatch[1].trim() === employee.maNV) {
                        const revenueValue = (parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0);
                        const quantityValue = (parseInt(String(row.soLuong || "0"), 10) || 0);

                        baseCategoryRevenue += revenueValue;
                        baseCategoryQuantity += quantityValue;

                        const brand = row.nhaSanXuat;
                        if ((config.brands || []).includes(brand)) {
                            if (!performanceByBrand[brand]) {
                                performanceByBrand[brand] = { revenue: 0, quantity: 0 };
                            }
                            performanceByBrand[brand].revenue += revenueValue;
                            performanceByBrand[brand].quantity += quantityValue;

                            totalTargetRevenue += revenueValue;
                            totalTargetQuantity += quantityValue;
                        }
                    }
                });

                return {
                    maNV: employee.maNV,
                    hoTen: employee.hoTen,
                    boPhan: employee.boPhan,
                    performanceByBrand,
                    targetBrandsRevenue: totalTargetRevenue,
                    targetBrandsQuantity: totalTargetQuantity,
                    baseCategoryRevenue,
                    baseCategoryQuantity,
                    tyLeDT: baseCategoryRevenue > 0 ? (totalTargetRevenue / baseCategoryRevenue) : 0,
                    tyLeSL: baseCategoryQuantity > 0 ? (totalTargetQuantity / baseCategoryQuantity) : 0,
                };
            }).filter(e => e.baseCategoryRevenue > 0 || e.baseCategoryQuantity > 0);

            return {
                competition: config,
                employeeData: employeeResults,
            };
        }).filter(r => r.employeeData.length > 0);

        return report;
    },

    generateMasterReportData: (sourceData, goalSettings, isRealtime = false) => {
        if (appState.danhSachNhanVien.length === 0) return [];

        const hinhThucXuatTinhDoanhThu = dataProcessing.getHinhThucXuatTinhDoanhThu();
        const hinhThucXuatTraGop = dataProcessing.getHinhThucXuatTraGop();
        const heSoQuyDoi = dataProcessing.getHeSoQuyDoi();
        const PG = config.PRODUCT_GROUPS;
        const gioCongByMSNV = dataProcessing.processGioCongData();
        const thuongNongByMSNV = {};

        appState.thuongNongData.forEach(row => {
            const maNV = String(row.maNV || '').trim();
            const hoTen = String(row.hoTen || '').trim().replace(/\s+/g, ' ');
            let foundMaNV = maNV || appState.employeeNameToMaNVMap.get(hoTen.toLowerCase()) || null;
            if (foundMaNV) {
                const diemThuongValue = parseFloat(String(row.diemThuong || '0').replace(/,/g, '')) || 0;
                thuongNongByMSNV[foundMaNV] = (thuongNongByMSNV[foundMaNV] || 0) + diemThuongValue;
            }
        });

        const thuongNongThangTruocByMSNV = {};
        appState.thuongNongDataThangTruoc.forEach(row => {
            const maNV = String(row.maNV || '').trim();
            const hoTen = String(row.hoTen || '').trim().replace(/\s+/g, ' ');
            let foundMaNV = maNV || appState.employeeNameToMaNVMap.get(hoTen.toLowerCase()) || null;
            if (foundMaNV) {
                const diemThuongValue = parseFloat(String(row.diemThuong || '0').replace(/,/g, '')) || 0;
                thuongNongThangTruocByMSNV[foundMaNV] = (thuongNongThangTruocByMSNV[foundMaNV] || 0) + diemThuongValue;
            }
        });

        return appState.danhSachNhanVien.map((employee) => {
            let data = {
                doanhThu: 0, doanhThuQuyDoi: 0, doanhThuTraGop: 0, doanhThuTraGopQuyDoi: 0,
                doanhThuChuaXuat: 0, doanhThuQuyDoiChuaXuat: 0,
                doanhThuGiaoXa: 0, doanhThuQuyDoiGiaoXa: 0,
                dtICT: 0, dtCE: 0, dtPhuKien: 0, dtGiaDung: 0, dtMLN: 0,
                slICT: 0, dtBaoHiem: 0, slBaoHiem: 0,
                slPhuKien: 0, slGiaDung: 0, slCE: 0, slPinSDP: 0, slCamera: 0,
                slTaiNgheBLT: 0, slNoiChien: 0, slMLN: 0, slRobotHB: 0,
                slBH1d1: 0, slBHXM: 0, slBHRV: 0, slBHMR: 0,
                dtTivi: 0, slTivi: 0, dtTuLanh: 0, slTuLanh: 0,
                dtMayGiat: 0, slMayGiat: 0, dtMayLanh: 0, slMayLanh: 0,
                dtDienThoai: 0, slDienThoai: 0, dtLaptop: 0, slLaptop: 0,
                doanhThuTheoNganhHang: {}, slSimOnline: 0, slUDDD: 0, slBaoHiemVAS: 0, slSmartphone: 0, slBaoHiemDenominator: 0,
                qdc: {}
            };

            for (const key in PG.QDC_GROUPS) data.qdc[key] = { sl: 0, dt: 0, dtqd: 0, name: PG.QDC_GROUPS[key].name };

            sourceData.forEach(row => {
                const msnvMatch = String(row.nguoiTao || '').match(/(\d+)/);
                if (msnvMatch && msnvMatch[1].trim() === employee.maNV) {
                    const isDoanhThuHTX = hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat);
                    const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' && (row.trangThaiHuy || "").trim() === 'Chưa hủy' && (row.tinhTrangTra || "").trim() === 'Chưa trả';

                    if (isBaseValid && isDoanhThuHTX) {
                        const thanhTien = parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0;
                        if(isNaN(thanhTien)) return;

                        const heSo = heSoQuyDoi[row.nhomHang] || 1;
                        const trangThaiXuat = (row.trangThaiXuat || "").trim();

                        const nhomHangCode = String(row.nhomHang || '').match(/^\d+/)?.[0] || null;
                        const nganhHangCode = String(row.nganhHang || '').match(/^\d+/)?.[0] || null;

                        const isICT = PG.ICT.includes(nhomHangCode);
                        const isCE = PG.CE.includes(nhomHangCode);
                        const isPhuKien = PG.PHU_KIEN.includes(nganhHangCode);
                        const isGiaDung = PG.GIA_DUNG.includes(nganhHangCode);
                        const isMLN = PG.MAY_LOC_NUOC.includes(nhomHangCode);

                        if (trangThaiXuat === 'Chưa xuất') {
                            data.doanhThuChuaXuat += thanhTien;
                            data.doanhThuQuyDoiChuaXuat += thanhTien * heSo;
                        } else if (trangThaiXuat === 'Đã xuất') {
                            const soLuong = parseInt(String(row.soLuong || "0"), 10) || 0;
                            if(isNaN(soLuong)) return;

                            const nganhHangName = utils.cleanCategoryName(row.nganhHang);

                            // Revenue calculation no longer excludes specific HTX
                            data.doanhThu += thanhTien;
                            data.doanhThuQuyDoi += thanhTien * heSo;

                            if (isRealtime && row.ngayTao && row.ngayHenGiao) {
                                const diffTime = row.ngayHenGiao - row.ngayTao;
                                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                if (diffDays >= 2) {
                                    data.doanhThuGiaoXa += thanhTien;
                                    data.doanhThuQuyDoiGiaoXa += thanhTien * heSo;
                                }
                            }

                            if (hinhThucXuatTraGop.has(row.hinhThucXuat)) { data.doanhThuTraGop += thanhTien; data.doanhThuTraGopQuyDoi += thanhTien * heSo; }

                            if (nganhHangName) {
                                if (!data.doanhThuTheoNganhHang[nganhHangName]) data.doanhThuTheoNganhHang[nganhHangName] = { revenue: 0, quantity: 0, revenueQuyDoi: 0 };
                                data.doanhThuTheoNganhHang[nganhHangName].revenue += thanhTien;
                                data.doanhThuTheoNganhHang[nganhHangName].quantity += soLuong;
                                data.doanhThuTheoNganhHang[nganhHangName].revenueQuyDoi += thanhTien * heSo;
                            }

                            if (isICT) { data.dtICT += thanhTien; }
                            if (isCE) { data.dtCE += thanhTien; data.slCE += soLuong; }
                            if (isPhuKien) { data.dtPhuKien += thanhTien; data.slPhuKien += soLuong; }
                            if (isGiaDung) { data.dtGiaDung += thanhTien; data.slGiaDung += soLuong; }
                            if (isMLN) { data.dtMLN += thanhTien; data.slMLN += soLuong; }

                            if (PG.DIEN_THOAI.includes(nhomHangCode)) { data.dtDienThoai += thanhTien; data.slDienThoai += soLuong; }
                            if (PG.LAPTOP.includes(nhomHangCode)) { data.dtLaptop += thanhTien; data.slLaptop += soLuong; }
                            if (PG.TIVI.includes(nhomHangCode)) { data.dtTivi += thanhTien; data.slTivi += soLuong; }
                            if (PG.TU_LANH.includes(nhomHangCode)) { data.dtTuLanh += thanhTien; data.slTuLanh += soLuong; }
                            if (PG.MAY_GIAT.includes(nhomHangCode)) { data.dtMayGiat += thanhTien; data.slMayGiat += soLuong; }
                            if (PG.MAY_LANH.includes(nhomHangCode)) { data.dtMayLanh += thanhTien; data.slMayLanh += soLuong; }

                            const loaiBaoHiem = dataProcessing.classifyInsurance(row.tenSanPham);
                            if (loaiBaoHiem) {
                                data.dtBaoHiem += thanhTien; data.slBaoHiem += soLuong;
                                if (loaiBaoHiem === 'BH1d1') data.slBH1d1 += soLuong;
                                if (loaiBaoHiem === 'BHXM') data.slBHXM += soLuong;
                                if (loaiBaoHiem === 'BHRV') data.slBHRV += soLuong;
                                if (loaiBaoHiem === 'BHMR') data.slBHMR += soLuong;
                            }
                            if (nhomHangCode === PG.PIN_SDP) data.slPinSDP += soLuong;
                            if (nhomHangCode === PG.CAMERA_TRONG_NHA || nhomHangCode === PG.CAMERA_NGOAI_TROI) data.slCamera += soLuong;
                            if (nhomHangCode === PG.TAI_NGHE_BLT) data.slTaiNgheBLT += soLuong;
                            if (nhomHangCode === PG.NOI_CHIEN) data.slNoiChien += soLuong;
                            if (nhomHangCode === PG.ROBOT_HB) data.slRobotHB += soLuong;

                            if (PG.SIM.includes(nhomHangCode)) data.slSimOnline += soLuong;
                            if (PG.VAS.includes(nhomHangCode)) data.slUDDD += soLuong;
                            if (PG.SMARTPHONE.includes(nhomHangCode)) data.slSmartphone += soLuong;
                            if (PG.BAO_HIEM_VAS.includes(nhomHangCode)) data.slBaoHiemVAS += soLuong;
                            if (PG.BAO_HIEM_DENOMINATOR.includes(nhomHangCode)) data.slBaoHiemDenominator += soLuong;

                            for (const key in PG.QDC_GROUPS) if (PG.QDC_GROUPS[key].codes.includes(nhomHangCode)) {
                                data.qdc[key].sl += soLuong; data.qdc[key].dt += thanhTien; data.qdc[key].dtqd += thanhTien * heSo;
                            }
                        }
                    }
                }
            });

            data.slICT = data.slDienThoai + data.slLaptop;
            const gioCong = gioCongByMSNV[employee.maNV] || 0;
            const thuongNong = thuongNongByMSNV[employee.maNV] || 0;
            const erpEntry = appState.thuongERPData.find(e => e.name.includes(employee.hoTen));
            const thuongERP = erpEntry ? parseFloat(erpEntry.bonus.replace(/,/g, '')) : 0;
            const tongThuNhap = thuongNong + thuongERP;
            const today = new Date();
            const currentDay = today.getDate();
            const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
            let thuNhapDuKien = 0;
            if (currentDay > 1) thuNhapDuKien = (tongThuNhap / (currentDay - 1)) * daysInMonth;
            else if (currentDay === 1) thuNhapDuKien = tongThuNhap * daysInMonth;

            const thuongNongThangTruoc = thuongNongThangTruocByMSNV[employee.maNV] || 0;
            const erpEntryThangTruoc = appState.thuongERPDataThangTruoc.find(e => e.name.includes(employee.hoTen));
            const thuongERPThangTruoc = erpEntryThangTruoc ? parseFloat(erpEntryThangTruoc.bonus.replace(/,/g, '')) : 0;
            const thuNhapThangTruoc = thuongNongThangTruoc + thuongERPThangTruoc;
            const chenhLechThuNhap = thuNhapDuKien - thuNhapThangTruoc;

            const hieuQuaQuyDoi = data.doanhThu > 0 ? (data.doanhThuQuyDoi / data.doanhThu) - 1 : 0;
            const tyLeTraCham = data.doanhThu > 0 ? data.doanhThuTraGop / data.doanhThu : 0;
            const pctPhuKien = data.dtICT > 0 ? data.dtPhuKien / data.dtICT : 0;
            const pctGiaDung = data.dtCE > 0 ? data.dtGiaDung / data.dtCE : 0;
            const pctMLN = data.dtCE > 0 ? data.dtMLN / data.dtCE : 0;
            const pctSim = data.slSmartphone > 0 ? data.slSimOnline / data.slSmartphone : 0;
            const pctVAS = data.slSmartphone > 0 ? data.slUDDD / data.slSmartphone : 0;
            const pctBaoHiem = data.slBaoHiemDenominator > 0 ? data.slBaoHiemVAS / data.slBaoHiemDenominator : 0;

            data.donGiaTivi = data.slTivi > 0 ? data.dtTivi / data.slTivi : 0;
            data.donGiaTuLanh = data.slTuLanh > 0 ? data.dtTuLanh / data.slTuLanh : 0;
            data.donGiaMayGiat = data.slMayGiat > 0 ? data.dtMayGiat / data.slMayGiat : 0;
            data.donGiaMayLanh = data.slMayLanh > 0 ? data.dtMayLanh / data.slMayLanh : 0;
            data.donGiaDienThoai = data.slDienThoai > 0 ? data.dtDienThoai / data.slDienThoai : 0;
            data.donGiaLaptop = data.slLaptop > 0 ? data.dtLaptop / data.slLaptop : 0;

            const totalQuantity = Object.values(data.doanhThuTheoNganhHang).reduce((sum, category) => sum + category.quantity, 0);
            const donGiaTrungBinh = totalQuantity > 0 ? data.doanhThu / totalQuantity : 0;

            return { ...employee, ...data, gioCong, thuongNong, thuongERP, tongThuNhap, thuNhapDuKien, thuNhapThangTruoc, chenhLechThuNhap, hieuQuaQuyDoi, tyLeTraCham, pctPhuKien, pctGiaDung, pctMLN, pctSim, pctVAS, pctBaoHiem, donGiaTrungBinh, mucTieu: goalSettings };
        });
    },

    generateLuyKeChuaXuatReport(sourceYcxData) {
        if (!sourceYcxData || sourceYcxData.length === 0) return [];

        const hinhThucXuatTinhDoanhThu = dataProcessing.getHinhThucXuatTinhDoanhThu();
        const heSoQuyDoi = dataProcessing.getHeSoQuyDoi();
        const report = {};

        sourceYcxData.forEach(row => {
            const isDoanhThuHTX = hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat);
            const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' &&
                                (row.trangThaiHuy || "").trim() === 'Chưa hủy' &&
                                (row.tinhTrangTra || "").trim() === 'Chưa trả' &&
                                (row.trangThaiXuat || "").trim() === 'Chưa xuất';

            if (isBaseValid && isDoanhThuHTX) {
                const thanhTien = parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0;
                const soLuong = parseInt(String(row.soLuong || "0"), 10) || 0;
                if (isNaN(thanhTien) || isNaN(soLuong)) return;

                const nganhHangName = utils.cleanCategoryName(row.nganhHang);
                const heSo = heSoQuyDoi[row.nhomHang] || 1;

                if (!report[nganhHangName]) {
                    report[nganhHangName] = {
                        nganhHang: nganhHangName,
                        soLuong: 0,
                        doanhThuThuc: 0,
                        doanhThuQuyDoi: 0
                    };
                }

                report[nganhHangName].soLuong += soLuong;
                report[nganhHangName].doanhThuThuc += thanhTien;
                report[nganhHangName].doanhThuQuyDoi += thanhTien * heSo;
            }
        });

        return Object.values(report);
    },

    generateRealtimeChuaXuatReport(sourceRealtimeYcxData) {
        if (!sourceRealtimeYcxData || sourceRealtimeYcxData.length === 0) return [];

        const hinhThucXuatTinhDoanhThu = dataProcessing.getHinhThucXuatTinhDoanhThu();
        const heSoQuyDoi = dataProcessing.getHeSoQuyDoi();
        const report = {};

        sourceRealtimeYcxData.forEach(row => {
            const isDoanhThuHTX = hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat);
            const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' &&
                                (row.trangThaiHuy || "").trim() === 'Chưa hủy' &&
                                (row.tinhTrangTra || "").trim() === 'Chưa trả' &&
                                (row.trangThaiXuat || "").trim() === 'Chưa xuất';

            if (isBaseValid && isDoanhThuHTX) {
                const thanhTien = parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0;
                const soLuong = parseInt(String(row.soLuong || "0"), 10) || 0;
                if (isNaN(thanhTien) || isNaN(soLuong)) return;

                const nganhHangName = utils.cleanCategoryName(row.nganhHang);
                const heSo = heSoQuyDoi[row.nhomHang] || 1;

                if (!report[nganhHangName]) {
                    report[nganhHangName] = {
                        nganhHang: nganhHangName,
                        soLuong: 0,
                        doanhThuThuc: 0,
                        doanhThuQuyDoi: 0
                    };
                }

                report[nganhHangName].soLuong += soLuong;
                report[nganhHangName].doanhThuThuc += thanhTien;
                report[nganhHangName].doanhThuQuyDoi += thanhTien * heSo;
            }
        });

        return Object.values(report);
    },

    calculateDepartmentAverages(departmentName, reportData) {
        const departmentEmployees = reportData.filter(e => e.boPhan === departmentName);
        if (departmentEmployees.length === 0) return {};

        const totals = departmentEmployees.reduce((acc, curr) => {
            Object.keys(curr).forEach(key => {
                if (typeof curr[key] === 'number') acc[key] = (acc[key] || 0) + curr[key];
                if (key === 'qdc' && typeof curr[key] === 'object') {
                    if (!acc.qdc) acc.qdc = {};
                    for (const qdcKey in curr.qdc) {
                        if (!acc.qdc[qdcKey]) acc.qdc[qdcKey] = { sl: 0, dt: 0, dtqd: 0 };
                        acc.qdc[qdcKey].sl += curr.qdc[qdcKey].sl;
                        acc.qdc[qdcKey].dt += curr.qdc[qdcKey].dt;
                        acc.qdc[qdcKey].dtqd += curr.qdc[qdcKey].dtqd;
                    }
                }
            });
            return acc;
        }, {});

        const averages = {};
        for (const key in totals) {
            if (key !== 'qdc') averages[key] = totals[key] / departmentEmployees.length;
            else {
                averages.qdc = {};
                for (const qdcKey in totals.qdc) averages.qdc[qdcKey] = {
                    sl: totals.qdc[qdcKey].sl / departmentEmployees.length,
                    dt: totals.qdc[qdcKey].dt / departmentEmployees.length,
                    dtqd: totals.qdc[qdcKey].dtqd / departmentEmployees.length
                };
            }
        }
        return averages;
    },

    generateRealtimeEmployeeDetailReport(employeeMaNV, realtimeYCXData) {
        if (!employeeMaNV || !realtimeYCXData || realtimeYCXData.length === 0) return null;

        const employeeData = realtimeYCXData.filter(row => {
            const msnvMatch = String(row.nguoiTao || '').match(/(\d+)/);
            return msnvMatch && msnvMatch[1].trim() === String(employeeMaNV);
        });

        if (employeeData.length === 0) return null;

        const hinhThucXuatTinhDoanhThu = dataProcessing.getHinhThucXuatTinhDoanhThu();
        const heSoQuyDoi = dataProcessing.getHeSoQuyDoi();

        const summary = {
            totalRealRevenue: 0,
            totalConvertedRevenue: 0,
            unexportedRevenue: 0
        };
        const byProductGroup = {};
        const byCustomer = {};

        employeeData.forEach(row => {
            const isDoanhThuHTX = hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat);
            const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' && (row.trangThaiHuy || "").trim() === 'Chưa hủy' && (row.tinhTrangTra || "").trim() === 'Chưa trả';

            if (isDoanhThuHTX && isBaseValid) {
                const realRevenue = parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0;
                const quantity = parseInt(String(row.soLuong || "0"), 10) || 0;
                const heSo = heSoQuyDoi[row.nhomHang] || 1;
                const convertedRevenue = realRevenue * heSo;
                const groupName = utils.cleanCategoryName(row.nhomHang || 'Khác');
                const customerName = row.tenKhachHang || 'Khách lẻ';

                if ((row.trangThaiXuat || "").trim() === 'Đã xuất') {
                    summary.totalRealRevenue += realRevenue;
                    summary.totalConvertedRevenue += convertedRevenue;

                    if (!byProductGroup[groupName]) {
                        byProductGroup[groupName] = { name: groupName, quantity: 0, realRevenue: 0, convertedRevenue: 0 };
                    }
                    byProductGroup[groupName].quantity += quantity;
                    byProductGroup[groupName].realRevenue += realRevenue;
                    byProductGroup[groupName].convertedRevenue += convertedRevenue;

                    if (!byCustomer[customerName]) {
                        byCustomer[customerName] = { name: customerName, products: [], totalQuantity: 0 };
                    }
                    byCustomer[customerName].products.push({
                        productName: row.tenSanPham,
                        quantity: quantity,
                        realRevenue: realRevenue,
                        convertedRevenue: convertedRevenue,
                    });
                    byCustomer[customerName].totalQuantity += quantity;
                } else if ((row.trangThaiXuat || "").trim() === 'Chưa xuất') {
                    summary.unexportedRevenue += convertedRevenue;
                }
            }
        });

        summary.totalOrders = Object.keys(byCustomer).length;
        summary.bundledOrderCount = Object.values(byCustomer).filter(c => c.totalQuantity > 1).length;
        summary.conversionRate = summary.totalRealRevenue > 0 ? (summary.totalConvertedRevenue / summary.totalRealRevenue) - 1 : 0;

        return {
            summary,
            byProductGroup: Object.values(byProductGroup).sort((a, b) => b.realRevenue - a.realRevenue),
            byCustomer: Object.values(byCustomer)
        };
    },

    // === START: REFACTORED FUNCTION FOR LUY KE EMPLOYEE DETAIL (v38.0) ===
    generateLuyKeEmployeeDetailReport(employeeMaNV, luykeYCXData) {
        if (!employeeMaNV || !luykeYCXData || luykeYCXData.length === 0) {
            return null;
        }

        const employeeData = luykeYCXData.filter(row => {
            const msnvMatch = String(row.nguoiTao || '').match(/(\d+)/);
            return msnvMatch && msnvMatch[1].trim() === String(employeeMaNV);
        });

        if (employeeData.length === 0) {
            return null;
        }

        const hinhThucXuatTinhDoanhThu = dataProcessing.getHinhThucXuatTinhDoanhThu();
        const heSoQuyDoi = dataProcessing.getHeSoQuyDoi();

        const summary = {
            totalRealRevenue: 0,
            totalConvertedRevenue: 0,
            unexportedRevenue: 0, // Calculated from master data
        };
        const byProductGroup = {};
        const byCustomer = {};
        const categoryChartDataMap = {};

        const employeeMasterData = appState.masterReportData.sknv.find(e => String(e.maNV) === String(employeeMaNV));
        if (employeeMasterData) {
            summary.unexportedRevenue = employeeMasterData.doanhThuChuaXuat || 0;
        }

        employeeData.forEach(row => {
            const isDoanhThuHTX = hinhThucXuatTinhDoanhThu.has(row.hinhThucXuat);
            const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' &&
                                (row.trangThaiHuy || "").trim() === 'Chưa hủy' &&
                                (row.tinhTrangTra || "").trim() === 'Chưa trả' &&
                                (row.trangThaiXuat || "").trim() === 'Đã xuất';

            if (isDoanhThuHTX && isBaseValid) {
                const realRevenue = parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0;
                const quantity = parseInt(String(row.soLuong || "0"), 10) || 0;
                if(isNaN(realRevenue) || isNaN(quantity)) return;

                const heSo = heSoQuyDoi[row.nhomHang] || 1;
                const convertedRevenue = realRevenue * heSo;
                const groupName = utils.cleanCategoryName(row.nhomHang || 'Khác');
                const customerName = row.tenKhachHang || 'Khách Lẻ';
                const categoryName = utils.cleanCategoryName(row.nganhHang || 'Khác');

                // For Summary KPIs
                summary.totalRealRevenue += realRevenue;
                summary.totalConvertedRevenue += convertedRevenue;

                // For Top 8 Product Groups
                if (!byProductGroup[groupName]) {
                    byProductGroup[groupName] = { name: groupName, quantity: 0, realRevenue: 0, convertedRevenue: 0 };
                }
                byProductGroup[groupName].quantity += quantity;
                byProductGroup[groupName].realRevenue += realRevenue;
                byProductGroup[groupName].convertedRevenue += convertedRevenue;

                // For Chart Data
                if (!categoryChartDataMap[categoryName]) {
                    categoryChartDataMap[categoryName] = { name: categoryName, revenue: 0 };
                }
                categoryChartDataMap[categoryName].revenue += realRevenue;

                // For Customer Accordion
                if (!byCustomer[customerName]) {
                    byCustomer[customerName] = { name: customerName, products: [], totalQuantity: 0, totalRealRevenue: 0, totalConvertedRevenue: 0 };
                }
                byCustomer[customerName].products.push({
                    productName: row.tenSanPham,
                    quantity: quantity,
                    realRevenue: realRevenue,
                    convertedRevenue: convertedRevenue,
                });
                byCustomer[customerName].totalQuantity += quantity;
                byCustomer[customerName].totalRealRevenue += realRevenue;
                byCustomer[customerName].totalConvertedRevenue += convertedRevenue;
            }
        });

        // Final calculations for summary
        summary.totalOrders = Object.keys(byCustomer).length;
        summary.bundledOrderCount = Object.values(byCustomer).filter(c => c.products.length > 1).length;
        summary.conversionRate = summary.totalRealRevenue > 0 ? (summary.totalConvertedRevenue / summary.totalRealRevenue) - 1 : 0;

        // Final calculations for customers and product groups
        for (const customerName in byCustomer) {
            const customer = byCustomer[customerName];
            customer.conversionRate = customer.totalRealRevenue > 0 ? (customer.totalConvertedRevenue / customer.totalRealRevenue) - 1 : 0;
        }
        for (const groupName in byProductGroup) {
            const group = byProductGroup[groupName];
            group.conversionRate = group.realRevenue > 0 ? (group.convertedRevenue / group.realRevenue) - 1 : 0;
        }

        return {
            summary,
            topProductGroups: Object.values(byProductGroup)
                .sort((a, b) => b.realRevenue - a.realRevenue)
                .slice(0, 8),
            categoryChartData: Object.values(categoryChartDataMap),
            byCustomer: Object.values(byCustomer)
                .sort((a,b) => b.totalRealRevenue - a.totalRealRevenue)
        };
    },
    // === END: REFACTORED FUNCTION ===

    generateRealtimeBrandReport(realtimeYCXData, selectedCategory, selectedBrand) {
        if (!realtimeYCXData || realtimeYCXData.length === 0) return { byBrand: [], byEmployee: [] };

        const filteredData = realtimeYCXData.filter(row => {
            const categoryMatch = !selectedCategory || utils.cleanCategoryName(row.nganhHang) === selectedCategory;
            const brandMatch = !selectedBrand || (row.nhaSanXuat || 'Hãng khác') === selectedBrand;
            const isDoanhThuHTX = dataProcessing.getHinhThucXuatTinhDoanhThu().has(row.hinhThucXuat);
            const isBaseValid = (row.trangThaiThuTien || "").trim() === 'Đã thu' && (row.trangThaiHuy || "").trim() === 'Chưa hủy' && (row.tinhTrangTra || "").trim() === 'Chưa trả' && (row.trangThaiXuat || "").trim() === 'Đã xuất';

            return categoryMatch && brandMatch && isDoanhThuHTX && isBaseValid;
        });

        const byBrand = {};
        const byEmployee = {};

        filteredData.forEach(row => {
            const brand = row.nhaSanXuat || 'Hãng khác';
            const msnvMatch = String(row.nguoiTao || '').match(/(\d+)/);
            const employeeId = msnvMatch ? msnvMatch[1].trim() : 'Unknown';
            const realRevenue = parseFloat(String(row.thanhTien || "0").replace(/,/g, '')) || 0;
            const quantity = parseInt(String(row.soLuong || "0"), 10) || 0;

            if (!byBrand[brand]) {
                byBrand[brand] = { name: brand, quantity: 0, revenue: 0 };
            }
            byBrand[brand].quantity += quantity;
            byBrand[brand].revenue += realRevenue;

            if (!byEmployee[employeeId]) {
                const employeeInfo = appState.employeeMaNVMap.get(employeeId);
                byEmployee[employeeId] = { id: employeeId, name: employeeInfo ? employeeInfo.hoTen : `NV ${employeeId}`, quantity: 0, revenue: 0 };
            }
            byEmployee[employeeId].quantity += quantity;
            byEmployee[employeeId].revenue += realRevenue;
        });

        const brandArray = Object.values(byBrand).map(b => ({...b, avgPrice: b.quantity > 0 ? b.revenue / b.quantity : 0})).sort((a,b) => b.revenue - a.revenue);
        const employeeArray = Object.values(byEmployee).sort((a,b) => b.revenue - a.revenue);

        return { byBrand: brandArray, byEmployee: employeeArray };
    },
};

const composerServices = {
    getEmployeeRanking(reportData, key, direction = 'desc', count = 3, department = 'ALL') {
        if (!reportData || reportData.length === 0) return [];

        let filteredData = reportData;
        if (department !== 'ALL') {
            filteredData = reportData.filter(e => e.boPhan === department);
        }

        return [...filteredData]
            .filter(e => e[key] > 0)
            .sort((a, b) => direction === 'desc' ? (b[key] || 0) - (a[key] || 0) : (a[key] || 0) - (b[key] || 0))
            .slice(0, count);
    },

    getEmployeesBelowTarget(reportData, dataKey, goalKey, department = 'ALL') {
        if (!reportData || reportData.length === 0) return [];

        let filteredData = reportData;
        if (department !== 'ALL') {
            filteredData = reportData.filter(e => e.boPhan === department);
        }

        return filteredData.filter(employee => {
            const value = employee[dataKey] || 0;
            const target = (employee.mucTieu?.[goalKey] || 0) / 100;
            return target > 0 && value < target;
        }).sort((a, b) => (b[dataKey] || 0) - (a[dataKey] || 0));
    },

    formatEmployeeList(employeeArray, valueKey, valueType = 'number') {
        if (!Array.isArray(employeeArray) || employeeArray.length === 0) {
            return " (không có)";
        }
        return "\n" + employeeArray.map((e, index) => {
            const value = e[valueKey];
            let formattedValue = '';
            if (valueType === 'percent') {
                formattedValue = ui.formatPercentage(value);
            } else if (valueType === 'currency') {
                formattedValue = ui.formatRevenue(value) + " tr";
            } else {
                 formattedValue = ui.formatNumberOrDash(value);
            }
            return `${index + 1}. ${ui.getShortEmployeeName(e.hoTen, e.maNV)}: ${formattedValue} @${e.maNV}`;
        }).join("\n");
    },

    processComposerTemplate(template, supermarketReport, goals, rankingReportData, competitionData, sectionId) {
        if (!template || !supermarketReport || !goals) {
            return "Lỗi: Dữ liệu không đủ để tạo nhận xét.";
        }

        const tagMapping = {
            'DTQD': { key: 'doanhThuQuyDoi', format: 'currency' },
            'THUNHAP': { key: 'tongThuNhap', format: 'currency' },
            'TLQD': { key: 'hieuQuaQuyDoi', format: 'percent' },
        };

        const botTargetMapping = {
            'TLQD': { dataKey: 'hieuQuaQuyDoi', goalKey: 'phanTramQD', format: 'percent' },
            'TLTC': { dataKey: 'tyLeTraCham', goalKey: 'phanTramTC', format: 'percent' },
            'PK': { dataKey: 'pctPhuKien', goalKey: 'phanTramPhuKien', format: 'percent' },
            'GD': { dataKey: 'pctGiaDung', goalKey: 'phanTramGiaDung', format: 'percent' },
            'MLN': { dataKey: 'pctMLN', goalKey: 'phanTramMLN', format: 'percent' },
            'SIM': { dataKey: 'pctSim', goalKey: 'phanTramSim', format: 'percent' },
            'VAS': { dataKey: 'pctVAS', goalKey: 'phanTramVAS', format: 'percent' },
            'BH': { dataKey: 'pctBaoHiem', goalKey: 'phanTramBaoHiem', format: 'percent' },
        };

        return template.replace(/\[(.*?)\]/g, (match, tag) => {
            const now = new Date();
            const currentDay = now.getDate() || 1;

            let dtThuc = supermarketReport.doanhThu || 0;
            let dtQd = supermarketReport.doanhThuQuyDoi || 0;
            let phanTramHTQD = goals.doanhThuQD > 0 ? (dtQd / 1000000) / goals.doanhThuQD : 0;

            if (sectionId === 'luyke') {
                const pastedLuyKeData = dataProcessing.parseLuyKePastedData(document.getElementById('paste-luyke')?.value || '');
                if (pastedLuyKeData.mainKpis['Thực hiện DT thực']) {
                    dtThuc = parseFloat(pastedLuyKeData.mainKpis['Thực hiện DT thực'].replace(/,/g, '')) * 1000000;
                }
                if (pastedLuyKeData.mainKpis['Thực hiện DTQĐ']) {
                    dtQd = parseFloat(pastedLuyKeData.mainKpis['Thực hiện DTQĐ'].replace(/,/g, '')) * 1000000;
                }
                if (pastedLuyKeData.mainKpis['% HT Target Dự Kiến (QĐ)']) {
                    phanTramHTQD = (parseFloat(pastedLuyKeData.mainKpis['% HT Target Dự Kiến (QĐ)'].replace('%', '')) || 0) / 100;
                }
            }

            if (tag === 'NGAY') return now.toLocaleDateString('vi-VN');
            if (tag === 'GIO') return now.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });

            if (tag === 'DT_THUC') return ui.formatNumber(dtThuc / 1000000, 0) + " tr";
            if (tag === 'DTQD') return ui.formatNumber(dtQd / 1000000, 0) + " tr";
            if (tag === '%HT_DTQD') return ui.formatPercentage(phanTramHTQD);

            if (tag === 'TLQD') {
                if (sectionId === 'luyke') {
                    const pastedLuyKeData = dataProcessing.parseLuyKePastedData(document.getElementById('paste-luyke')?.value || '');
                    if (pastedLuyKeData.mainKpis['Thực hiện DT thực'] && pastedLuyKeData.mainKpis['Thực hiện DTQĐ']) {
                        const dtThucPasted = parseFloat(String(pastedLuyKeData.mainKpis['Thực hiện DT thực']).replace(/,/g, ''));
                        const dtQdPasted = parseFloat(String(pastedLuyKeData.mainKpis['Thực hiện DTQĐ']).replace(/,/g, ''));
                        if (dtThucPasted > 0) {
                            return ui.formatPercentage((dtQdPasted / dtThucPasted) - 1);
                        }
                    }
                }
                return ui.formatPercentage(supermarketReport.hieuQuaQuyDoi || 0);
            }

            if (tag === '%HT_DTT') {
                const target = parseFloat(goals.doanhThuThuc) || 0;
                const percent = target > 0 ? (dtThuc / 1000000) / target : 0;
                return ui.formatPercentage(percent);
            }
            if (tag === 'DT_CHUAXUAT') return ui.formatRevenue(supermarketReport.doanhThuQuyDoiChuaXuat || 0) + " tr";
            if (tag === 'SS_CUNGKY') return supermarketReport.comparisonData?.percentage || 'N/A';

            if (tag.startsWith('TD_')) {
                const total = competitionData?.length || 0;
                const dat = (competitionData || []).filter(d => parseFloat(String(d.hoanThanh).replace('%','')) >= 100).length;
                if (tag === 'TD_TONG_CT') return total;
                if (tag === 'TD_CT_DAT') return dat;
                if (tag === 'TD_CT_CHUADAT') return total - dat;
                if (tag === 'TD_TYLE_DAT') return total > 0 ? ui.formatPercentage(dat / total) : '0%';
            }

            if (tag === 'TOP_QDC_INFO') {
                if (!supermarketReport.qdc) return " (không có)";
                const qdcArray = Object.values(supermarketReport.qdc).filter(item => item.sl > 0);
                const sortedQDC = qdcArray.sort((a,b) => b.dtqd - a.dtqd);
                return "\n" + sortedQDC.map(item => `  • ${item.name}: SL ${ui.formatNumber(item.sl)}, TB ${ui.formatNumber(item.sl / currentDay, 1)}/ngày`).join("\n");
            }
            if (tag === 'TOP_NGANHHANG_SL') {
                if (!supermarketReport.nganhHangChiTiet) return " (không có)";
                const nganhHangArray = Object.values(supermarketReport.nganhHangChiTiet).filter(item => item.quantity > 0);
                const topNganhHang = nganhHangArray.sort((a,b) => b.quantity - a.quantity).slice(0, 10);
                return "\n" + topNganhHang.map(item => `  • ${utils.cleanCategoryName(item.name)}: ${ui.formatNumber(item.quantity)}`).join("\n");
            }

            const rankingRegex = /^(TOP|BOT)(\d)_(\w+)_([\s\S]+)$/;
            const rankingMatch = tag.match(rankingRegex);
            if (rankingMatch && rankingReportData) {
                const [_, type, count, metric, department] = rankingMatch;
                const cleanDepartment = department.replace(/@msnv$/, '').trim();
                const direction = type === 'TOP' ? 'desc' : 'asc';
                const metricInfo = tagMapping[metric];
                if (metricInfo) {
                    let dataForRanking = rankingReportData;
                    if (metric === 'THUNHAP' && appState.masterReportData.sknv.length > 0) {
                        dataForRanking = appState.masterReportData.sknv;
                    }
                    const ranking = composerServices.getEmployeeRanking(dataForRanking, metricInfo.key, direction, parseInt(count), cleanDepartment);
                    return composerServices.formatEmployeeList(ranking, metricInfo.key, metricInfo.format);
                }
            }

            const botTargetRegex = /^BOT_TARGET_(\w+)_([\s\S]+)$/;
            const botTargetMatch = tag.match(botTargetRegex);
            if(botTargetMatch && rankingReportData) {
                let [_, metric, department] = botTargetMatch;
                department = department.replace(/@msnv$/, '').trim();
                const metricInfo = botTargetMapping[metric];
                if (metricInfo) {
                    const employeeList = composerServices.getEmployeesBelowTarget(rankingReportData, metricInfo.dataKey, metricInfo.goalKey, department);
                    return composerServices.formatEmployeeList(employeeList, metricInfo.dataKey, metricInfo.format);
                }
            }

            const qdcInfoRegex = /^QDC_INFO_(.+)$/;
            const qdcMatch = tag.match(qdcInfoRegex);
            if(qdcMatch && supermarketReport.qdc){
                const itemName = qdcMatch[1];
                const itemData = Object.values(supermarketReport.qdc).find(i => i.name === itemName);
                return itemData ? `SL ${ui.formatNumber(itemData.sl)}, TB ${ui.formatNumber(itemData.sl / currentDay, 1)}/ngày` : '(N/A)';
            }

            const nhInfoRegex = /^NH_INFO_(.+)$/;
            const nhMatch = tag.match(nhInfoRegex);
            if(nhMatch && supermarketReport.nganhHangChiTiet){
                const itemName = nhMatch[1];
                 const itemData = Object.values(supermarketReport.nganhHangChiTiet).find(i => utils.cleanCategoryName(i.name) === itemName);
                return itemData ? `SL ${ui.formatNumber(itemData.quantity)}, TB ${ui.formatNumber(itemData.quantity / currentDay, 1)}/ngày` : '(N/A)';
            }

            return match;
        });
    },

    aggregateReport(reportData, selectedWarehouse = null) {
        if (!reportData || reportData.length === 0) {
            const emptyShell = { doanhThu: 0, doanhThuQuyDoi: 0, dtCE: 0, dtICT: 0, qdc: {}, nganhHangChiTiet: {}, comparisonData: { value: 0, percentage: 'N/A' } };
            const numericKeys = ['doanhThuTraGop', 'doanhThuChuaXuat','doanhThuQuyDoiChuaXuat', 'dtGiaDung', 'dtMLN', 'dtPhuKien', 'slSmartphone', 'slSimOnline', 'slUDDD', 'slBaoHiemDenominator', 'slBaoHiemVAS'];
            numericKeys.forEach(key => emptyShell[key] = 0);
            return emptyShell;
        }

        const supermarketReport = reportData.reduce((acc, curr) => {
            for (const key in curr) {
                if (typeof curr[key] === 'number') {
                    acc[key] = (acc[key] || 0) + curr[key];
                } else if (key === 'qdc' && typeof curr.qdc === 'object') {
                    if (!acc.qdc) acc.qdc = {};
                    for (const qdcKey in curr.qdc) {
                        if (!acc.qdc[qdcKey]) acc.qdc[qdcKey] = { sl: 0, dt: 0, dtqd: 0, name: curr.qdc[qdcKey].name };
                        acc.qdc[qdcKey].sl += curr.qdc[qdcKey].sl;
                        acc.qdc[qdcKey].dt += curr.qdc[qdcKey].dt;
                        acc.qdc[qdcKey].dtqd += curr.qdc[qdcKey].dtqd;
                    }
                }
            }
            acc.maKho = selectedWarehouse || '';
            return acc;
        }, {});

        const aggregatedNganhHang = {};
        reportData.forEach(employee => {
            if (employee.doanhThuTheoNganhHang) {
                Object.entries(employee.doanhThuTheoNganhHang).forEach(([name, values]) => {
                    if (!aggregatedNganhHang[name]) aggregatedNganhHang[name] = { name: name, quantity: 0, revenue: 0, revenueQuyDoi: 0, donGia: 0 };
                    aggregatedNganhHang[name].quantity += values.quantity;
                    aggregatedNganhHang[name].revenue += values.revenue;
                    aggregatedNganhHang[name].revenueQuyDoi += values.revenueQuyDoi;
                });
            }
        });
        for (const name in aggregatedNganhHang) {
            const item = aggregatedNganhHang[name];
            item.donGia = item.quantity > 0 ? item.revenue / item.quantity : 0;
        }
        supermarketReport.nganhHangChiTiet = aggregatedNganhHang;

        supermarketReport.hieuQuaQuyDoi = supermarketReport.doanhThu > 0 ? (supermarketReport.doanhThuQuyDoi / supermarketReport.doanhThu) - 1 : 0;
        supermarketReport.tyLeTraCham = supermarketReport.doanhThu > 0 ? supermarketReport.doanhThuTraGop / supermarketReport.doanhThu : 0;
        supermarketReport.pctGiaDung = supermarketReport.dtCE > 0 ? supermarketReport.dtGiaDung / supermarketReport.dtCE : 0;
        supermarketReport.pctMLN = supermarketReport.dtCE > 0 ? supermarketReport.dtMLN / supermarketReport.dtCE : 0;
        supermarketReport.pctPhuKien = supermarketReport.dtICT > 0 ? supermarketReport.dtPhuKien / supermarketReport.dtICT : 0;
        supermarketReport.pctSim = supermarketReport.slSmartphone > 0 ? supermarketReport.slSimOnline / supermarketReport.slSmartphone : 0;
        supermarketReport.pctVAS = supermarketReport.slSmartphone > 0 ? supermarketReport.slUDDD / supermarketReport.slSmartphone : 0;
        supermarketReport.pctBaoHiem = supermarketReport.slBaoHiemDenominator > 0 ? supermarketReport.slBaoHiemVAS / supermarketReport.slBaoHiemDenominator : 0;

        const pastedLuyKeData = dataProcessing.parseLuyKePastedData(document.getElementById('paste-luyke')?.value || '');
        supermarketReport.comparisonData = pastedLuyKeData.comparisonData;

        if (supermarketReport.qdc) {
            for (const key in supermarketReport.qdc) {
                const group = supermarketReport.qdc[key];
                group.donGia = group.sl > 0 ? group.dt / group.sl : 0;
            }
        }

        return supermarketReport;
    },

    getSupermarketReportFromPastedData(pastedData) {
        const cleanValue = (str) => (typeof str === 'string' ? parseFloat(str.replace(/,|%/g, '')) : (typeof str === 'number' ? str : 0));
        return {
            doanhThu: cleanValue(pastedData.mainKpis['Thực hiện DT thực']) * 1000000,
            doanhThuQuyDoi: cleanValue(pastedData.mainKpis['Thực hiện DTQĐ']) * 1000000,
            pastedHTQD: pastedData.mainKpis['% HT Target Dự Kiến (QĐ)'] || 'N/A',
            comparisonData: pastedData.comparisonData,
        };
    },

    updateEmployeeMaps() {
        appState.employeeMaNVMap.clear();
        appState.employeeNameToMaNVMap.clear();
        appState.danhSachNhanVien.forEach(nv => {
            if (nv.maNV) appState.employeeMaNVMap.set(String(nv.maNV).trim(), nv);
            if (nv.hoTen) appState.employeeNameToMaNVMap.set(nv.hoTen.toLowerCase().replace(/\s+/g, ' '), String(nv.maNV).trim());
        });
    },

    generateThiDuaVungReport(selectedSupermarket) {
        if (!selectedSupermarket || !appState.thiDuaVungChiTiet || appState.thiDuaVungChiTiet.length === 0 || !appState.thiDuaVungTong || appState.thiDuaVungTong.length === 0) {
            return null;
        }

        const findKey = (data, keyword) => {
            if (!data || data.length === 0) return null;
            return Object.keys(data[0]).find(k => k.trim().toLowerCase().includes(keyword.toLowerCase())) || keyword;
        };
        const supermarketKeyTong = findKey(appState.thiDuaVungTong, 'siêu thị');
        const supermarketKeyChiTiet = findKey(appState.thiDuaVungChiTiet, 'siêu thị');
        const tongThuongKey = findKey(appState.thiDuaVungChiTiet, 'tổng thưởng');
        const hangVuotTroiKey = findKey(appState.thiDuaVungChiTiet, 'hạng vượt trội');
        const hangTargetKey = findKey(appState.thiDuaVungChiTiet, 'hạng % target');
        const layTopKey = findKey(appState.thiDuaVungChiTiet, 'lấy top');
        const kenhKey = findKey(appState.thiDuaVungChiTiet, 'kênh');
        const nganhHangKey = findKey(appState.thiDuaVungChiTiet, 'ngành hàng');

        if (!supermarketKeyTong || !supermarketKeyChiTiet) {
            console.error("Không thể tìm thấy cột 'siêu thị' trong dữ liệu.");
            return null;
        }

        const summary = appState.thiDuaVungTong.find(row => row[supermarketKeyTong] === selectedSupermarket);
        if (!summary) return null;

        const chiTiet = appState.thiDuaVungChiTiet.filter(row => row[supermarketKeyChiTiet] === selectedSupermarket);

        if (chiTiet.length > 0 && layTopKey) {
            summary.hangCoGiaiKenh = chiTiet[0][layTopKey];
        } else {
            summary.hangCoGiaiKenh = 'N/A';
        }

        const report = { summary, coGiai: [], sapCoGiai: [], tiemNang: [], canCoGangNhieu: [] };

        const getPotentialPrize = (kenh, nganhHang) => {
            const winningSupermarkets = appState.thiDuaVungChiTiet.filter(sm =>
                sm[kenhKey] === kenh && sm[nganhHangKey] === nganhHang && sm[tongThuongKey] > 0
            );
            if (winningSupermarkets.length === 0) return 0;
            return Math.min(...winningSupermarkets.map(s => s[tongThuongKey]));
        };

        chiTiet.forEach(nganhHang => {
            if (nganhHang[tongThuongKey] > 0) {
                report.coGiai.push(nganhHang);
            } else {
                const hangVuotTroi = nganhHang[hangVuotTroiKey] || Infinity;
                const hangTarget = nganhHang[hangTargetKey] || Infinity;
                const hangCoGiai = nganhHang[layTopKey] || 0;

                const khoangCach = Math.min(
                    (hangVuotTroi > 0 && hangVuotTroi > hangCoGiai) ? hangVuotTroi - hangCoGiai : Infinity,
                    (hangTarget > 0 && hangTarget > hangCoGiai) ? hangTarget - hangCoGiai : Infinity
                );
                nganhHang.khoangCach = khoangCach;

                if (hangCoGiai > 0 && khoangCach <= 20) {
                    nganhHang.thuongTiemNang = getPotentialPrize(nganhHang[kenhKey], nganhHang[nganhHangKey]);
                    report.sapCoGiai.push(nganhHang);
                } else if (hangCoGiai > 0 && khoangCach > 20 && khoangCach <= 40) {
                    report.tiemNang.push(nganhHang);
                } else {
                    report.canCoGangNhieu.push(nganhHang);
                }
            }
        });

        report.coGiai.sort((a, b) => b[tongThuongKey] - a[tongThuongKey]);
        report.sapCoGiai.sort((a, b) => a.khoangCach - b.khoangCach);
        report.tiemNang.sort((a, b) => a.khoangCach - b.khoangCach);

        return report;
    }
};

const services = {
    ...dataProcessing,
    ...reportGeneration,
    ...composerServices
};

export { services };
--- END FILE: ./services.js ---

--- START FILE: ./state.js ---
// Version 3.0 - Add competitionNameMappings and pastedThiDuaReportData
// Version 2.8 - Merged features: Add warehouse state, user stats sort, and listener
// MODULE 2: TỦ TRẠNG THÁI (APPSTATE)
// File này chứa đối tượng trạng thái chung của ứng dụng, hoạt động như một "bộ nhớ".

const appState = {
    // --- Collaboration & Dynamic Content ---
    db: null,
    isAdmin: false,
    feedbackList: [],
    helpContent: {
        data: 'Đang tải hướng dẫn...',
        luyke: 'Đang tải hướng dẫn...',
        sknv: 'Đang tải hướng dẫn...',
        realtime: 'Đang tải hướng dẫn...'
    },
    composerTemplates: {
        luyke: '',
        sknv: '',
        realtime: ''
    },
    // *** NEW (v3.0) ***
    competitionNameMappings: {}, // Lưu trữ { "Tên Gốc": "Tên Rút Gọn" }
    // *** END NEW ***

    // --- Dữ liệu & Trạng thái ---
    selectedWarehouse: null, // <<< GIAI ĐOẠN 1
    unsubscribeDataListener: null, // <<< GIAI ĐOẠN 2
    danhSachNhanVien: [],
    categoryStructure: [],
    brandList: [], // Master list of all brands

    // === START: DỮ LIỆU KHAI BÁO TÍNH TOÁN (ĐỒNG BỘ TỪ CLOUD) ===
    declarations: {
        hinhThucXuat: '',
        hinhThucXuatGop: '',
        heSoQuyDoi: ''
    },
    // === END: DỮ LIỆU KHAI BÁO TÍNH TOÁN ===

    // Dữ liệu cập nhật hàng ngày
    ycxData: [],
    rawGioCongData: [],
    thuongNongData: [],
    thuongERPData: [],
    thiDuaNhanVienData: [], // Dữ liệu cũ (từ logic khai báo mục tiêu)
    thiDuaVungChiTiet: [],
    thiDuaVungTong: [],

    // *** NEW (v3.0) ***
    pastedThiDuaReportData: [], // Lưu kết quả xử lý từ ô dán "Thi đua nhân viên"
    // *** END NEW ***

    thiDuaReportData: [],

    // Dữ liệu cập nhật tháng trước
    ycxDataThangTruoc: [],
    thuongNongDataThangTruoc: [],
    thuongERPDataThangTruoc: [],

    masterReportData: {
        luyke: [],
        sknv: [],
        realtime: []
    },
    
    competitionConfigs: [],
    
    realtimeYCXData: [],
    luykeGoalSettings: {},
    realtimeGoalSettings: {},
    highlightSettings: {
        luyke: {},
        sknv: {},
        realtime: {}
    },
    debugInfo: {},
    employeeMaNVMap: new Map(),
    employeeNameToMaNVMap: new Map(),
    charts: {},
    choices: {
        luyke_employee: null, luyke_date_picker: null, luyke_highlight_nhanhang: null, luyke_highlight_nhomhang: null, luyke_highlight_employee: null,
        sknv_employee: null, sknv_date_picker: null, sknv_highlight_nhanhang: null, sknv_highlight_nhomhang: null, sknv_highlight_employee: null,
        realtime_employee: null, realtime_highlight_nhanhang: null, realtime_highlight_nhomhang: null, realtime_highlight_employee: null,
        thiDuaVung_sieuThi: null,
        competition_group: null,
        competition_brand: null,
    },
    sortState: {
        user_stats: { key: 'lastLogin', direction: 'desc' }, // <<< GIAI ĐOẠN 4
        luyke_chuaxuat: { key: 'doanhThuQuyDoi', direction: 'desc' },
        sknv_summary: { key: 'totalAbove', direction: 'desc' },
        doanhthu_lk: { key: 'doanhThu', direction: 'desc' },
        thunhap: { key: 'tongThuNhap', direction: 'desc' },
        hieu_qua: { key: 'dtICT', direction: 'desc' },
        sknv_ict: { key: 'dtICT', direction: 'desc' },
        sknv_phukien: { key: 'dtPhuKien', direction: 'desc' },
        sknv_giadung: { key: 'dtGiaDung', direction: 'desc' },
        sknv_ce: { key: 'dtCE', direction: 'desc' },
        sknv_baohiem: { key: 'dtBaoHiem', direction: 'desc' },
        sknv_nganhhang_chitiet: { key: 'revenue', direction: 'desc' },
        sknv_qdc: { key: 'dtqd', direction: 'desc' },
        sknv_thidua_summary: { key: 'completedCount', direction: 'desc'},
        sknv_thidua_category: { key: 'percentExpected', direction: 'desc'},
        sknv_thidua_employee: { key: 'percentExpected', direction: 'desc'},
        // *** NEW (v3.0) ***
        sknv_thidua_pasted: { key: 'hoTen', direction: 'asc' }, // Sắp xếp cho bảng thi đua dán vào
        // *** END NEW ***
        luyke_competition_doanhthu: { key: 'hoanThanh', direction: 'desc' },
        luyke_competition_soluong: { key: 'hoanThanh', direction: 'desc' },
        luyke_nganhhang: { key: 'revenue', direction: 'desc' },
        luyke_qdc: { key: 'dtqd', direction: 'desc' },
        realtime_nganhhang: { key: 'revenue', direction: 'desc' },
        realtime_dt_nhanvien: { key: 'doanhThu', direction: 'desc' },
        realtime_hieuqua_nhanvien: { key: 'dtICT', direction: 'desc' },
        realtime_ict: { key: 'dtICT', direction: 'desc' },
        realtime_phukien: { key: 'dtPhuKien', direction: 'desc' },
        realtime_giadung: { key: 'dtGiaDung', direction: 'desc' },
        realtime_ce: { key: 'dtCE', direction: 'desc' },
        realtime_baohiem: { key: 'dtBaoHiem', direction: 'desc' },
        realtime_qdc: { key: 'dtqd', direction: 'desc' },
        realtime_brand: { key: 'revenue', direction: 'desc' },
        realtime_brand_employee: { key: 'revenue', direction: 'desc' }
    }
};

// Xuất khẩu appState để các module khác có thể sử dụng
export { appState };
--- END FILE: ./state.js ---

--- START FILE: ./tab-luyke.js ---
// Version 3.3 - Add more detailed logging in render function
// MODULE: Chịu trách nhiệm cho Tab Sức khỏe Siêu thị (Lũy kế)

import { appState } from './state.js';
import { ui } from './ui.js';
import { services } from './services.js';
import { settingsService } from './modules/settings.service.js';
import { highlightService } from './modules/highlight.service.js';

const luykeTab = {
    render() {
        console.log("[tab-luyke.js render] === Starting render ==="); // Log mới (v3.3)
        console.log(`[tab-luyke.js render] appState lengths - DSNV: ${appState.danhSachNhanVien?.length}, YCX: ${appState.ycxData?.length}`); // (v3.2)

        if (appState.danhSachNhanVien.length === 0) {
            console.log("[tab-luyke.js render] DSNV trống, hiển thị placeholder."); // (v3.2)
            ui.togglePlaceholder('health-section', true);
            return;
        }
        ui.togglePlaceholder('health-section', false);
        console.log("[tab-luyke.js render] DSNV found, proceeding."); // Log mới (v3.3)

        try {
            services.parseCompetitionDataFromLuyKe(document.getElementById('paste-luyke')?.value || '');
            console.log("[tab-luyke.js render] Parsed competition data from paste."); // Log mới (v3.3)
        } catch(e) {
            console.error("[tab-luyke.js render] Error parsing competition data:", e); // Log mới (v3.3)
        }


        const activeSubTabBtn = document.querySelector('#luyke-subtabs-nav .sub-tab-btn.active');
        const activeSubTabId = activeSubTabBtn ? activeSubTabBtn.dataset.target : 'subtab-luyke-sieu-thi';
        console.log(`[tab-luyke.js render] Active subtab: ${activeSubTabId}`); // (v3.2)

        const selectedWarehouse = document.getElementById('luyke-filter-warehouse')?.value || '';
        const selectedDept = document.getElementById('luyke-filter-department')?.value || '';
        const selectedNames = appState.choices.luyke_employee ? appState.choices.luyke_employee.getValue(true) : [];
        const selectedDates = appState.choices.luyke_date_picker ? appState.choices.luyke_date_picker.selectedDates : [];
        console.log(`[tab-luyke.js render] Filters - Warehouse: '${selectedWarehouse}', Dept: '${selectedDept}', Names: ${selectedNames.length}, Dates: ${selectedDates.length}`); // Log mới (v3.3)

        let filteredYCXData = appState.ycxData;
        if (selectedDates && selectedDates.length > 0) {
            console.log("[tab-luyke.js render] Filtering YCX data by date..."); // Log mới (v3.3)
            const startOfDay = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();
            const selectedDateSet = new Set(selectedDates.map(d => startOfDay(d)));
            filteredYCXData = appState.ycxData.filter(row => row.ngayTao instanceof Date && !isNaN(row.ngayTao) && selectedDateSet.has(startOfDay(row.ngayTao)));
        }
        console.log(`[tab-luyke.js render] Filtered YCX data length: ${filteredYCXData?.length}`); // (v3.2)

        const goals = settingsService.getLuykeGoalSettings(selectedWarehouse).goals;
        console.log("[tab-luyke.js render] Loaded goals:", goals); // Log mới (v3.3)
        try {
            appState.masterReportData.luyke = services.generateMasterReportData(filteredYCXData, goals);
            console.log(`[tab-luyke.js render] Generated masterReportData.luyke length: ${appState.masterReportData.luyke?.length}`); // (v3.2)
        } catch (e) {
            console.error("[tab-luyke.js render] Error generating master report data:", e); // Log mới (v3.3)
             ui.showNotification("Lỗi khi tính toán báo cáo tổng hợp.", "error"); // Log mới (v3.3)
             appState.masterReportData.luyke = []; // Reset để tránh lỗi tiếp theo
        }


        let filteredReport = appState.masterReportData.luyke;
        if (selectedWarehouse) filteredReport = filteredReport.filter(nv => nv.maKho == selectedWarehouse);
        if (selectedDept) filteredReport = filteredReport.filter(nv => nv.boPhan === selectedDept);
        if (selectedNames && selectedNames.length > 0) filteredReport = filteredReport.filter(nv => selectedNames.includes(String(nv.maNV)));
        console.log(`[tab-luyke.js render] Final filtered report length for UI: ${filteredReport?.length}`); // (v3.2)

        // --- Logic render theo Subtab ---
        try { // Thêm try...catch cho phần render UI (v3.3)
            if (activeSubTabId === 'subtab-luyke-sieu-thi') {
                console.log("[tab-luyke.js render] Rendering subtab 'Siêu thị Lũy kế'."); // (v3.2)
                if(filteredReport.length === 0 && appState.ycxData.length > 0) {
                     console.warn("[tab-luyke.js render] Filtered report is empty, but YCX data exists. Check filters or master report generation."); // (v3.2)
                }
                const supermarketReport = services.aggregateReport(filteredReport, selectedWarehouse);
                console.log("[tab-luyke.js render] Aggregated supermarket report:", JSON.stringify(supermarketReport).substring(0, 300) + "..."); // (v3.2 - Sửa đổi v3.3)
                const numDays = selectedDates.length > 0 ? selectedDates.length : new Set(appState.ycxData.map(row => row.ngayTao instanceof Date ? new Date(row.ngayTao).toDateString() : null).filter(Boolean)).size || 1;
                console.log(`[tab-luyke.js render] numDays calculated: ${numDays}`); // Log mới (v3.3)

                console.log("[tab-luyke.js render] Calling ui.updateLuykeSupermarketTitle..."); // Log mới (v3.3)
                ui.updateLuykeSupermarketTitle(selectedWarehouse, new Date());
                console.log("[tab-luyke.js render] Calling ui.renderLuykeEfficiencyTable..."); // Log mới (v3.3)
                ui.renderLuykeEfficiencyTable(supermarketReport, goals);
                console.log("[tab-luyke.js render] Calling ui.renderLuykeCategoryDetailsTable..."); // Log mới (v3.3)
                ui.renderLuykeCategoryDetailsTable(supermarketReport, numDays);
                console.log("[tab-luyke.js render] Calling ui.renderLuykeQdcTable..."); // Log mới (v3.3)
                ui.renderLuykeQdcTable(supermarketReport, numDays);

                console.log("[tab-luyke.js render] Calling services.generateLuyKeChuaXuatReport..."); // Log mới (v3.3)
                const chuaXuatReport = services.generateLuyKeChuaXuatReport(filteredYCXData);
                console.log("[tab-luyke.js render] Calling ui.renderChuaXuatTable..."); // Log mới (v3.3)
                ui.renderChuaXuatTable(chuaXuatReport);

                console.log("[tab-luyke.js render] Calling services.parseLuyKePastedData..."); // Log mới (v3.3)
                const pastedData = services.parseLuyKePastedData(document.getElementById('paste-luyke')?.value || '');
                console.log("[tab-luyke.js render] Calling ui.displayHealthKpiTable..."); // Log mới (v3.3)
                ui.displayHealthKpiTable(pastedData, goals);

            } else if (activeSubTabId === 'subtab-luyke-thi-dua') {
                 console.log("[tab-luyke.js render] Rendering subtab 'Thi đua Lũy kế'."); // (v3.2)
                const switcherPlaceholder = document.getElementById('luyke-thidua-view-selector-placeholder'); // Should be removed or updated in ui.js if still used
                const contentContainer = document.getElementById('luyke-competition-content');

                if (contentContainer) {
                     contentContainer.innerHTML = '<div id="luyke-competition-infographic-container" class="mt-4"></div>';
                } else {
                     console.error("[tab-luyke.js render] Missing #luyke-competition-content container");
                }

                const activeViewBtn = document.querySelector('#luyke-thidua-view-selector .view-switcher__btn.active');
                const viewType = activeViewBtn ? activeViewBtn.dataset.view : 'summary';
                console.log(`[tab-luyke.js render] Calling ui.displayCompetitionResultsFromLuyKe with viewType: ${viewType}`); // Log mới (v3.3)
                ui.displayCompetitionResultsFromLuyKe(document.getElementById('paste-luyke')?.value || '', viewType);

            } else if (activeSubTabId === 'subtab-luyke-thidua-vung') {
                console.log("[tab-luyke.js render] Rendering subtab 'Thi đua Vùng'."); // (v3.2)
                const controlsCard = document.querySelector('#subtab-luyke-thidua-vung .content-card');
                if (controlsCard) {
                    controlsCard.classList.remove('hidden');
                     console.log("[tab-luyke.js render] Thi đua Vùng: Ensured controlsCard is visible."); // (v3.2)
                } else {
                     console.error("[tab-luyke.js render] Thi đua Vùng: Cannot find controlsCard."); // (v3.2)
                }

                const choicesInstance = appState.choices.thiDuaVung_sieuThi;
                const selectedSupermarket = choicesInstance ? choicesInstance.getValue(true) : null;
                const hasFileData = appState.thiDuaVungChiTiet && appState.thiDuaVungChiTiet.length > 0;
                console.log("[tab-luyke.js render] Thi đua Vùng: selectedSupermarket:", selectedSupermarket, "hasFileData:", hasFileData); // (v3.2)

                if (selectedSupermarket && hasFileData) {
                    const reportData = services.generateThiDuaVungReport(selectedSupermarket);
                     console.log("[tab-luyke.js render] Thi đua Vùng: Calling ui.renderThiDuaVungInfographic with data:", reportData); // (v3.2)
                    ui.renderThiDuaVungInfographic(reportData);
                } else {
                    const container = document.getElementById('thidua-vung-infographic-container');
                    if (container) {
                        container.innerHTML = `<div class="placeholder-message">Vui lòng tải file và chọn một siêu thị để xem báo cáo.</div>`;
                          console.log("[tab-luyke.js render] Thi đua Vùng: Rendered placeholder."); // (v3.2)
                    } else {
                         console.error("[tab-luyke.js render] Thi đua Vùng: Cannot find infographic container."); // (v3.2)
                    }
                }
            } else {
                 console.warn(`[tab-luyke.js render] Unknown activeSubTabId: ${activeSubTabId}`); // Log mới (v3.3)
            }
        } catch (uiError) {
             console.error(`[tab-luyke.js render] Error during UI rendering for subtab ${activeSubTabId}:`, uiError); // Log mới (v3.3)
             ui.showNotification("Đã xảy ra lỗi khi hiển thị dữ liệu tab.", "error"); // Log mới (v3.3)
             const errorContainer = document.getElementById(activeSubTabId);
             if (errorContainer) {
                 errorContainer.innerHTML = `<div class="placeholder-message notification-error">Lỗi hiển thị dữ liệu. Vui lòng kiểm tra Console (F12) để biết chi tiết hoặc thử tải lại trang.</div>`;
             }
        }


        console.log("[tab-luyke.js render] Calling highlightService..."); // Log mới (v3.3)
        highlightService.populateHighlightFilters('luyke', filteredYCXData, filteredReport);
        highlightService.applyHighlights('luyke');
        console.log("[tab-luyke.js render] === Render complete ==="); // (v3.2 - Sửa đổi v3.3)
    },
};

export { luykeTab };
--- END FILE: ./tab-luyke.js ---

--- START FILE: ./tab-sknv.js ---
// Version 3.8 - Add view-switcher logic for sknv-thidua tab
// Version 3.7 - Fix duplicate 'activeSubTabId' identifier declaration & Add logging
// MODULE: TAB SKNV
// Chịu trách nhiệm render và xử lý logic cho tab "Sức khỏe nhân viên"

import { appState } from './state.js';
import { services } from './services.js';
import { ui } from './ui.js';
import { settingsService } from './modules/settings.service.js';
import { highlightService } from './modules/highlight.service.js';
import { dragDroplisteners } from './event-listeners/listeners-dragdrop.js';
import { uiSknv } from './ui-sknv.js'; // Import uiSknv để gọi hàm render mới
import { uiCompetition } from './ui-competition.js'; // Import logic render "Theo Chương Trình"

export const sknvTab = {
    render() {
        console.log("[tab-sknv.js render] === Starting render ==="); 
        console.log(`[tab-sknv.js render] Current appState lengths - DSNV: ${appState.danhSachNhanVien?.length}, YCX: ${appState.ycxData?.length}`); 

        if (!appState.danhSachNhanVien || appState.danhSachNhanVien.length === 0) { 
            console.warn("[tab-sknv.js render] DSNV is empty, showing placeholder."); 
            ui.togglePlaceholder('health-employee-section', true); 
            return; 
        }

        ui.togglePlaceholder('health-employee-section', false); 
        console.log("[tab-sknv.js render] DSNV found, proceeding."); 

        try {
            services.parseCompetitionDataFromLuyKe(document.getElementById('paste-luyke')?.value || '');
            console.log("[tab-sknv.js render] Parsed competition data from paste."); 
        } catch(e) {
             console.error("[tab-sknv.js render] Error parsing competition data:", e); 
        }

        const activeSubTabBtn = document.querySelector('#employee-subtabs-nav .sub-tab-btn.active'); 
        const activeSubTabId = activeSubTabBtn ? activeSubTabBtn.dataset.target : 'subtab-sknv';
        console.log(`[tab-sknv.js render] Active subtab ID: ${activeSubTabId}`); 

        const selectedWarehouse = document.getElementById('sknv-filter-warehouse')?.value || ''; 
        const selectedDept = document.getElementById('sknv-filter-department')?.value || ''; 
        const selectedNames = appState.choices.sknv_employee ? appState.choices.sknv_employee.getValue(true) : []; 
        const selectedDates = appState.choices.sknv_date_picker ? appState.choices.sknv_date_picker.selectedDates : []; 
        console.log(`[tab-sknv.js render] Filters - Warehouse: '${selectedWarehouse}', Dept: '${selectedDept}', Names: ${selectedNames.length}, Dates: ${selectedDates.length}`); 

        let filteredYCXData = appState.ycxData; 
        if (selectedDates && selectedDates.length > 0) { 
            console.log("[tab-sknv.js render] Filtering YCX data by date..."); 
            const startOfDay = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime(); 
            const selectedDateSet = new Set(selectedDates.map(d => startOfDay(d))); 
            filteredYCXData = appState.ycxData.filter(row => row.ngayTao instanceof Date && !isNaN(row.ngayTao) && selectedDateSet.has(startOfDay(row.ngayTao))); 
        }
        console.log(`[tab-sknv.js render] Filtered YCX data length: ${filteredYCXData?.length}`); 

        const goals = settingsService.getLuykeGoalSettings(selectedWarehouse).goals; 
        console.log("[tab-sknv.js render] Loaded goals:", goals); 
        try {
            appState.masterReportData.sknv = services.generateMasterReportData(filteredYCXData, goals, false); 
            console.log(`[tab-sknv.js render] Generated masterReportData.sknv length: ${appState.masterReportData.sknv?.length}`); 
        } catch(e) {
             console.error("[tab-sknv.js render] Error generating master report data:", e); 
             ui.showNotification("Lỗi khi tính toán báo cáo SKNV.", "error");
             appState.masterReportData.sknv = []; 
        }


        let filteredReport = appState.masterReportData.sknv; 
        if (selectedWarehouse) filteredReport = filteredReport.filter(nv => nv.maKho == selectedWarehouse); 
        if (selectedDept) filteredReport = filteredReport.filter(nv => nv.boPhan === selectedDept); 
        if (selectedNames && selectedNames.length > 0) filteredReport = filteredReport.filter(nv => selectedNames.includes(String(nv.maNV))); 
        console.log(`[tab-sknv.js render] Final filtered report length for UI: ${filteredReport?.length}`); 

        console.log(`[tab-sknv.js render] Active subtab ID (re-check): ${activeSubTabId}`); 

        const detailInfo = appState.viewingDetailFor; 
        const isViewingDetail = detailInfo && (detailInfo.sourceTab === 'sknv' || detailInfo.sourceTab === 'dtnv-lk'); 
        console.log(`[tab-sknv.js render] Is viewing detail? ${isViewingDetail}. Detail Info:`, detailInfo); 

        try { 
            if (isViewingDetail) { 
                console.log(`[tab-sknv.js render] Rendering detail view for employee: ${detailInfo.employeeId}`); 
                const employeeData = appState.masterReportData.sknv.find(nv => String(nv.maNV) === String(detailInfo.employeeId)); 
                if (activeSubTabId === 'subtab-sknv' && detailInfo.sourceTab === 'sknv') { 
                     console.log("[tab-sknv.js render] Calling ui.displaySknvReport (detail mode)."); 
                     ui.displaySknvReport(filteredReport, true); 
                } else if (activeSubTabId === 'subtab-doanhthu-lk' && detailInfo.sourceTab === 'dtnv-lk') { 
                    console.log("[tab-sknv.js render] Calling services.generateLuyKeEmployeeDetailReport..."); 
                    const luykeDetailData = services.generateLuyKeEmployeeDetailReport(detailInfo.employeeId, filteredYCXData); 
                    console.log("[tab-sknv.js render] Calling ui.renderLuykeEmployeeDetail..."); 
                    ui.renderLuykeEmployeeDetail(luykeDetailData, employeeData, 'dtnv-lk-details-container'); 
                } else {
                    console.log(`[tab-sknv.js render] Viewing detail but not on the correct subtab (${activeSubTabId}), rendering summary instead.`); 
                    this.renderSummaryViews(activeSubTabId, filteredReport, filteredYCXData); 
                }
            } else {
                
                console.log("[tab-sknv.js render] Rendering summary views."); 
                this.renderSummaryViews(activeSubTabId, filteredReport, filteredYCXData); 
            }
        } catch (uiError) {
             console.error(`[tab-sknv.js render] Error during UI rendering for subtab ${activeSubTabId}:`, uiError); 
             ui.showNotification("Đã xảy ra lỗi khi hiển thị dữ liệu tab SKNV.", "error"); 
             const errorContainer = document.getElementById(activeSubTabId);
             if (errorContainer) {
                 errorContainer.innerHTML = `<div class="placeholder-message notification-error">Lỗi hiển thị dữ liệu. Vui lòng kiểm tra Console (F12) để biết chi tiết hoặc thử tải lại trang.</div>`;
             }
        }


         console.log("[tab-sknv.js render] Calling highlightService..."); 
         highlightService.populateHighlightFilters('sknv', filteredYCXData, filteredReport); 
        highlightService.applyHighlights('sknv'); 

        const efficiencyReportContainer = document.getElementById('efficiency-report-container'); 
        if (efficiencyReportContainer && !isViewingDetail) { 
            console.log("[tab-sknv.js render] Initializing drag-drop for efficiency table."); 
            dragDroplisteners.initializeForContainer('efficiency-report-container'); 
        }
        console.log("[tab-sknv.js render] === Render complete ==="); 
    },

    renderSummaryViews(activeSubTabId, filteredReport, filteredYCXData) {
        console.log(`[tab-sknv.js renderSummaryViews] Rendering summary for subtab: ${activeSubTabId}`); 
        
        // *** START: MODIFIED (v3.8) ***
        if (activeSubTabId === 'subtab-hieu-qua-thi-dua-lk') { 
            console.log("[tab-sknv.js renderSummaryViews] Rendering 'Thi đua NV LK' subtab.");
            
            const activeViewBtn = document.querySelector('#sknv-thidua-view-selector .view-switcher__btn.active');
            const viewType = activeViewBtn ? activeViewBtn.dataset.view : 'program';
            console.log(`[tab-sknv.js renderSummaryViews] View type selected: ${viewType}`);

            const programContainer = document.getElementById('competition-report-container-lk');
            const employeeContainer = document.getElementById('pasted-competition-report-container');

            if (!programContainer || !employeeContainer) {
                console.error("[tab-sknv.js renderSummaryViews] Missing competition containers!");
                return;
            }

            if (viewType === 'program') {
                console.log("[tab-sknv.js renderSummaryViews] Calculating 'program' report..."); 
                const competitionReportData = services.calculateCompetitionFocusReport( 
                    filteredYCXData, 
                    appState.competitionConfigs 
                );
                console.log("[tab-sknv.js renderSummaryViews] Calling uiCompetition.renderCompetitionUI..."); 
                uiCompetition.renderCompetitionUI('competition-report-container-lk', competitionReportData); 
                
                programContainer.classList.remove('hidden');
                employeeContainer.classList.add('hidden');

            } else { // viewType === 'employee'
                console.log("[tab-sknv.js renderSummaryViews] Calling uiSknv.renderPastedCompetitionReport..."); 
                
                // Lọc dữ liệu thi đua đã dán dựa trên bộ lọc chung (kho, bộ phận, tên)
                const visibleEmployeeMaNVs = new Set(filteredReport.map(nv => nv.maNV));
                const filteredPastedData = (appState.pastedThiDuaReportData || []).filter(item => 
                    visibleEmployeeMaNVs.has(item.maNV)
                );
                
                uiSknv.renderPastedCompetitionReport(filteredPastedData); 
                
                programContainer.classList.add('hidden');
                employeeContainer.classList.remove('hidden');
            }
        // *** END: MODIFIED (v3.8) ***
        
        } else if (activeSubTabId === 'subtab-sknv') { 
             console.log("[tab-sknv.js renderSummaryViews] Calling ui.displaySknvReport (summary mode)..."); 
            ui.displaySknvReport(filteredReport, false); 
        } else if (activeSubTabId === 'subtab-doanhthu-lk') { 
            console.log("[tab-sknv.js renderSummaryViews] Calling ui.displayEmployeeRevenueReport for luyke..."); 
            ui.displayEmployeeRevenueReport(filteredReport, 'revenue-report-container-lk', 'doanhthu_lk'); 
        } else if (activeSubTabId === 'subtab-thunhap') { 
            console.log("[tab-sknv.js renderSummaryViews] Calling ui.displayEmployeeIncomeReport..."); 
            ui.displayEmployeeIncomeReport(filteredReport); 
        } else if (activeSubTabId === 'subtab-hieu-qua-khai-thac-luy-ke') { 
            console.log("[tab-sknv.js renderSummaryViews] Calling ui.displayEmployeeEfficiencyReport..."); 
            ui.displayEmployeeEfficiencyReport(filteredReport, 'efficiency-report-container', 'hieu_qua'); 
        } else if (activeSubTabId === 'subtab-doanhthu-nganhhang') { 
            console.log("[tab-sknv.js renderSummaryViews] Calling ui.displayCategoryRevenueReport..."); 
            ui.displayCategoryRevenueReport(filteredReport, 'category-revenue-report-container', 'sknv'); 
        } else {
             console.warn(`[tab-sknv.js renderSummaryViews] No summary render defined for subtab: ${activeSubTabId}`); 
        }
    }
};
--- END FILE: ./tab-sknv.js ---

--- START FILE: ./ui-competition.js ---
// Version 2.9 - Simplify multi-brand competition table header
// MODULE: UI COMPETITION
// Chứa các hàm render giao diện cho báo cáo thi đua đa hãng, đa năng.

import { appState } from './state.js';
import { uiComponents } from './ui-components.js';
import { config } from './config.js';

const uiCompetition = {
    /**
     * Render toàn bộ giao diện báo cáo hiệu quả thi đua mới.
     * @param {string} containerId - ID của container để render báo cáo.
     * @param {Array} reportData - Dữ liệu đã được xử lý từ services.calculateCompetitionFocusReport.
     */
    renderCompetitionUI(containerId, reportData) {
        const container = document.getElementById(containerId);
        if (!container) return;

        if (!reportData || reportData.length === 0) {
            const isLk = containerId.includes('-lk');
            const configs = appState.competitionConfigs;
            const ycxData = isLk ? appState.ycxData : appState.realtimeYCXData;
            
            let errorMessage = '';
            if (configs.length === 0) {
                errorMessage = 'Chưa có chương trình thi đua nào được khai báo trong "Thiết lập mục tiêu".';
            } else if (ycxData.length === 0) {
                errorMessage = `Đã có ${configs.length} chương trình thi đua, nhưng bạn chưa tải file dữ liệu bán hàng (${isLk ? 'YCX Lũy kế' : 'Realtime'}) tương ứng để tính toán.`;
            } else {
                errorMessage = `Đã tìm thấy ${configs.length} chương trình thi đua, nhưng không có doanh thu/số lượng nào khớp với các nhóm hàng đã chọn trong file YCX. Vui lòng kiểm tra lại sự thống nhất về tên gọi giữa cấu hình thi đua và dữ liệu bán hàng.`;
            }
            container.innerHTML = `<div class="p-4 bg-yellow-50 text-yellow-800 border border-yellow-200 rounded-lg italic">${errorMessage}</div>`;
            return;
        }

        let finalHTML = '<div class="grid grid-cols-1 md:grid-cols-2 gap-6">';
        reportData.forEach((competitionResult, index) => {
            if (competitionResult.employeeData.length === 0) return;
            finalHTML += this._renderFocusCompetitionTable(competitionResult, index);
        });
        finalHTML += `</div>`;
        container.innerHTML = finalHTML;
    },

    /**
     * @private
     * Render bảng kết quả chi tiết cho một chương trình thi đua (phiên bản mới, hỗ trợ đa hãng).
     */
    _renderFocusCompetitionTable(competitionResult, index) {
        const { competition, employeeData } = competitionResult;
        const sortStateKey = `focus_competition_${competition.type}_${index}`;
        const sortState = appState.sortState[sortStateKey] || { key: 'tyLeDT', direction: 'desc' };
        const { key, direction } = sortState;

        const targetValue = parseFloat(competition.target) / 100 || 0;
        const brands = competition.brands || [];

        const sortedData = [...employeeData].sort((a, b) => {
            const valA = a[key] || 0;
            const valB = b[key] || 0;
            return direction === 'asc' ? valA - valB : valB - a[key];
        });

        // Tính toán tổng cộng, bao gồm cả chi tiết cho từng hãng
        const totals = employeeData.reduce((acc, item) => {
            acc.baseCategoryQuantity += item.baseCategoryQuantity;
            acc.baseCategoryRevenue += item.baseCategoryRevenue;
            acc.targetBrandsQuantity += item.targetBrandsQuantity;
            acc.targetBrandsRevenue += item.targetBrandsRevenue;

            for (const brandName of brands) {
                if (!acc.performanceByBrand[brandName]) {
                    acc.performanceByBrand[brandName] = { quantity: 0, revenue: 0 };
                }
                const brandPerf = item.performanceByBrand[brandName];
                if (brandPerf) {
                    acc.performanceByBrand[brandName].quantity += brandPerf.quantity;
                    acc.performanceByBrand[brandName].revenue += brandPerf.revenue;
                }
            }
            return acc;
        }, { 
            baseCategoryQuantity: 0, 
            baseCategoryRevenue: 0,
            targetBrandsQuantity: 0,
            targetBrandsRevenue: 0,
            performanceByBrand: {}
        });

        totals.tyLeSL = totals.baseCategoryQuantity > 0 ? (totals.targetBrandsQuantity / totals.baseCategoryQuantity) : 0;
        totals.tyLeDT = totals.baseCategoryRevenue > 0 ? (totals.targetBrandsRevenue / totals.baseCategoryRevenue) : 0;
        
        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;
        
        let tableHTML = `
            <div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden flex flex-col" data-capture-group="competition-${competition.id}">
                <div class="p-4 bg-gray-50 border-b-2 border-indigo-200">
                    <h3 class="text-lg font-bold text-indigo-800 uppercase">${competition.name}</h3>
                    <div class="mt-2 flex items-center gap-2">
                        <label for="target-input-${competition.id}" class="text-sm font-medium text-gray-700 flex-shrink-0">Mục tiêu khai thác (%):</label>
                        <input type="number" id="target-input-${competition.id}" 
                               class="competition-target-input w-24 p-1 border rounded-md text-sm" 
                               placeholder="VD: 50"
                               value="${competition.target || ''}"
                               data-competition-id="${competition.id}">
                    </div>
                </div>
                <div class="overflow-x-auto flex-grow">
                    <table class="min-w-full text-sm text-left text-gray-600 table-bordered table-striped" data-table-type="${sortStateKey}">
                        <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                            <tr>
                                <th rowspan="2" class="${headerClass('hoTen')}" data-sort="hoTen">Nhân viên <span class="sort-indicator"></span></th>
                                ${brands.map(brand => `<th colspan="2" class="px-4 py-2 text-center header-group-5">${brand}</th>`).join('')}
                                <th colspan="2" class="px-4 py-2 text-center header-group-10">Tổng Nhóm hàng</th>
                                <th colspan="2" class="px-4 py-2 text-center header-group-6">Tỷ lệ khai thác</th>
                            </tr>
                            <tr>
                                ${brands.map(() => `<th class="px-2 py-2 text-right">SL</th><th class="px-2 py-2 text-right">DT</th>`).join('')}
                                <th class="${headerClass('baseCategoryQuantity')} text-right" data-sort="baseCategoryQuantity">SL <span class="sort-indicator"></span></th>
                                <th class="${headerClass('baseCategoryRevenue')} text-right" data-sort="baseCategoryRevenue">DT <span class="sort-indicator"></span></th>
                                <th class="${headerClass('tyLeSL')} text-right header-highlight" data-sort="tyLeSL">% SL <span class="sort-indicator"></span></th>
                                <th class="${headerClass('tyLeDT')} text-right header-highlight" data-sort="tyLeDT">% DT <span class="sort-indicator"></span></th>
                            </tr>
                        </thead>
                        <tbody>`;

        sortedData.forEach(item => {
            const tyLeSLClass = targetValue > 0 && item.tyLeSL < targetValue ? 'cell-performance is-below' : '';
            const tyLeDTClass = targetValue > 0 && item.tyLeDT < targetValue ? 'cell-performance is-below' : '';

            tableHTML += `<tr class="hover:bg-gray-50">
                <td class="px-4 py-2 font-semibold line-clamp-2">${uiComponents.getShortEmployeeName(item.hoTen, item.maNV)}</td>
                ${brands.map(brandName => {
                    const brandPerf = item.performanceByBrand[brandName] || { quantity: 0, revenue: 0 };
                    return `<td class="px-2 py-2 text-right font-bold">${uiComponents.formatNumberOrDash(brandPerf.quantity)}</td>
                            <td class="px-2 py-2 text-right font-bold">${uiComponents.formatRevenue(brandPerf.revenue)}</td>`;
                }).join('')}
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumberOrDash(item.baseCategoryQuantity)}</td>
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.baseCategoryRevenue)}</td>
                <td class="px-4 py-2 text-right font-bold ${tyLeSLClass}">${uiComponents.formatPercentage(item.tyLeSL)}</td>
                <td class="px-4 py-2 text-right font-bold ${tyLeDTClass}">${uiComponents.formatPercentage(item.tyLeDT)}</td>
            </tr>`;
        });

        tableHTML += `
                        </tbody>
                        <tfoot class="table-footer font-bold">
                            <tr>
                                <td class="px-4 py-2">Tổng</td>
                                ${brands.map(brandName => {
                                    const brandTotals = totals.performanceByBrand[brandName] || { quantity: 0, revenue: 0 };
                                    return `<td class="px-2 py-2 text-right">${uiComponents.formatNumberOrDash(brandTotals.quantity)}</td>
                                            <td class="px-2 py-2 text-right">${uiComponents.formatRevenue(brandTotals.revenue)}</td>`;
                                }).join('')}
                                <td class="px-4 py-2 text-right">${uiComponents.formatNumberOrDash(totals.baseCategoryQuantity)}</td>
                                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.baseCategoryRevenue)}</td>
                                <td class="px-4 py-2 text-right">${uiComponents.formatPercentage(totals.tyLeSL)}</td>
                                <td class="px-4 py-2 text-right">${uiComponents.formatPercentage(totals.tyLeDT)}</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>`;
        return tableHTML;
    }
};

export { uiCompetition };
--- END FILE: ./ui-competition.js ---

--- START FILE: ./ui-components.js ---
// Version 3.25 - Add missing functions: populateAllFilters (fixes F5 crash) and updateBrandFilterOptions (fixes Realtime crash)
// Version 3.24 - Add updateBrandFilterOptions to fix realtime tab crash
// Version 3.23 - Add renderCompetitionNameMappingTable
// Version 3.22 - Fix syntax error in renderUserStatsTable causing comments to display
// Version 3.21 - Add 'actionsTaken' column to renderUserStatsTable
// Version 3.20 - Add renderUserStatsTable for admin panel
// ... (các phiên bản trước giữ nguyên)
// MODULE: UI COMPONENTS
// Chứa các hàm UI chung, tái sử dụng được trên toàn bộ ứng dụng.

import { appState } from './state.js';
import { services } from './services.js';
import { utils } from './utils.js';
import { settingsService } from './modules/settings.service.js';
import { ui } from './ui.js';

export const uiComponents = {
    // === START: NEW FUNCTION (FIX FOR VẤN ĐỀ 1) ===
    /**
     * Điền dữ liệu vào tất cả các bộ lọc (Kho, Bộ phận, Nhân viên) trên các tab.
     * Được gọi sau khi DSNV được tải.
     */
    populateAllFilters() {
        console.log("[ui-components.js populateAllFilters] Đang điền dữ liệu vào tất cả bộ lọc...");
        if (!appState.danhSachNhanVien || appState.danhSachNhanVien.length === 0) {
            console.warn("[ui-components.js populateAllFilters] DSNV trống, không thể điền bộ lọc.");
            return;
        }

        try {
            const uniqueWarehouses = [...new Set(appState.danhSachNhanVien.map(nv => nv.maKho).filter(Boolean))].sort();
            const uniqueDepartments = [...new Set(appState.danhSachNhanVien.map(nv => nv.boPhan).filter(Boolean))].sort();
            const allEmployees = [...appState.danhSachNhanVien].sort((a, b) => a.hoTen.localeCompare(b.hoTen));

            const warehouseOptions = [{ value: '', label: 'Tất cả Kho', selected: true }]
                .concat(uniqueWarehouses.map(item => ({ value: item, label: item })));
            
            const departmentOptions = [{ value: '', label: 'Tất cả Bộ phận', selected: true }]
                .concat(uniqueDepartments.map(item => ({ value: item, label: item })));

            const employeeOptions = allEmployees.map(item => ({
                value: String(item.maNV),
                label: `${item.hoTen} - ${item.maNV} (${item.boPhan})`
            }));

            ['luyke', 'sknv', 'realtime'].forEach(prefix => {
                const whChoices = appState.choices[`${prefix}_warehouse`];
                if (whChoices) {
                    const currentVal = whChoices.getValue(true);
                    whChoices.clearStore();
                    whChoices.setChoices(warehouseOptions, 'value', 'label', true);
                    if (currentVal) whChoices.setValue([currentVal]);
                }
                
                const deptChoices = appState.choices[`${prefix}_department`];
                if (deptChoices) {
                    const currentVal = deptChoices.getValue(true);
                    deptChoices.clearStore();
                    deptChoices.setChoices(departmentOptions, 'value', 'label', true);
                    if (currentVal) deptChoices.setValue([currentVal]);
                }

                const empChoices = appState.choices[`${prefix}_employee`];
                if (empChoices) {
                    const currentVal = empChoices.getValue(true);
                    empChoices.clearStore();
                    empChoices.setChoices(employeeOptions, 'value', 'label', true);
                    if (currentVal) empChoices.setValue(currentVal);
                }
            });

            console.log("[ui-components.js populateAllFilters] Đã điền xong bộ lọc.");
        } catch (error) {
            console.error("[ui-components.js populateAllFilters] Lỗi nghiêm trọng khi điền bộ lọc:", error);
        }
    },
    // === END: NEW FUNCTION ===

    // === START: NEW FUNCTION (FIX FOR VẤN ĐỀ 4) ===
    /**
     * Cập nhật danh sách 'Hãng' dựa trên 'Ngành hàng' đã chọn trong tab Realtime.
     * @param {string} selectedCategory - Ngành hàng đã chọn.
     */
    updateBrandFilterOptions(selectedCategory) {
        const brandFilterEl = document.getElementById('realtime-brand-filter');
        const brandChoices = appState.choices['realtime_brand_filter']; 
        
        if (!brandFilterEl || !brandChoices) {
            console.warn("[updateBrandFilterOptions] Lỗi: Brand filter hoặc Choices instance chưa sẵn sàng.");
            return;
        }

        let availableBrands = [];
        if (selectedCategory) {
            // Lọc các hãng dựa trên ngành hàng đã chọn trong dữ liệu realtime
            availableBrands = [...new Set(appState.realtimeYCXData
                .filter(row => utils.cleanCategoryName(row.nganhHang) === selectedCategory)
                .map(row => row.nhaSanXuat || 'Hãng khác')
                .filter(Boolean))
            ].sort();
        } else {
            // Nếu không chọn ngành hàng, hiển thị tất cả hãng có trong dữ liệu realtime
            availableBrands = [...new Set(appState.realtimeYCXData
                .map(row => row.nhaSanXuat || 'Hãng khác')
                .filter(Boolean))
            ].sort();
        }

        // Tạo danh sách options
        let brandOptions = [{ value: '', label: 'Tất cả các hãng', selected: true }];
        brandOptions = brandOptions.concat(availableBrands.map(brand => ({ value: brand, label: brand })));
        
        // Lấy giá trị hiện tại để cố gắng bảo toàn lựa chọn
        const currentValue = brandChoices.getValue(true);
        
        // Cập nhật Choices.js
        brandChoices.clearStore();
        brandChoices.setChoices(brandOptions, 'value', 'label', true);
        
        // Cố gắng đặt lại giá trị cũ nếu nó vẫn tồn tại trong danh sách mới
        if (currentValue && availableBrands.includes(currentValue)) {
            brandChoices.setValue([currentValue]);
        } else {
             brandChoices.setValue(['']); // Reset về "Tất cả"
        }
    },
    // === END: NEW FUNCTION ===

    renderSettingsButton(idSuffix) {
        return `<button id="settings-btn-${idSuffix}" class="settings-trigger-btn" title="Tùy chỉnh hiển thị">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
        </button>`;
    },

    renderCompetitionConfigUI() {
        // ... (Giữ nguyên)
        const container = document.getElementById(`competition-list-container`);
        if (!container) return;
        const configs = appState.competitionConfigs || [];

        if (configs.length === 0) {
            container.innerHTML = '<p class="text-xs text-center text-gray-500 italic">Chưa có chương trình nào được tạo.</p>';
            return;
        }

        container.innerHTML = configs.map((config, index) => {
             return `
                 <div class="p-3 border rounded-lg bg-white flex justify-between items-center shadow-sm">
                      <div>
                          <div class="flex items-center gap-x-2">
                             <p class="font-bold text-gray-800">${config.name}</p>
                          </div>
                          <div class="text-xs text-gray-500 mt-1 space-y-1">
                              <p><strong>Hãng:</strong> <span class="font-semibold text-blue-600">${(config.brands || []).join(', ')}</span></p>
                              <p><strong>Nhóm hàng:</strong> <span class="font-semibold">${(config.groups || []).length > 0 ? (config.groups || []).join(', ') : 'Tất cả'}</span></p>
                          </div>
                      </div>
                      <div class="flex items-center gap-x-2 flex-shrink-0">
                         <button class="edit-competition-btn p-2 rounded-md hover:bg-gray-200 text-gray-600" data-index="${index}" title="Sửa chương trình">
                             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                          </button>
                         <button class="delete-competition-btn p-2 rounded-md hover:bg-red-100 text-red-600" data-index="${index}" title="Xóa chương trình">
                             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>
                          </button>
                      </div>
                 </div>
             `;
        }).join('');
    },
    populateCompetitionFilters() {
        // ... (Giữ nguyên)
        const groupSelectInstance = appState.choices['competition_group'];
        if (!groupSelectInstance) return;
        const uniqueGroups = [...new Set(appState.categoryStructure.map(item => utils.cleanCategoryName(item.nhomHang)).filter(Boolean))].sort();
        const groupOptions = uniqueGroups.map(group => ({ value: group, label: group }));
        groupSelectInstance.clearStore();
        groupSelectInstance.setChoices(groupOptions, 'value', 'label', true);
    },
    populateCompetitionBrandFilter() {
        // ... (Giữ nguyên)
        const brandSelectInstance = appState.choices['competition_brand'];
        if (!brandSelectInstance) return;
        const brands = appState.brandList || [];
        const brandOptions = brands.map(brand => ({ value: brand, label: brand }));
        brandSelectInstance.clearStore();
        brandSelectInstance.setChoices(brandOptions, 'value', 'label', true);
    },
    populateComposerDetailTags(supermarketReport) {
        // ... (Giữ nguyên)
         const qdcContainer = document.getElementById('composer-qdc-tags-container');
         const nganhHangContainer = document.getElementById('composer-nganhhang-tags-container');
         if (!qdcContainer || !nganhHangContainer) return;

         qdcContainer.innerHTML = '<h5 class="composer__tag-group-title">Chọn Nhóm Hàng QĐC</h5>';
         nganhHangContainer.innerHTML = '<h5 class="composer__tag-group-title">Chọn Ngành Hàng Chi Tiết</h5>';

         const createTagButton = (tag, text) => {
             const button = document.createElement('button');
             button.className = 'composer__tag-btn';
             button.dataset.tag = tag;
             button.textContent = text;
             return button;
         };

         if (supermarketReport && supermarketReport.qdc) {
              const qdcItems = Object.values(supermarketReport.qdc)
                 .filter(item => item.sl > 0)
                 .sort((a,b) => b.dtqd - a.dtqd);
             qdcItems.forEach(item => {
                 const tag = `[QDC_INFO_${item.name}]`;
                 qdcContainer.appendChild(createTagButton(tag, item.name));
             });
         }
         if (supermarketReport && supermarketReport.nganhHangChiTiet) {
             const nganhHangItems = Object.values(supermarketReport.nganhHangChiTiet)
                 .filter(item => item.quantity > 0)
                 .sort((a, b) => b.revenue - a.revenue)
                 .slice(0, 15);
             nganhHangItems.forEach(item => {
                 const cleanName = utils.cleanCategoryName(item.name);
                 const tag = `[NH_INFO_${cleanName}]`;
                 nganhHangContainer.appendChild(createTagButton(tag, cleanName));
            });
         }
    },
    displayEmployeeRevenueReport: (reportData, containerId, sortStateKey) => {
        // ... (Giữ nguyên)
        const container = document.getElementById(containerId);
        if (!container) return;

        container.innerHTML = '';

        let detailContainerId;
        if (sortStateKey === 'doanhthu_lk') {
            detailContainerId = 'dtnv-lk-details-container';
        } else if (sortStateKey === 'realtime_dt_nhanvien') {
            detailContainerId = 'realtime-employee-detail-container';
        } else {
            detailContainerId = 'sknv-details-container';
        }

        const detailContainer = document.getElementById(detailContainerId);
        if (detailContainer) {
             detailContainer.innerHTML = '';
             detailContainer.classList.add('hidden');
        }
        container.classList.remove('hidden');

        if (!reportData || reportData.length === 0) {
             container.innerHTML = '<p class="text-gray-500">Không có dữ liệu doanh thu cho lựa chọn này.</p>';
            return;
        }
        let finalHTML = `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden" data-capture-group="1">
             <div class="p-4 header-group-1 text-gray-800">
                 <h3 class="text-xl font-bold uppercase">Doanh thu nhân viên</h3>
                 <p class="text-sm italic text-gray-600">(đơn vị tính: Triệu đồng)</p>
             </div>`;

        const groupedByDept = {};
        reportData.forEach(item => {
            const dept = item.boPhan;
             if (!groupedByDept[dept]) groupedByDept[dept] = [];
             groupedByDept[dept].push(item);
        });

        const departmentOrder = utils.getSortedDepartmentList(reportData);
        departmentOrder.forEach(deptName => {
             if (groupedByDept[deptName]) {
                 finalHTML += uiComponents.renderRevenueTableForDepartment(deptName, groupedByDept[deptName], sortStateKey);
            }
        });

        finalHTML += `</div>`;
        container.innerHTML = finalHTML;
    },
    renderRevenueTableForDepartment: (title, data, sortStateKey) => {
        // ... (Giữ nguyên)
        const sortState = appState.sortState[sortStateKey] || { key: 'doanhThu', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = [...data].sort((a, b) => {
             const valA = a[key] || 0; const valB = b[key] || 0;
             return direction === 'asc' ? valA - valB : valB - valA;
        });

        const totals = data.reduce((acc, item) => {
            acc.doanhThu += item.doanhThu || 0;
            acc.doanhThuQuyDoi += item.doanhThuQuyDoi || 0;
            acc.doanhThuTraGop += item.doanhThuTraGop || 0;
            acc.doanhThuChuaXuat += item.doanhThuChuaXuat || 0;
            return acc;
        }, { doanhThu: 0, doanhThuQuyDoi: 0, doanhThuTraGop: 0, doanhThuChuaXuat: 0 });

        totals.hieuQuaQuyDoi = totals.doanhThu > 0 ? (totals.doanhThuQuyDoi / totals.doanhThu) - 1 : 0;
        totals.tyLeTraCham = totals.doanhThu > 0 ? totals.doanhThuTraGop / totals.doanhThu : 0;

        let titleClass = '';
        if (title.includes('Tư Vấn')) titleClass = 'department-header-tv';
        else if (title.includes('Kho')) titleClass = 'department-header-kho';
        else if (title.includes('Trang Trí')) titleClass = 'department-header-tt';

        const isRealtime = sortStateKey === 'realtime_dt_nhanvien';
        const headerClasses = {
            hoTen: '',
            doanhThu: isRealtime ? 'header-group-4' : 'header-bg-blue',
             doanhThuQuyDoi: isRealtime ? 'header-group-4' : 'header-bg-blue',
            hieuQuaQuyDoi: isRealtime ? 'header-group-4' : 'header-bg-blue',
            doanhThuTraGop: isRealtime ? 'header-group-5' : 'header-bg-green',
            tyLeTraCham: isRealtime ? 'header-group-5' : 'header-bg-green',
            doanhThuChuaXuat: isRealtime ? 'header-group-6' : 'header-bg-yellow'
         };

        const headerClass = (sortKey) => `px-4 py-3 sortable ${headerClasses[sortKey] || ''} ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;

        let tableHTML = `<div class="department-block"><h4 class="text-lg font-bold p-4 border-b border-gray-200 ${titleClass}">${title}</h4><div class="overflow-x-auto"><table class="min-w-full text-sm text-left text-gray-600 table-bordered table-striped" data-table-type="${sortStateKey}" data-capture-columns="7">
             <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                     <tr>
                             <th class="${headerClass('hoTen')}" data-sort="hoTen">Nhân viên <span class="sort-indicator"></span></th>
                             <th class="${headerClass('doanhThu')} text-right" data-sort="doanhThu">Doanh Thu <span class="sort-indicator"></span></th>
                             <th class="${headerClass('doanhThuQuyDoi')} text-right" data-sort="doanhThuQuyDoi">Doanh Thu QĐ <span class="sort-indicator"></span></th>
                             <th class="${headerClass('hieuQuaQuyDoi')} text-right" data-sort="hieuQuaQuyDoi">% QĐ <span class="sort-indicator"></span></th>
                             <th class="${headerClass('doanhThuTraGop')} text-right" data-sort="doanhThuTraGop">DT trả chậm <span class="sort-indicator"></span></th>
                             <th class="${headerClass('tyLeTraCham')} text-right" data-sort="tyLeTraCham">% trả chậm <span class="sort-indicator"></span></th>
                             <th class="${headerClass('doanhThuChuaXuat')} text-right" data-sort="doanhThuChuaXuat">DT Chưa Xuất <span class="sort-indicator"></span></th>
                      </tr>
                 </thead><tbody>`;
        sortedData.forEach(item => {
            const { mucTieu } = item;
             const qdClass = (mucTieu && item.hieuQuaQuyDoi < (mucTieu.phanTramQD / 100)) ? 'cell-performance is-below' : '';
             const tcClass = (mucTieu && item.tyLeTraCham < (mucTieu.phanTramTC / 100)) ? 'cell-performance is-below' : '';

            let sourceTab;
            if (sortStateKey === 'doanhthu_lk') sourceTab = 'dtnv-lk';
             else if (sortStateKey === 'realtime_dt_nhanvien') sourceTab = 'dtnv-rt';
            else sourceTab = 'sknv';

             tableHTML += `<tr class="interactive-row" data-employee-id="${item.maNV}" data-source-tab="${sourceTab}">
                    <td class="px-4 py-2 font-semibold line-clamp-2 employee-name-cell">
                        <a href="#">${uiComponents.getShortEmployeeName(item.hoTen, item.maNV)}</a>
                    </td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.doanhThu)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.doanhThuQuyDoi)}</td>
                     <td class="px-4 py-2 text-right font-bold ${qdClass}">${uiComponents.formatPercentage(item.hieuQuaQuyDoi)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.doanhThuTraGop)}</td>
                    <td class="px-4 py-2 text-right font-bold ${tcClass}">${uiComponents.formatPercentage(item.tyLeTraCham)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.doanhThuChuaXuat)}</td></tr>`;
        });
         tableHTML += `</tbody><tfoot class="table-footer font-bold"><tr>
                      <td class="px-4 py-2">Tổng</td>
                     <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThu)}</td>
                     <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuQuyDoi)}</td>
                   <td class="px-4 py-2 text-right">${uiComponents.formatPercentage(totals.hieuQuaQuyDoi)}</td>
                   <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuTraGop)}</td>
                     <td class="px-4 py-2 text-right">${uiComponents.formatPercentage(totals.tyLeTraCham)}</td>
                     <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuChuaXuat)}</td>
                  </tr></tfoot></table></div></div>`;
        return tableHTML;
    },
    displayEmployeeEfficiencyReport: (reportData, containerId, sortStateKey) => {
        // ... (Giữ nguyên)
         const container = document.getElementById(containerId);
         if (!container) return;
         if (!reportData || reportData.length === 0) {
             container.innerHTML = '<p class="text-gray-500">Không có dữ liệu hiệu quả cho lựa chọn này.</p>';
             return;
         }

         const columnSettings = settingsService.loadEfficiencyViewSettings();
         const visibleColumns = columnSettings.filter(c => c.visible);

         const columnTogglesHTML = `
            <div id="efficiency-column-toggles" class="p-3 border-b border-gray-200 flex flex-wrap items-center gap-x-2 gap-y-2">
                 <span class="text-sm font-semibold mr-2 text-gray-700 non-draggable">Tùy chỉnh cột:</span>
                  ${columnSettings.map(col => `
                     <button
                         class="column-toggle-btn draggable-tag flex items-center ${col.visible ? 'active' : ''}"
                         data-column-id="${col.id}">
                         <svg class="drag-handle-icon mr-2 cursor-grab" width="12" height="12" viewBox="0 0 10 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path d="M4 2a1 1 0 10-2 0 1 1 0 002 0zM2 9a1 1 0 110-2 1 1 0 010 2zm0 5a1 1 0 110-2 1 1 0 010 2zm5-12a1 1 0 10-2 0 1 1 0 002 0zM7 9a1 1 0 110-2 1 1 0 010 2zm0 5a1 1 0 110-2 1 1 0 010 2z" fill="currentColor"></path></svg>
                         <span>${col.label}</span>
                     </button>
                 `).join('')}
             </div>
         `;

         let finalHTML = `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
                          ${columnTogglesHTML}
                              <div data-capture-group="efficiency-table">
                                 <div class="p-4 header-group-3 text-gray-800">
                                     <h3 class="text-xl font-bold uppercase">HIỆU QUẢ KHAI THÁC THEO NHÂN VIÊN</h3>
                                      <p class="text-sm italic text-gray-600">(đơn vị tính: Triệu đồng)</p>
                                 </div>`;

         const groupedByDept = {};
         reportData.forEach(item => {
             const dept = item.boPhan;
             if (!groupedByDept[dept]) groupedByDept[dept] = [];
             groupedByDept[dept].push(item);
         });

         const departmentOrder = utils.getSortedDepartmentList(reportData);

         departmentOrder.forEach(deptName => {
            if (groupedByDept[deptName]) {
                 finalHTML += uiComponents.renderEfficiencyTableForDepartment(deptName, groupedByDept[deptName], sortStateKey, visibleColumns);
             }
         });

         finalHTML += `   </div>
                      </div>`;
         container.innerHTML = finalHTML;
    },
    renderEfficiencyTableForDepartment: (title, data, sortStateKey, visibleColumns) => {
        // ... (Giữ nguyên)
        const sortState = appState.sortState[sortStateKey] || { key: 'dtICT', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = [...data].sort((a, b) => {
            const valA = a[key] || 0; const valB = b[key] || 0;
            return direction === 'asc' ? valA - valB : valB - valA;
        });

        const formatMap = {
            dtICT: (val) => uiComponents.formatRevenue(val),
            dtPhuKien: (val) => uiComponents.formatRevenue(val),
            dtCE: (val) => uiComponents.formatRevenue(val),
            dtGiaDung: (val) => uiComponents.formatRevenue(val),
            defaultPercent: (val) => uiComponents.formatPercentage(val)
        };

        const totals = data.reduce((acc, item) => {
             acc.dtICT += item.dtICT || 0;
             acc.dtPhuKien += item.dtPhuKien || 0;
             acc.dtCE += item.dtCE || 0;
             acc.dtGiaDung += item.dtGiaDung || 0;
             acc.dtMLN += item.dtMLN || 0;
             acc.slSmartphone += item.slSmartphone || 0;
             acc.slSimOnline += item.slSimOnline || 0;
             acc.slUDDD += item.slUDDD || 0;
             acc.slBaoHiemDenominator += item.slBaoHiemDenominator || 0;
             acc.slBaoHiemVAS += item.slBaoHiemVAS || 0;
             return acc;
        }, { dtICT: 0, dtPhuKien: 0, dtCE: 0, dtGiaDung: 0, dtMLN: 0, slSmartphone: 0, slSimOnline: 0, slUDDD: 0, slBaoHiemDenominator: 0, slBaoHiemVAS: 0 });

        totals.pctPhuKien = totals.dtICT > 0 ? totals.dtPhuKien / totals.dtICT : 0;
        totals.pctGiaDung = totals.dtCE > 0 ? totals.dtGiaDung / totals.dtCE : 0;
        totals.pctMLN = totals.dtCE > 0 ? totals.dtMLN / totals.dtCE : 0;
        totals.pctSim = totals.slSmartphone > 0 ? totals.slSimOnline / totals.slSmartphone : 0;
        totals.pctVAS = totals.slSmartphone > 0 ? totals.slUDDD / totals.slSmartphone : 0;
        totals.pctBaoHiem = totals.slBaoHiemDenominator > 0 ? totals.slBaoHiemVAS / totals.slBaoHiemDenominator : 0;

        let titleClass = '';
        if (title.includes('Tư Vấn')) titleClass = 'department-header-tv';
        else if (title.includes('Kho')) titleClass = 'department-header-kho';
        else if (title.includes('Trang Trí')) titleClass = 'department-header-tt';
        const allHeaders = {
            dtICT: { label: 'DT ICT', class: 'text-right header-group-10' },
            dtPhuKien: { label: 'DT Phụ kiện', class: 'text-right header-group-10' },
            pctPhuKien: { label: '% Phụ kiện', class: 'text-right header-group-10' },
            dtCE: { label: 'DT CE', class: 'text-right header-group-11' },
            dtGiaDung: { label: 'DT Gia dụng', class: 'text-right header-group-11' },
            pctGiaDung: { label: '% Gia dụng', class: 'text-right header-group-11' },
            pctMLN: { label: '% MLN', class: 'text-right header-group-12' },
            pctSim: { label: '% Sim', class: 'text-right header-group-12' },
            pctVAS: { label: '% VAS', class: 'text-right header-group-12' },
            pctBaoHiem: { label: '% Bảo hiểm', class: 'text-right header-group-12' }
        };

        const headerClass = (sortKey) => `px-4 py-3 sortable draggable-header ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;
        const captureColumnCount = 1 + visibleColumns.length;
        let tableHTML = `<div class="department-block"><h4 class="text-lg font-bold p-4 border-b border-gray-200 ${titleClass}">${title}</h4><div class="overflow-x-auto"><table class="min-w-full text-sm text-left text-gray-600 table-bordered table-striped" data-table-type="${sortStateKey}" data-capture-columns="${captureColumnCount}">
            <thead class="text-xs text-slate-800 uppercase font-bold">
                 <tr>
                    <th class="${headerClass('hoTen')}" data-sort="hoTen">Tên nhân viên <span class="sort-indicator"></span></th>
                     ${visibleColumns.map(col => `<th class="${headerClass(col.id)} ${allHeaders[col.id]?.class || ''}" data-sort="${col.id}">${allHeaders[col.id]?.label || col.id} <span class="sort-indicator"></span></th>`).join('')}
                 </tr>
            </thead><tbody>`;

        sortedData.forEach(item => {
             const { mucTieu } = item;
            const classMap = {
                 pctPhuKien: (mucTieu && item.pctPhuKien < (mucTieu.phanTramPhuKien / 100)) ? 'cell-performance is-below' : '',
                 pctGiaDung: (mucTieu && item.pctGiaDung < (mucTieu.phanTramGiaDung / 100)) ? 'cell-performance is-below' : '',
                 pctMLN: (mucTieu && item.pctMLN < (mucTieu.phanTramMLN / 100)) ? 'cell-performance is-below' : '',
                 pctSim: (mucTieu && item.pctSim < (mucTieu.phanTramSim / 100)) ? 'cell-performance is-below' : '',
                 pctVAS: (mucTieu && item.pctVAS < (mucTieu.phanTramVAS / 100)) ? 'cell-performance is-below' : '',
                 pctBaoHiem: (mucTieu && item.pctBaoHiem < (mucTieu.phanTramBaoHiem / 100)) ? 'cell-performance is-below' : ''
            };

             tableHTML += `<tr class="interactive-row" data-employee-id="${item.maNV}" data-source-tab="sknv">
                <td class="px-4 py-2 font-semibold line-clamp-2 employee-name-cell">
                     <a href="#">${uiComponents.getShortEmployeeName(item.hoTen, item.maNV)}</a>
                 </td>
                 ${visibleColumns.map(col => {
                    const value = item[col.id];
                    const className = classMap[col.id] || '';
                    const formatter = formatMap[col.id] || formatMap.defaultPercent;
                    return `<td class="px-4 py-2 text-right font-bold ${className}">${formatter(value)}</td>`;
                }).join('')}
            </tr>`;
        });

        tableHTML += `</tbody><tfoot class="table-footer font-bold">
            <tr>
                 <td class="px-4 py-2">Tổng</td>
                 ${visibleColumns.map(col => {
                     const value = totals[col.id];
                     const formatter = formatMap[col.id] || formatMap.defaultPercent;
                     return `<td class="px-4 py-2 text-right">${formatter(value)}</td>`;
                }).join('')}
            </tr>
        </tfoot></table></div></div>`;
        return tableHTML;
    },
    renderCategoryTable(title, sortStateKey, reportData, mainRevenueKey, mainQuantityKey, subQuantityKeys, subQuantityLabels) {
        // ... (Giữ nguyên)
        const sortState = appState.sortState[sortStateKey] || { key: mainRevenueKey, direction: 'desc' };
        const { key, direction } = sortState;

        const sortedData = [...reportData].sort((a, b) => {
            const valA = a[key] || 0;
            const valB = b[key] || 0;
             return direction === 'asc' ? valA - valB : valB - valA;
        });

        const totals = reportData.reduce((acc, item) => {
             acc[mainRevenueKey] = (acc[mainRevenueKey] || 0) + (item[mainRevenueKey] || 0);
            acc[mainQuantityKey] = (acc[mainQuantityKey] || 0) + (item[mainQuantityKey] || 0);
             subQuantityKeys.forEach(subKey => {
                acc[subKey] = (acc[subKey] || 0) + (item[subKey] || 0);
            });
            return acc;
        }, {});

        const headerClass = (sortKey) => `px-2 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;
        const titleClass = {
            'ICT': 'category-header-ict',
            'PHỤ KIỆN': 'category-header-phukien',
            'GIA DỤNG': 'category-header-giadung',
            'CE': 'category-header-ce',
             'BẢO HIỂM': 'category-header-baohiem',
        }[title] || 'bg-gray-200';

        const subHeaders = subQuantityLabels.map((label) => `<th class="px-2 py-2 text-right">${label}</th>`).join('');

        const tableRows = [];
        sortedData.forEach(item => {
            if ((item[mainRevenueKey] || 0) > 0 || (item[mainQuantityKey] || 0) > 0) {
                 tableRows.push(`
                    <tr class="interactive-row" data-employee-id="${item.maNV}" data-source-tab="sknv">
                        <td class="px-2 py-2 font-semibold line-clamp-2 employee-name-cell">
                            <a href="#">${this.getShortEmployeeName(item.hoTen, item.maNV)}</a>
                        </td>
                         <td class="px-2 py-2 text-right font-bold">${this.formatRevenue(item[mainRevenueKey])}</td>
                         <td class="px-2 py-2 text-right font-bold">${this.formatNumberOrDash(item[mainQuantityKey])}</td>
                         ${subQuantityKeys.map(subKey => `<td class="px-2 py-2 text-right">${this.formatNumberOrDash(item[subKey])}</td>`).join('')}
                     </tr>
                `);
            }
        });

        if (tableRows.length === 0) {
             return `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
                         <h4 class="text-lg font-bold p-3 border-b ${titleClass}">${title}</h4>
                         <p class="p-4 text-gray-500">Không có dữ liệu cho ngành hàng này.</p>
                     </div>`;
        }

        const html = `
            <div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
                <h4 class="text-lg font-bold p-3 border-b ${titleClass}">${title}</h4>
                 <div class="overflow-x-auto">
                     <table class="min-w-full text-sm table-bordered table-striped" data-table-type="${sortStateKey}">
                         <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                             <tr>
                                <th rowspan="2" class="${headerClass('hoTen')}" data-sort="hoTen">Nhân viên</th>
                                 <th rowspan="2" class="${headerClass(mainRevenueKey)} text-right" data-sort="${mainRevenueKey}">DT</th>
                                <th rowspan="2" class="${headerClass(mainQuantityKey)} text-right" data-sort="${mainQuantityKey}">Tổng SL</th>
                                 <th colspan="${subQuantityKeys.length}" class="px-2 py-2 text-center">Chi tiết SL</th>
                            </tr>
                            <tr>${subHeaders}</tr>
                         </thead>
                          <tbody>
                             ${tableRows.join('')}
                        </tbody>
                          <tfoot class="table-footer font-bold">
                            <tr>
                                <td class="px-2 py-2">Tổng</td>
                                 <td class="px-2 py-2 text-right">${this.formatRevenue(totals[mainRevenueKey] || 0)}</td>
                                 <td class="px-2 py-2 text-right">${this.formatNumberOrDash(totals[mainQuantityKey] || 0)}</td>
                                 ${subQuantityKeys.map(subKey => `<td class="px-2 py-2 text-right">${this.formatNumberOrDash(totals[subKey] || 0)}</td>`).join('')}
                             </tr>
                          </tfoot>
                     </table>
                </div>
            </div>`;
        return html;
    },
    displayCategoryRevenueReport(reportData, containerId, sortStatePrefix) {
        // ... (Giữ nguyên)
         const container = document.getElementById(containerId);
         if (!container) return;

         const hasAnyData = reportData.some(item => (item.dtICT || 0) > 0 || (item.dtPhuKien || 0) > 0 || (item.dtGiaDung || 0) > 0 || (item.dtCE || 0) > 0 || (item.dtBaoHiem || 0) > 0);
         if (!hasAnyData) {
             container.innerHTML = '<p class="text-yellow-600 font-semibold">Không tìm thấy doanh thu cho các ngành hàng chính.</p>';
             return;
         }

         const htmlParts = [
             '<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">',
             `<div data-capture-group="1" data-capture-columns="6">${this.renderCategoryTable('ICT', `${sortStatePrefix}_ict`, reportData, 'dtICT', 'slICT', ['slDienThoai', 'slLaptop'], ['SL Điện thoại', 'SL Laptop'])}</div>`,
             `<div data-capture-group="1" data-capture-columns="6">${this.renderCategoryTable('PHỤ KIỆN', `${sortStatePrefix}_phukien`, reportData, 'dtPhuKien', 'slPhuKien', ['slPinSDP', 'slCamera', 'slTaiNgheBLT'], ['SL Pin SDP', 'SL Camera', 'SL Tai nghe BLT'])}</div>`,
             `<div data-capture-group="2" data-capture-columns="6">${this.renderCategoryTable('GIA DỤNG', `${sortStatePrefix}_giadung`, reportData, 'dtGiaDung', 'slGiaDung', ['slNoiChien', 'slMLN', 'slRobotHB'], ['SL Nồi chiên', 'SL MLN', 'SL Robot HB'])}</div>`,
             `<div data-capture-group="2" data-capture-columns="6">${this.renderCategoryTable('CE', `${sortStatePrefix}_ce`, reportData, 'dtCE', 'slCE', ['slTivi', 'slTuLanh', 'slMayGiat', 'slMayLanh'], ['SL Tivi', 'SL Tủ lạnh', 'SL Máy giặt', 'SL Máy lạnh'])}</div>`,
             `<div class="lg:col-span-2" data-capture-group="3" data-capture-columns="7">${this.renderCategoryTable('BẢO HIỂM', `${sortStatePrefix}_baohiem`, reportData, 'dtBaoHiem', 'slBaoHiem', ['slBH1d1', 'slBHXM', 'slBHRV', 'slBHMR'], ['BH 1-1', 'BHXM', 'BHRV', 'BHMR'])}</div>`,
             '</div>'
         ];
         container.innerHTML = htmlParts.join('');
    },
    populateWarehouseSelector() {
        // ... (Giữ nguyên)
        const selector = document.getElementById('data-warehouse-selector');
        if (!selector) {
            console.error("Không tìm thấy #data-warehouse-selector");
            return;
        }

        if (!appState.danhSachNhanVien || appState.danhSachNhanVien.length === 0) {
            selector.innerHTML = '<option value="">-- Vui lòng tải Danh sách Nhân viên --</option>';
            selector.disabled = true;
            console.log("populateWarehouseSelector: DSNV trống.");
            return;
        }

        const uniqueWarehouses = [...new Set(appState.danhSachNhanVien.map(nv => String(nv.maKho).trim()).filter(Boolean))].sort();
        console.log("populateWarehouseSelector: Các kho tìm thấy (dạng chuỗi):", uniqueWarehouses);

        let optionsHTML = '<option value="">-- Chọn Kho --</option>';
        optionsHTML += uniqueWarehouses.map(kho => `<option value="${kho}">${kho}</option>`).join('');
        selector.innerHTML = optionsHTML;
        selector.disabled = false;

        let currentSelected = appState.selectedWarehouse ? String(appState.selectedWarehouse).trim() : null;
        if (!currentSelected) {
             const storedValue = localStorage.getItem('selectedWarehouse');
             currentSelected = storedValue ? String(storedValue).trim() : '';
        }
        console.log("populateWarehouseSelector: Kho đang chọn (state/local, dạng chuỗi):", currentSelected);
        if (currentSelected && uniqueWarehouses.includes(currentSelected)) {
            selector.value = currentSelected;
            if (appState.selectedWarehouse !== currentSelected) {
                 appState.selectedWarehouse = currentSelected;
                 console.log("populateWarehouseSelector: Đã cập nhật state.selectedWarehouse thành:", currentSelected);
            }
            console.log("populateWarehouseSelector: Đã chọn kho:", selector.value);
        } else {
             if (currentSelected && !uniqueWarehouses.includes(currentSelected)) {
                 console.log(`populateWarehouseSelector: Kho đã lưu '${currentSelected}' không hợp lệ (không có trong ${uniqueWarehouses.join(',')}), đang reset.`);
                 appState.selectedWarehouse = null;
                 localStorage.removeItem('selectedWarehouse');
                 selector.value = "";
                 console.log("populateWarehouseSelector: Reset state về null và selector về '-- Chọn Kho --'.");
             } else if (!currentSelected) {
                 console.log("populateWarehouseSelector: Không có kho nào được lưu.");
                 appState.selectedWarehouse = null;
                 selector.value = "";
                 console.log("populateWarehouseSelector: Reset state về null và selector về '-- Chọn Kho --'.");
             } else {
                 console.log(`populateWarehouseSelector: Kho '${currentSelected}' hợp lệ hoặc không có gì để reset.`);
             }
        }
    },

    // ... (Các hàm khác như showProgressBar, hideProgressBar, etc. giữ nguyên) ...
    showProgressBar: (elementId) => { const el = document.getElementById(`progress-${elementId}`); if(el) el.classList.remove('hidden'); },
    hideProgressBar: (elementId) => { const el = document.getElementById(`progress-${elementId}`); if(el) el.classList.add('hidden'); },
    showNotification: (message, type = 'success') => {
        const notification = document.getElementById('notification');
        if (!notification) return;
        notification.textContent = message;
        notification.className = `fixed bottom-5 right-5 p-4 rounded-lg shadow-md text-white z-[1200] opacity-0 transition-opacity duration-500 transform translate-y-10 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
        void notification.offsetWidth;
        notification.classList.remove('hidden', 'opacity-0', 'translate-y-10');
        notification.classList.add('opacity-100', 'translate-y-0');

        setTimeout(() => {
             notification.classList.remove('opacity-100', 'translate-y-0');
             notification.classList.add('opacity-0', 'translate-y-10');
             setTimeout(() => notification.classList.add('hidden'), 500);
        }, 3000);
    },
    showUpdateNotification() {
        const notification = document.getElementById('update-notification');
        if (notification) {
             notification.classList.remove('hidden');
             const button = notification.querySelector('button');
             if (button && !button.onclick) {
                button.onclick = () => window.location.reload();
             }
         }
    },
     updateUsageCounter: (statsData) => {
        const visitorCountEl = document.getElementById('visitor-count');
         const actionCountEl = document.getElementById('action-count');
         const userCountEl = document.getElementById('user-count');
         if (visitorCountEl) visitorCountEl.textContent = statsData?.pageLoads ? uiComponents.formatNumber(statsData.pageLoads) : '0';
         if (actionCountEl) actionCountEl.textContent = statsData?.actionsTaken ? uiComponents.formatNumber(statsData.actionsTaken) : '0';
         if (userCountEl) userCountEl.textContent = statsData?.totalUsers ? uiComponents.formatNumber(statsData.totalUsers) : '0';
     },
     updateFileStatus(uiId, fileName = '', statusText, statusType = 'default', showDownloadButton = false, metadata = null, dataType = '', warehouse = '') {
         const fileNameSpan = document.getElementById(`file-name-${uiId}`);
         const fileStatusSpan = document.getElementById(`file-status-${uiId}`);

         if (fileNameSpan) fileNameSpan.textContent = fileName || 'Chưa thêm file';

         if (fileStatusSpan) {
             let finalStatusText = statusText;
             let timeAgo = '';
             let buttonHTML = '';
             let countText = '';

             if (metadata && metadata.updatedAt) {
                 const timestampDate = metadata.updatedAt.toDate ? metadata.updatedAt.toDate() : new Date(metadata.updatedAt);
                 if (!isNaN(timestampDate)) {
                     timeAgo = this.formatTimeAgo(timestampDate);
                 }
             }

             if (statusType === 'success' && metadata) {
                 countText = metadata.rowCount ? `${uiComponents.formatNumber(metadata.rowCount)} dòng` : '';
                 finalStatusText = `✓ Đã đồng bộ cloud ${countText} ${timeAgo}`.trim();
             } else if (statusType === 'default' && showDownloadButton && metadata) {
                 finalStatusText = `Có cập nhật mới từ ${metadata.updatedBy || 'ai đó'} ${timeAgo}`;
             }

             if (showDownloadButton && dataType && warehouse) {
                 buttonHTML = `
                     <button
                         class="download-data-btn ml-2 px-2 py-0.5 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200"
                         data-type="${dataType}"
                         data-warehouse="${warehouse}"
                         title="Tải và xử lý phiên bản dữ liệu mới này">
                         Tải & Xử lý
                     </button>
                 `;
             }

             fileStatusSpan.innerHTML = `<span class="data-input-group__status-text data-input-group__status-text--${statusType}">${finalStatusText}</span>${buttonHTML}`;
         }
     },
     updatePasteStatus(uiId, statusText, statusType = 'success', metadata = null, processedCount = 0) {
         const statusSpan = document.getElementById(uiId);
         if (statusSpan) {
             let finalStatusText = statusText;
             let timeAgo = '';
             let countText = '';

             if (metadata && metadata.updatedAt) {
                 const timestampDate = metadata.updatedAt.toDate ? metadata.updatedAt.toDate() : new Date(metadata.updatedAt);
                 if (!isNaN(timestampDate)) {
                     timeAgo = this.formatTimeAgo(timestampDate);
                 }
             }

             if (statusType === 'success' && metadata) {
                 if ((uiId === 'status-thuongerp' || uiId === 'status-thuongerp-thangtruoc' || uiId === 'status-thiduanv') && processedCount > 0) {
                     countText = `${processedCount} nhân viên`;
                 } else if (uiId === 'status-luyke') {
                    countText = '';
                 }
                 
                 finalStatusText = `✓ Đã đồng bộ cloud ${countText} ${timeAgo}`.trim();
             }

             statusSpan.textContent = finalStatusText;
             statusSpan.className = `data-input-group__status-text data-input-group__status-text--${statusType}`;
         }
     },
     togglePlaceholder: (sectionId, show) => {
         const placeholder = document.getElementById(`${sectionId}-placeholder`);
         const content = document.getElementById(`${sectionId}-content`);
         if (placeholder && content) {
             placeholder.classList.toggle('hidden', !show);
             content.classList.toggle('hidden', show);
         }
     },
    formatNumber: (value, decimals = 0) => {
        if (isNaN(value) || value === null) return '0';
        return new Intl.NumberFormat('vi-VN', { minimumFractionDigits: decimals, maximumFractionDigits: decimals }).format(value);
    },
    formatRevenue(value, decimals = 1) {
         if (!isFinite(value) || value === null || value === 0) return '-';
         const millions = value / 1000000;
         const roundedValue = parseFloat(millions.toFixed(decimals));
         if (roundedValue === 0 && millions !== 0) {
              return millions > 0 ? '> 0' : '< 0';
         }
         return new Intl.NumberFormat('vi-VN', {
             minimumFractionDigits: 0,
             maximumFractionDigits: decimals
         }).format(roundedValue);
     },
     formatNumberOrDash: (value, decimals = 1) => {
         if (!isFinite(value) || value === null || value === 0) return '-';
          const roundedValue = parseFloat(value.toFixed(decimals));
          if (roundedValue === 0 && value !== 0) {
               return value > 0 ? '> 0' : '< 0';
          }
           if (roundedValue === 0) return '-';
          return new Intl.NumberFormat('vi-VN', {
              minimumFractionDigits: 0,
              maximumFractionDigits: decimals
          }).format(roundedValue);
      },
     formatPercentage: (value, decimals = 0) => {
         if (!isFinite(value) || value === null) return '-';
          if (value === 0) return '-';
          const percentageValue = value * 100;
          const roundedValue = parseFloat(percentageValue.toFixed(decimals));
          if (roundedValue === 0 && percentageValue !== 0) {
             return percentageValue > 0 ? '> 0%' : '< 0%';
          }
         return new Intl.NumberFormat('vi-VN', {
             minimumFractionDigits: decimals,
              maximumFractionDigits: decimals
          }).format(roundedValue) + '%';
      },
    formatTimeAgo(date) {
         if (!date || !(date instanceof Date) || isNaN(date)) return '';
         const seconds = Math.floor((new Date() - date) / 1000);
         let interval = seconds / 31536000;
         if (interval > 1) return Math.floor(interval) + " năm trước";
         interval = seconds / 2592000;
         if (interval > 1) return Math.floor(interval) + " tháng trước";
         interval = seconds / 86400;
         if (interval > 1) return Math.floor(interval) + " ngày trước";
         interval = seconds / 3600;
         if (interval > 1) return Math.floor(interval) + " giờ trước";
         interval = seconds / 60;
         if (interval > 1) return Math.floor(interval) + " phút trước";
         return "vài giây trước";
     },
    getShortEmployeeName(hoTen, maNV) {
        if (!hoTen) return maNV || '';
        const nameParts = hoTen.split(' ').filter(p => p);
        let displayName = hoTen;
        if (nameParts.length > 2) {
            displayName = nameParts.slice(-2).join(' ');
        }
        return `${displayName} - ${maNV}`;
    },
    toggleModal(modalId, show) {
        const modal = document.getElementById(modalId);
        if (!modal) return;
        modal.classList.toggle('hidden', !show);
    },
    toggleDrawer(drawerId, show) {
        const drawer = document.getElementById(drawerId);
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('drawer-overlay');

        if (!drawer || !sidebar || !overlay) return;
        if (show) {
            drawer.classList.remove('hidden');
            setTimeout(() => {
                 drawer.classList.add('open');
                 sidebar.classList.add('menu-locked');
                 overlay.classList.remove('hidden');
            }, 10);
        } else {
            drawer.classList.remove('open');
            sidebar.classList.remove('menu-locked');
            overlay.classList.add('hidden');
            setTimeout(() => {
                 if (!drawer.classList.contains('open')) {
                     drawer.classList.add('hidden');
                 }
             }, 300);
        }
    },
    closeAllDrawers() {
        this.toggleDrawer('interface-drawer', false);
        this.toggleDrawer('goal-drawer', false);
    },
    handleSubTabClick(button) {
        const nav = button.closest('nav');
        if (!nav) return;
        const targetId = button.dataset.target;
        const contentContainer = document.getElementById(nav.dataset.contentContainer);
        if (!contentContainer) return;

        nav.querySelectorAll('.sub-tab-btn').forEach(b => b.classList.remove('active'));
        button.classList.add('active');
        contentContainer.querySelectorAll('.sub-tab-content').forEach(content => content.classList.toggle('hidden', content.id !== targetId));
    },
    toggleFilterSection(targetId) {
        const targetContainer = document.getElementById(targetId);
        const button = document.querySelector(`.toggle-filters-btn[data-target="${targetId}"]`);
        if (targetContainer && button) {
            targetContainer.classList.toggle('hidden');
            const isHidden = targetContainer.classList.contains('hidden');
            button.classList.toggle('active', !isHidden);
            const textSpan = button.querySelector('.text');
            if (textSpan) textSpan.textContent = isHidden ? 'Hiện bộ lọc nâng cao' : 'Ẩn bộ lọc nâng cao';
            const icon = button.querySelector('.icon');
            if(icon) icon.style.transform = isHidden ? 'rotate(0deg)' : 'rotate(180deg)';
        }
    },
    toggleDebugTool(button) {
        const container = document.getElementById('debug-tool-container');
        if (container) {
             container.classList.toggle('hidden');
            button.textContent = container.classList.contains('hidden') ? 'Hiển thị Công cụ Gỡ lỗi' : 'Ẩn Công cụ Gỡ lỗi';
        }
    },
    showHelpModal(helpId) {
        const titleEl = document.getElementById('help-modal-title');
        const contentEl = document.getElementById('help-modal-content');
        if (!titleEl || !contentEl) return;
        const title = `Hướng dẫn cho Tab ${helpId.charAt(0).toUpperCase() + helpId.slice(1)}`;
        const content = appState.helpContent[helpId] || "Nội dung hướng dẫn không có sẵn.";
        titleEl.textContent = title;
        contentEl.innerHTML = content.replace(/\n/g, '<br>');
        this.toggleModal('help-modal', true);
    },
    showComposerModal(sectionId) {
         this.toggleModal('composer-modal', true);
        const firstTextarea = document.querySelector('#composer-context-content textarea');
        firstTextarea?.focus();
    },
     insertComposerTag(textarea, tag) {
        if (!textarea) return;
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const textToInsert = tag || '';
        textarea.value = `${textarea.value.substring(0, start)}${textToInsert}${textarea.value.substring(end)}`;
        textarea.focus();
        textarea.selectionStart = textarea.selectionEnd = start + textToInsert.length;
    },
    showPreviewAndCopy(processedText) {
        const previewContentEl = document.getElementById('preview-modal-content');
        if (!previewContentEl) return;
        previewContentEl.textContent = processedText;
        this.toggleModal('preview-modal', true);
    },
    copyFromPreview() {
        const contentEl = document.getElementById('preview-modal-content');
        if (!contentEl) return;
        const content = contentEl.textContent;
        navigator.clipboard.writeText(content)
             .then(() => {
                uiComponents.showNotification('Đã sao chép nội dung!', 'success');
                uiComponents.toggleModal('preview-modal', false);
             })
             .catch(err => {
                console.error('Lỗi sao chép:', err);
                 uiComponents.showNotification('Lỗi khi sao chép.', 'error');
             });
    },
    renderAdminHelpEditors() {
         if (appState.isAdmin) {
            const dataEl = document.getElementById('edit-help-data');
            if (dataEl) dataEl.value = appState.helpContent.data || '';
            const luykeEl = document.getElementById('edit-help-luyke');
            if (luykeEl) luykeEl.value = appState.helpContent.luyke || '';
            const sknvEl = document.getElementById('edit-help-sknv');
            if (sknvEl) sknvEl.value = appState.helpContent.sknv || '';
            const realtimeEl = document.getElementById('edit-help-realtime');
            if (realtimeEl) realtimeEl.value = appState.helpContent.realtime || '';
        }
    },
    renderHomePage() {
        this.renderUpdateHistory();
        this.renderFeedbackSection();
    },
    async renderUpdateHistory() {
        const container = document.getElementById('update-history-list');
        if (!container) return;
        try {
             const response = await fetch(`./changelog.json?v=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Không thể tải lịch sử cập nhật.');
            const updateHistory = await response.json();
            container.innerHTML = updateHistory.map(item => `
                <div class="bg-white rounded-xl shadow-md p-5 border border-gray-200">
                      <h4 class="font-bold text-blue-600 mb-2">Phiên bản ${item.version} (${item.date})</h4>
                     <ul class="list-disc list-inside text-gray-700 space-y-1 text-sm">
                         ${item.notes.map(note => `<li>${note}</li>`).join('')}
                    </ul>
                 </div>`).join('');
        } catch (error) {
            console.error("Lỗi khi render lịch sử cập nhật:", error);
            container.innerHTML = '<p class="text-red-500">Không thể tải lịch sử cập nhật.</p>';
        }
    },
    renderFeedbackSection() {
         const composerContainer = document.getElementById('feedback-composer');
         const listContainer = document.getElementById('feedback-list');
         if (!composerContainer || !listContainer) return;

        composerContainer.innerHTML = `
             <h4 class="text-lg font-semibold text-gray-800 mb-3">Gửi góp ý của bạn</h4>
            <textarea id="feedback-textarea" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-3" rows="4" placeholder="Chúng tôi luôn lắng nghe ý kiến của bạn để cải thiện công cụ tốt hơn..."></textarea>
             <button id="submit-feedback-btn" class="w-full bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-indigo-700 transition">Gửi góp ý</button>
        `;

        if (!appState.feedbackList || appState.feedbackList.length === 0) {
            listContainer.innerHTML = '<p class="text-center text-gray-500 mt-4">Chưa có góp ý nào.</p>';
            return;
        }

         listContainer.innerHTML = appState.feedbackList.map(item => {
            const userNameDisplay = item.user?.email || 'Người dùng ẩn danh';
            return `
                <div class="feedback-item bg-white rounded-xl shadow-md p-5 border border-gray-200" data-id="${item.id}">
                    <p class="text-gray-800">${item.content}</p>
                     <div class="text-xs text-gray-500 mt-3 flex justify-between items-center">
                         <span class="font-semibold">${userNameDisplay}</span>
                         <span>${this.formatTimeAgo(item.timestamp)}</span>
                         ${appState.isAdmin ? `<button class="reply-btn text-blue-600 hover:underline">Trả lời</button>` : ''}
                    </div>
                    <div class="ml-6 mt-4 space-y-3">
                         ${(item.replies || []).map(reply => `
                             <div class="bg-gray-100 rounded-lg p-3">
                                <p class="text-gray-700 text-sm">${reply.content}</p>
                                 <div class="text-xs text-gray-500 mt-2">
                                     <strong>Admin</strong> - ${this.formatTimeAgo(reply.timestamp instanceof Date ? reply.timestamp : reply.timestamp?.toDate())}
                                 </div>
                            </div>`).join('')}
                    </div>
                    <div class="reply-form-container hidden ml-6 mt-4">
                         <textarea class="w-full p-2 border rounded-lg text-sm" rows="2" placeholder="Viết câu trả lời..."></textarea>
                         <div class="flex justify-end gap-2 mt-2">
                            <button class="cancel-reply-btn text-sm text-gray-600 px-3 py-1 rounded-md hover:bg-gray-100">Hủy</button>
                             <button class="submit-reply-btn text-sm bg-blue-600 text-white px-3 py-1 rounded-md hover:bg-blue-700">Gửi</button>
                        </div>
                    </div>
                </div>`;
        }).join('');
    },

     applyInterfaceSettings(settings) {
         const root = document.documentElement;
         if (settings.kpiCard1Bg) root.style.setProperty('--kpi-card-1-bg', settings.kpiCard1Bg);
         if (settings.kpiCard2Bg) root.style.setProperty('--kpi-card-2-bg', settings.kpiCard2Bg);
         if (settings.kpiCard3Bg) root.style.setProperty('--kpi-card-3-bg', settings.kpiCard3Bg);
         if (settings.kpiCard4Bg) root.style.setProperty('--kpi-card-4-bg', settings.kpiCard4Bg);
         if (settings.kpiCard5Bg) root.style.setProperty('--kpi-card-5-bg', settings.kpiCard5Bg);
         if (settings.kpiCard6Bg) root.style.setProperty('--kpi-card-6-bg', settings.kpiCard6Bg);
         if (settings.kpiCard7Bg) root.style.setProperty('--kpi-card-7-bg', settings.kpiCard7Bg);
         if (settings.kpiCard8Bg) root.style.setProperty('--kpi-card-8-bg', settings.kpiCard8Bg);
         if (settings.kpiTitleColor) root.style.setProperty('--kpi-title-color', settings.kpiTitleColor);
         if (settings.kpiMainColor) root.style.setProperty('--kpi-main-color', settings.kpiMainColor);
         if (settings.kpiSubColor) root.style.setProperty('--kpi-sub-color', settings.kpiSubColor);
     },

    displayDebugInfo(fileType) {
        // ... (Giữ nguyên)
         const resultsContainer = document.getElementById('debug-results-container');
         if (!fileType) {
             if (resultsContainer) resultsContainer.innerHTML = '<p class="text-gray-500">Chưa có file nào được tải lên để kiểm tra.</p>';
             return;
         }
         if (resultsContainer && resultsContainer.innerHTML.includes('Chưa có file nào')) resultsContainer.innerHTML = '';

         const debugData = appState.debugInfo[fileType];
         if (!debugData) return;

         const fileInputEl = document.querySelector(`#file-${fileType}`);
         const fileName = fileInputEl?.dataset.name || fileType;
         let tableHTML = `<div class="p-2 border rounded-md bg-white mb-4"><h4 class="font-bold text-gray-800 mb-2">${fileName}</h4><table class="min-w-full text-sm">
             <thead class="bg-gray-100"><tr><th class="px-2 py-1 text-left font-semibold text-gray-600">Yêu cầu</th><th class="px-2 py-1 text-left font-semibold text-gray-600">Cột tìm thấy</th><th class="px-2 py-1 text-center font-semibold text-gray-600">Trạng thái</th></tr></thead><tbody>`;
         (debugData.required || []).forEach(res => {
             const statusClass = res.status ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100';
             tableHTML += `<tr class="border-t"><td class="px-2 py-1 font-medium">${res.displayName}</td><td class="px-2 py-1 font-mono">${res.foundName}</td><td class="px-2 py-1 text-center font-bold ${statusClass}">${res.status ? 'OK' : 'LỖI'}</td></tr>`;
         });
         tableHTML += `</tbody></table>`;
         if (debugData.firstFiveMsnv && debugData.firstFiveMsnv.length > 0) {
             tableHTML += `<div class="mt-2 p-2 bg-gray-50 rounded"><p class="text-xs font-semibold">5 MSNV đầu tiên đọc được:</p><ul class="text-xs font-mono list-disc list-inside">${debugData.firstFiveMsnv.map(msnv => `<li>"${msnv}"</li>`).join('')}</ul></div>`;
         }
         tableHTML += `</div>`;

         const existingEl = document.getElementById(`debug-table-${fileType}`);
         if (existingEl) {
              existingEl.innerHTML = tableHTML;
         } else if (resultsContainer) {
             const wrapper = document.createElement('div');
             wrapper.id = `debug-table-${fileType}`;
             wrapper.innerHTML = tableHTML;
             resultsContainer.appendChild(wrapper);
         }
     },
    displayPastedDebugInfo(dataType) {
        // ... (Giữ nguyên)
         const container = document.getElementById('pasted-debug-results-container');
         if (!container) return;

         const debugData = appState.debugInfo[dataType];
         if (!debugData) {
             container.innerHTML = '';
             return;
         }

         let content = `<div class="p-2 border rounded-md bg-white mb-4">
            <h4 class="font-bold text-gray-800 mb-2">Chẩn đoán dữ liệu dán: ${dataType.replace('-pasted', '')}</h4>`;

         if (debugData.found && debugData.found.length > 0) {
             content += '<ul>';
             debugData.found.forEach(item => {
                 content += `<li class="text-sm ${item.status ? 'text-green-700' : 'text-red-700'}"><strong>${item.name}:</strong> ${item.value}</li>`;
             });
             content += '</ul>';
         }

         content += `<p class="text-xs italic mt-2"><strong>Trạng thái xử lý:</strong> ${debugData.status}</p></div>`;
         container.innerHTML = content;
     },
    displayThiDuaVungDebugInfo() {
        // ... (Giữ nguyên)
        const resultsContainer = document.getElementById('debug-results-container');
        if (!resultsContainer) return;

        const renderDebugTable = (title, data) => {
             if (!data || data.length === 0) {
                 return `<div class="p-2 border rounded-md bg-white mb-4">
                      <h4 class="font-bold text-gray-800 mb-2">${title}</h4>
                      <p class="text-gray-500">Không có dữ liệu để hiển thị.</p>
                  </div>`;
            }

             const headers = Object.keys(data[0]);
            let tableHTML = `<div class="p-2 border rounded-md bg-white mb-4">
                  <h4 class="font-bold text-gray-800 mb-2">${title}</h4>
                <div class="overflow-x-auto">
                     <table class="min-w-full text-xs">
                        <thead class="bg-gray-100">
                             <tr>${headers.map(h => `<th class="px-2 py-1 text-left font-semibold text-gray-600 whitespace-nowrap">${h}</th>`).join('')}</tr>
                        </thead>
                         <tbody>`;
            data.forEach(row => {
                tableHTML += `<tr class="border-t">`;
                headers.forEach(header => {
                    tableHTML += `<td class="px-2 py-1 font-mono">${row[header] !== undefined ? row[header] : ''}</td>`;
                });
                tableHTML += `</tr>`;
            });

            tableHTML += `</tbody></table></div></div>`;
            return tableHTML;
        };

        const tongRaw = appState.debugInfo?.thiDuaVungTongRaw?.slice(0, 10) || [];
        const chiTietRaw = appState.debugInfo?.thiDuaVungChiTietRaw?.slice(0, 10) || [];

        let finalHTML = renderDebugTable('Thi Đua Vùng - Sheet TONG (10 dòng đầu)', tongRaw);
        finalHTML += renderDebugTable('Thi Đua Vùng - Sheet CHITIET (10 dòng đầu)', chiTietRaw);

        const existingEl = document.getElementById('debug-table-thidua-vung');
        if (existingEl) {
            existingEl.innerHTML = finalHTML;
        } else {
            const wrapper = document.createElement('div');
            wrapper.id = `debug-table-thidua-vung`;
            wrapper.innerHTML = finalHTML;
            resultsContainer.appendChild(wrapper);
        }
    },
    renderCompetitionDebugReport(debugResults) {
        // ... (Giữ nguyên)
         const container = document.getElementById('debug-competition-results');
        if (!container) return;

        if (!debugResults || debugResults.length === 0) {
             container.innerHTML = '<p class="text-gray-600">Không có dữ liệu để phân tích.</p>';
            return;
        }

        const validCount = debugResults.filter(r => r.isOverallValid).length;
        const totalCount = debugResults.length;
        const checkHeaders = ['HTX Hợp lệ', 'Đã thu', 'Chưa hủy', 'Chưa trả', 'Đã xuất'];

        let tableHTML = `
            <div class="p-4 bg-white border rounded-lg">
                <h4 class="font-bold text-lg mb-2">Kết quả Phân tích File: <span class="text-green-600">${validCount}</span> / ${totalCount} dòng hợp lệ</h4>
                 <div class="overflow-x-auto max-h-[600px]">
                     <table class="min-w-full text-xs table-bordered competition-debug-table">
                         <thead class="bg-gray-100 sticky top-0">
                             <tr>
                                <th class="p-2">Người tạo</th>
                                 <th class="p-2">Nhóm hàng</th>
                                 <th class="p-2">HT Xuất</th>
                                 <th class="p-2">TT Thu tiền</th>
                                 <th class="p-2">TT Hủy</th>
                                <th class="p-2">TT Trả</th>
                                 <th class="p-2">TT Xuất</th>
                                 ${checkHeaders.map(h => `<th class="p-2">${h}</th>`).join('')}
                                 <th class="p-2">Tổng thể</th>
                             </tr>
                         </thead>
                        <tbody>`;

        const renderCheck = (status) => `<td class="text-center font-bold text-lg">${status ? '<span class="text-green-500">✅</span>' : '<span class="text-red-500">❌</span>'}</td>`;

        debugResults.forEach(result => {
            const rowClass = result.isOverallValid ? 'bg-green-50' : 'bg-red-50';
            const { rowData, checks, isOverallValid } = result;
             tableHTML += `
                <tr class="${rowClass}">
                     <td class="p-2">${rowData.nguoiTao || ''}</td>
                     <td class="p-2">${rowData.nhomHang || ''}</td>
                     <td class="p-2">${rowData.hinhThucXuat || ''}</td>
                     <td class="p-2">${rowData.trangThaiThuTien || ''}</td>
                    <td class="p-2">${rowData.trangThaiHuy || ''}</td>
                     <td class="p-2">${rowData.tinhTrangTra || ''}</td>
                    <td class="p-2">${rowData.trangThaiXuat || ''}</td>
                    ${renderCheck(checks.isDoanhThuHTX)}
                    ${renderCheck(checks.isThuTien)}
                    ${renderCheck(checks.isChuaHuy)}
                    ${renderCheck(checks.isChuaTra)}
                    ${renderCheck(checks.isDaXuat)}
                    ${renderCheck(isOverallValid)}
                </tr>
            `;
        });

        tableHTML += '</tbody></table></div></div>';
        container.innerHTML = tableHTML;
    },

    // *** MODIFIED FUNCTION (v3.21) - SỬA LỖI CÚ PHÁP ***
    renderUserStatsTable(users) {
        const container = document.getElementById('user-stats-container');
        if (!container) return;

        if (!users || users.length === 0) {
            container.innerHTML = '<p class="text-gray-500">Không có dữ liệu người dùng.</p>';
            return;
        }

        const sortState = appState.sortState.user_stats || { key: 'lastLogin', direction: 'desc' };
        const { key, direction } = sortState;

        const sortedUsers = [...users].sort((a, b) => {
            let valA = a[key];
             let valB = b[key];

            if (key === 'lastLogin') {
                valA = valA instanceof Date ? valA.getTime() : 0;
                valB = valB instanceof Date ? valB.getTime() : 0;
            }
            else if (key === 'loginCount' || key === 'actionsTaken') {
                 valA = Number(valA) || 0;
                 valB = Number(valB) || 0;
            }

            if (valA < valB) return direction === 'asc' ? -1 : 1;
            if (valA > valB) return direction === 'asc' ? 1 : -1;
            return 0;
        });

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;

        let tableHTML = `
            <div class="overflow-x-auto max-h-[600px]">
                <table class="min-w-full text-sm table-bordered table-striped" data-table-type="user_stats">
                     <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold sticky top-0">
                        <tr>
                            <th class="${headerClass('email')}" data-sort="email">Email <span class="sort-indicator"></span></th>
                            <th class="${headerClass('loginCount')} text-right" data-sort="loginCount">Lượt truy cập <span class="sort-indicator"></span></th>
                            <th class="${headerClass('actionsTaken')} text-right" data-sort="actionsTaken">Lượt sử dụng <span class="sort-indicator"></span></th>
                             <th class="${headerClass('lastLogin')} text-right" data-sort="lastLogin">Lần cuối truy cập <span class="sort-indicator"></span></th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        sortedUsers.forEach(user => {
            const lastLoginDate = user.lastLogin instanceof Date ? user.lastLogin : null;
            const formattedLastLogin = lastLoginDate
                ? `${lastLoginDate.toLocaleDateString('vi-VN')} ${lastLoginDate.toLocaleTimeString('vi-VN')}`
                 : 'Chưa rõ';

            // *** SỬA LỖI CÚ PHÁP: Đã sửa cách nhúng biến vào template string ***
            tableHTML += `
                <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-medium text-gray-900">${user.email}</td>
                    <td class="px-4 py-2 text-right font-bold">${this.formatNumber(user.loginCount || 0)}</td>
                    <td class="px-4 py-2 text-right font-bold">${this.formatNumber(user.actionsTaken || 0)}</td>
                     <td class="px-4 py-2 text-right">${formattedLastLogin}</td>
                </tr>
            `;
            // *** KẾT THÚC SỬA LỖI ***
        });

        tableHTML += `</tbody></table></div>`;
        container.innerHTML = tableHTML;
    },
    // *** END MODIFIED FUNCTION ***

    // *** START: NEW FUNCTION (v3.23) ***
    /**
     * Render bảng ánh xạ tên thi đua trong Tab Khai báo.
     */
    renderCompetitionNameMappingTable() {
        const container = document.getElementById('competition-name-mapping-container');
        if (!container) return;

        const mappings = appState.competitionNameMappings || {};
        const mappingEntries = Object.entries(mappings);

        if (mappingEntries.length === 0) {
             container.innerHTML = '<p class="text-gray-500 italic">Vui lòng dán dữ liệu "Thi đua nhân viên" ở tab "Cập nhật dữ liệu" để hệ thống tự động trích xuất tên...</p>';
            return;
        }

        let tableHTML = `
            <table class="min-w-full text-sm table-bordered bg-white">
                <thead class="text-xs text-slate-800 uppercase bg-slate-100 font-bold">
                    <tr>
                        <th class="px-4 py-2 text-left w-1/2">Tên Gốc (Từ dữ liệu dán)</th>
                         <th class="px-4 py-2 text-left w-1/2">Tên Rút Gọn (Nhập để thay thế)</th>
                    </tr>
                </thead>
                <tbody>
        `;

        mappingEntries.forEach(([originalName, shortName]) => {
            tableHTML += `
                <tr class="border-t hover:bg-gray-50">
                    <td class="px-4 py-2 text-gray-600 align-top text-xs">
                         ${originalName}
                    </td>
                    <td class="px-4 py-2 align-top">
                        <input 
                            type="text" 
                            class="competition-name-input w-full p-1 border rounded-md text-sm" 
                             value="${shortName || ''}" 
                            data-original-name="${originalName}"
                            placeholder="Nhập tên rút gọn..."
                        >
                    </td>
                </tr>
            `;
        });

        tableHTML += `</tbody></table>`;
        container.innerHTML = tableHTML;
    }
    // *** END: NEW FUNCTION (v3.23) ***
};
--- END FILE: ./ui-components.js ---

--- START FILE: ./ui-luyke.js ---
// Version 2.11 - Critical Fix: Restore all missing functions and add renderLuykeEmployeeDetail
// MODULE: UI LUY KE
// Chứa các hàm render giao diện cho tab "Sức khỏe Siêu thị (Lũy kế)".

import { appState } from './state.js';
import { services } from './services.js';
import { utils } from './utils.js';
import { uiComponents } from './ui-components.js';
import { settingsService } from './modules/settings.service.js';
import { highlightService } from './modules/highlight.service.js';

export const uiLuyke = {
    // === CÁC HÀM MỞ MODAL CÀI ĐẶT CHO TỪNG BẢNG ===
    _showEfficiencySettingsModal() {
        const modal = document.getElementById('selection-modal');
        if (!modal) return;

        const allItemsConfig = settingsService.loadEfficiencyViewSettings();
        
        const listContainer = document.getElementById('selection-modal-list');
        listContainer.innerHTML = allItemsConfig.map(item => `
            <div class="selection-item">
                <input type="checkbox" id="select-item-lk-eff-${item.id}" value="${item.id}" ${item.visible ? 'checked' : ''}>
                <label for="select-item-lk-eff-${item.id}">${item.label}</label>
             </div>
        `).join('');

        document.getElementById('selection-modal-title').textContent = 'Tùy chỉnh hiển thị Hiệu quả khai thác';
        modal.dataset.settingType = 'efficiencyView';
        const searchInput = document.getElementById('selection-modal-search');
        if (searchInput) searchInput.value = '';
        
        uiComponents.toggleModal('selection-modal', true);
    },

    _showQdcSettingsModal(supermarketReport) {
        const modal = document.getElementById('selection-modal');
        if (!modal || !supermarketReport || !supermarketReport.qdc) return;

        const allItems = Object.values(supermarketReport.qdc).map(item => item.name).sort();
        const savedSettings = settingsService.loadQdcViewSettings(allItems);
        
        const listContainer = document.getElementById('selection-modal-list');
        listContainer.innerHTML = allItems.map(item => `
            <div class="selection-item">
                <input type="checkbox" id="select-item-lk-qdc-${item.replace(/[^a-zA-Z0-9]/g, '')}" value="${item}" ${savedSettings.includes(item) ? 'checked' : ''}>
                <label for="select-item-lk-qdc-${item.replace(/[^a-zA-Z0-9]/g, '')}">${item}</label>
            </div>
        `).join('');

        document.getElementById('selection-modal-title').textContent = 'Tùy chỉnh hiển thị Nhóm hàng QĐC';
        modal.dataset.settingType = 'qdcView';
        const searchInput = document.getElementById('selection-modal-search');
        if (searchInput) searchInput.value = '';
        
        uiComponents.toggleModal('selection-modal', true);
    },

    _showCategorySettingsModal(supermarketReport) {
        const modal = document.getElementById('selection-modal');
        if (!modal || !supermarketReport || !supermarketReport.nganhHangChiTiet) return;

        const allItems = Object.keys(supermarketReport.nganhHangChiTiet).sort();
        const savedSettings = settingsService.loadCategoryViewSettings(allItems);
        
        const listContainer = document.getElementById('selection-modal-list');
        listContainer.innerHTML = allItems.map(item => `
            <div class="selection-item">
                <input type="checkbox" id="select-item-lk-cat-${item.replace(/[^a-zA-Z0-9]/g, '')}" value="${item}" ${savedSettings.includes(item) ? 'checked' : ''}>
                <label for="select-item-lk-cat-${item.replace(/[^a-zA-Z0-9]/g, '')}">${item}</label>
            </div>
        `).join('');

        document.getElementById('selection-modal-title').textContent = 'Tùy chỉnh hiển thị Ngành hàng chi tiết';
        modal.dataset.settingType = 'categoryView';
        const searchInput = document.getElementById('selection-modal-search');
        if (searchInput) searchInput.value = '';
        
        uiComponents.toggleModal('selection-modal', true);
    },
    
    // === START: RESTORED FUNCTION FOR SKNV DETAIL VIEW ===
    renderLuykeEmployeeDetail(detailData, employeeData, detailContainerId) {
        const summaryContainer = document.getElementById('revenue-report-container-lk');
        const detailContainer = document.getElementById(detailContainerId);

        if (!summaryContainer || !detailContainer) return;

        summaryContainer.classList.add('hidden');
        detailContainer.classList.remove('hidden');
        
        if (!detailData || !employeeData) {
            detailContainer.innerHTML = `
                <div class="mb-4">
                     <button class="back-to-summary-btn text-blue-600 hover:underline font-semibold">‹ Quay lại bảng tổng hợp</button>
                </div>
                <p class="text-red-500">Không tìm thấy dữ liệu chi tiết cho nhân viên đã chọn.</p>
            `;
            return;
        }

        const { summary, topProductGroups, categoryChartData, byCustomer } = detailData;
        const { mucTieu } = employeeData;
        const conversionRateTarget = (mucTieu?.phanTramQD || 0) / 100;

        const renderKpiCards = () => {
             const conversionRateClass = summary.conversionRate >= conversionRateTarget ? 'is-positive' : 'is-negative';
            return `
            <div class="rt-infographic-summary mb-6">
                <div class="rt-infographic-summary-card"><div class="label">Tổng DT Thực</div><div class="value">${uiComponents.formatRevenue(summary.totalRealRevenue, 1)}</div></div>
                <div class="rt-infographic-summary-card"><div class="label">Tổng DTQĐ</div><div class="value">${uiComponents.formatRevenue(summary.totalConvertedRevenue, 1)}</div></div>
                <div class="rt-infographic-summary-card"><div class="label">Tỷ lệ QĐ</div><div class="value ${conversionRateClass}">${uiComponents.formatPercentage(summary.conversionRate)}</div></div>
                <div class="rt-infographic-summary-card"><div class="label">DT Chưa Xuất</div><div class="value">${uiComponents.formatRevenue(summary.unexportedRevenue, 1)}</div></div>
                <div class="rt-infographic-summary-card"><div class="label">Tổng Đơn Hàng</div><div class="value">${summary.totalOrders}</div></div>
                <div class="rt-infographic-summary-card"><div class="label">SL Đơn Bán Kèm</div><div class="value">${summary.bundledOrderCount}</div></div>
            </div>
            `;
        };

        const renderTopGroupsAsProgressBars = () => {
            const top5Groups = topProductGroups.slice(0, 5);
            if (!top5Groups || top5Groups.length === 0) return '<p class="text-sm text-gray-500">Không có doanh thu.</p>';
            
            const maxRevenue = top5Groups[0]?.realRevenue || 0;
            
            return top5Groups.map(group => {
                const percentage = maxRevenue > 0 ? (group.realRevenue / maxRevenue) * 100 : 0;
                return `
                <div class="luyke-detail-progress-item">
                    <div class="luyke-detail-progress-label">
                         <span class="font-semibold">${group.name}</span>
                        <span class="text-xs">SL: ${uiComponents.formatNumber(group.quantity)} | %QĐ: ${uiComponents.formatPercentage(group.conversionRate)}</span>
                    </div>
                    <div class="rt-progress-bar-container">
                        <div class="rt-progress-bar" style="width: ${percentage}%;"></div>
                     </div>
                    <div class="luyke-detail-progress-values">
                        <span>DT Thực: <strong>${uiComponents.formatRevenue(group.realRevenue)}</strong></span>
                        <span>DTQĐ: <strong>${uiComponents.formatRevenue(group.convertedRevenue)}</strong></span>
                    </div>
                 </div>
                `;
            }).join('');
        };

        const renderCustomerAccordion = () => {
            if (!byCustomer || byCustomer.length === 0) return '<p class="text-sm text-gray-500 mt-4">Không có đơn hàng nào.</p>';
            
            return byCustomer.map((customer, index) => {
                const qdClass = customer.conversionRate >= conversionRateTarget ? 'qd-above-target' : 'qd-below-target';
            
                const productListHtml = customer.products.map(p => `
                    <tr class="border-b last:border-b-0">
                        <td class="py-1 pr-2">${p.productName}</td>
                        <td class="py-1 px-2 text-right">SL: <strong>${p.quantity}</strong></td>
                         <td class="py-1 px-2 text-right">DT: <strong>${uiComponents.formatRevenue(p.realRevenue, 1)}</strong></td>
                        <td class="py-1 pl-2 text-right">DTQĐ: <strong>${uiComponents.formatRevenue(p.convertedRevenue, 1)}</strong></td>
                    </tr>
                `).join('');
                
                const tableContent = `<table class="min-w-full text-xs product-list-table"><tbody>${productListHtml}</tbody></table>`;
                
                const detailContent = customer.products.length > 8
                    ? `<div class="product-list-scrollable">${tableContent}</div>`
                    : tableContent;

                return `
                 <details class="bg-white rounded-lg shadow-sm border border-gray-200 mb-2">
                    <summary>
                        <span class="customer-name-small">${index + 1}. ${customer.name}</span>
                        <div class="order-metrics">
                             <span>SL: <strong>${customer.totalQuantity}</strong></span>
                            <span>DT Thực: <strong class="text-gray-900">${uiComponents.formatRevenue(customer.totalRealRevenue, 1)} Tr</strong></span>
                            <span>DTQĐ: <strong class="text-blue-600">${uiComponents.formatRevenue(customer.totalConvertedRevenue, 1)} Tr</strong></span>
                            <span>%QĐ: <strong class="${qdClass}">${uiComponents.formatPercentage(customer.conversionRate)}</strong></span>
                         </div>
                        <span class="accordion-arrow">▼</span>
                    </summary>
                    <div class="border-t border-gray-200 p-3 bg-gray-50">
                        ${detailContent}
                     </div>
                </details>
                `;
            }).join('');
        };
        
        const headerHtml = `
            <div class="mb-4 flex justify-between items-center">
                <button class="back-to-summary-btn text-blue-600 hover:underline font-semibold">‹ Quay lại bảng tổng hợp</button>
                <button id="capture-dtnv-lk-detail-btn" class="action-btn action-btn--capture" title="Chụp ảnh chi tiết">
                     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828-.828A2 2 0 0 1 3.172 4H2z"/><path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"/></svg>
                    <span>Chụp ảnh</span>
                </button>
            </div>
            <div id="dtnv-lk-capture-area">
                <div class="p-4 mb-6 bg-white text-gray-800 rounded-lg shadow-lg border luyke-detail-header">
                    <h3>${employeeData.hoTen} - ${employeeData.maNV}</h3>
                </div>
                
                ${renderKpiCards()}

                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                    
                     <div class="bg-white p-4 rounded-lg shadow-md border">
                        <h4 class="text-md font-bold text-gray-700 border-b pb-2 mb-3">Top 5 Nhóm Hàng Doanh Thu Cao</h4>
                        <div class="space-y-3">
                            ${renderTopGroupsAsProgressBars()}
                         </div>
                    </div>
                    
                    <div class="bg-white p-4 rounded-lg shadow-md border">
                        <h4 class="text-md font-bold text-gray-700 mb-2">Tỷ Trọng Doanh Thu Ngành Hàng</h4>
                         <div class="luyke-detail-chart-container">
                            <canvas id="luyke-employee-chart"></canvas>
                        </div>
                    </div>
                </div>
                 <div class="customer-accordion-luyke">
                    <h4 class="text-lg font-bold text-gray-800 mb-3">Chi Tiết Theo Khách Hàng</h4>
                    ${renderCustomerAccordion()}
                </div>
            </div>`;

        detailContainer.innerHTML = headerHtml;

        const ctx = document.getElementById('luyke-employee-chart')?.getContext('2d');
        if (ctx && categoryChartData && categoryChartData.length > 0) {
            if (appState.charts['luyke-employee-chart']) {
                 appState.charts['luyke-employee-chart'].destroy();
            }
            const sortedChartData = [...categoryChartData].sort((a,b) => b.revenue - a.revenue);
            const topData = sortedChartData.slice(0, 10);
            
            appState.charts['luyke-employee-chart'] = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: topData.map(d => d.name),
                     datasets: [{
                        label: 'Doanh thu',
                        data: topData.map(d => d.revenue / 1000000),
                        backgroundColor: '#3b82f6',
                        borderRadius: 4,
                     }]
                },
                options: {
                    indexAxis: 'x',
                    responsive: true,
                    maintainAspectRatio: false,
                     plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                 label: context => `${context.label}: ${uiComponents.formatRevenue(context.raw * 1000000)} Tr`
                            }
                        },
                        datalabels: {
                             anchor: 'end',
                            align: 'end',
                            formatter: (value) => uiComponents.formatRevenue(value * 1000000),
                            color: '#4b5563',
                             font: { weight: 'bold', size: 10 }
                        }
                    },
                    scales: {
                        y: { beginAtZero: true }
                     }
                },
                plugins: [ChartDataLabels]
            });
        }
    },
    // === END: RESTORED FUNCTION ===

    renderCompetitionSummaryCounter: (data) => {
        const summary = {
            total: data.length,
            dat: data.filter(d => d.hoanThanhValue >= 100).length,
            doanhThuCount: data.filter(d => d.type === 'doanhThu').length,
            soLuongCount: data.filter(d => d.type === 'soLuong').length,
        };
        
        const totalHtml = `<strong class="text-blue-600">${summary.total}</strong>`;
        const datHtml = `<strong class="text-blue-600">${summary.dat}</strong>`;
        const chuaDatHtml = `<strong class="text-red-600">${summary.total - summary.dat}</strong>`;
        const dtHtml = `<strong class="text-blue-600">${summary.doanhThuCount}</strong>`;
        const slHtml = `<strong class="text-blue-600">${summary.soLuongCount}</strong>`;

        return `(<span class="font-normal text-gray-500">Tổng:</span> ${totalHtml}, 
                <span class="font-normal text-gray-500">Đạt:</span> ${datHtml}, 
                <span class="font-normal text-gray-500">Chưa đạt:</span> ${chuaDatHtml}, 
                <span class="font-normal text-gray-500">DT:</span> ${dtHtml}, 
                <span class="font-normal text-gray-500">SL:</span> ${slHtml})`;
    },
    
    displayHealthKpiTable: (pastedData, goals) => {
        const { mainKpis, comparisonData, dtDuKien, dtqdDuKien, luotKhachData } = pastedData;
        
        const competitionSummary = { dat: 0, total: 0 };
        if (appState.competitionData && appState.competitionData.length > 0) {
            competitionSummary.total = appState.competitionData.length;
            competitionSummary.dat = appState.competitionData.filter(d => (parseFloat(String(d.hoanThanh).replace('%','')) || 0) >= 100).length;
        }

        if (!mainKpis || Object.keys(mainKpis).length === 0) {
            const supermarketReport = services.aggregateReport(appState.masterReportData.luyke);
            const cardData = {
                dtThucLK: supermarketReport.doanhThu,
                dtQdLK: supermarketReport.doanhThuQuyDoi,
                phanTramQd: supermarketReport.doanhThu > 0 ? (supermarketReport.doanhThuQuyDoi / supermarketReport.doanhThu) - 1 : 0,
                dtGop: supermarketReport.doanhThuTraGop,
                phanTramGop: supermarketReport.doanhThu > 0 ? supermarketReport.doanhThuTraGop / supermarketReport.doanhThu : 0,
                dtThucDuKien: 0,
                dtQdDuKien: 0,
                phanTramTargetQd: 0,
                phanTramTargetThuc: 0,
            };
            uiLuyke.renderLuykeKpiCards(cardData, comparisonData, luotKhachData, appState.masterReportData.luyke, goals, competitionSummary);
            return;
        }
        
        const cleanValue = (str) => (typeof str === 'string' ? parseFloat(str.replace(/,|%/g, '')) : (typeof str === 'number' ? str : 0));
        
        const dtThucLK = cleanValue(mainKpis['Thực hiện DT thực']) * 1000000;
        const dtQdLK = cleanValue(mainKpis['Thực hiện DTQĐ']) * 1000000;
        const phanTramGopRaw = cleanValue(mainKpis['Tỷ Trọng Trả Góp']);
        const dtGop = dtThucLK * (phanTramGopRaw / 100);
        const phanTramQd = dtThucLK > 0 ? (dtQdLK / dtThucLK) - 1 : 0;
        const phanTramGop = dtThucLK > 0 ? dtGop / dtThucLK : 0;
        
        const targetThuc = (parseFloat(goals.doanhThuThuc) || 0) * 1000000;
        const phanTramTargetThuc = targetThuc > 0 ? (dtDuKien * 1000000) / targetThuc : 0;
        const phanTramTargetQd = (cleanValue(mainKpis['% HT Target Dự Kiến (QĐ)']) || 0) / 100;

        const luykeCardData = { 
            dtThucLK, dtQdLK, dtGop, phanTramQd, phanTramGop, 
            phanTramTargetThuc, phanTramTargetQd,
            dtThucDuKien: dtDuKien * 1000000,
             dtQdDuKien: dtqdDuKien * 1000000,
        };
        
        uiLuyke.renderLuykeKpiCards(luykeCardData, comparisonData, luotKhachData, appState.masterReportData.luyke, goals, competitionSummary);
    },

    displayCompetitionResultsFromLuyKe: (text, viewType = 'summary') => {
        const container = document.getElementById('luyke-competition-infographic-container');
        if (!container) return;

        if (!text || !text.trim()) {
            container.innerHTML = '<p class="text-gray-500 font-bold col-span-2">Vui lòng dán "Data lũy kế" ở tab Data để xem chi tiết.</p>';
            return;
        }

        appState.competitionData = services.parseCompetitionDataFromLuyKe(text);
        
        const data = appState.competitionData.map(item => {
            const hoanThanhValue = (parseFloat(String(item.hoanThanh).replace('%', '')) || 0);
            return { ...item, hoanThanhValue: hoanThanhValue };
        });

        if (data.length === 0) {
            container.innerHTML = '<p class="text-yellow-600 font-bold col-span-2">Không tìm thấy dữ liệu thi đua trong văn bản đã dán.</p>';
            return;
        }
        
        const summaryEl = document.getElementById('luyke-competition-summary');
        if (summaryEl) {
             summaryEl.innerHTML = uiLuyke.renderCompetitionSummaryCounter(data);
        }
        
        container.innerHTML = uiLuyke.renderLuykeCompetitionInfographic(data, viewType);
    },
    
    renderLuykeCompetitionInfographic(data, viewType) {
        
        const sortData = (items) => {
            return [...items].sort((a, b) => b.hoanThanhValue - a.hoanThanhValue);
        };

        const renderRow = (items, title, titleClass) => {
            if (items.length === 0) return '';
    
            const today = new Date();
            const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
            const daysRemaining = Math.max(daysInMonth - today.getDate(), 1);
            
            const sortedItems = sortData(items);

            const achievedCount = items.filter(item => item.hoanThanhValue >= 100).length;
            const unachievedCount = items.length - achievedCount;
            
            const achievedHtml = `<strong class="text-blue-600">${achievedCount}</strong>`;
            const unachievedHtml = `<strong class="text-red-600">${unachievedCount}</strong>`;
            const counterText = `<span class="text-sm font-normal text-gray-700">(Đạt: ${achievedHtml} / Cần nỗ lực: ${unachievedHtml})</span>`;
    
            const itemsHtml = sortedItems.map(item => {
                const hoanThanhValue = item.hoanThanhValue;
                
                let dailyTarget = 0;
                const targetRemaining = item.target - item.luyKe;
                
                if (item.target > 0 && targetRemaining > 0 && daysRemaining > 0) {
                     dailyTarget = targetRemaining / daysRemaining;
                }
                
                const targetClass = dailyTarget > 0 ? 'text-red-600' : 'text-green-600';
    
                return `
                    <div class="tdv-item-card">
                         <p class="tdv-item-card__title">${item.name}</p>
                        <div class="tdv-progress-bar-container">
                            <div class="tdv-progress-bar ${hoanThanhValue >= 100 ? 'tdv-progress-bar--blue' : 'tdv-progress-bar--yellow'}" style="width: ${Math.min(hoanThanhValue, 100)}%;"></div>
                             <span class="tdv-progress-bar__text">${uiComponents.formatPercentage(hoanThanhValue / 100)}</span>
                        </div>
                        <div class="tdv-item-card__details">
                            <span>Lũy kế: <strong>${uiComponents.formatNumberOrDash(item.luyKe)}</strong></span>
                            <span>Target: <strong>${uiComponents.formatNumberOrDash(item.target)}</strong></span>
                             <span class="font-bold ${targetClass}">Mục tiêu/ngày: <strong>${uiComponents.formatNumberOrDash(dailyTarget)}</strong></span>
                        </div>
                    </div>
                `;
            }).join('');
    
            return `
                <div class="tdv-row" data-capture-group="comp-row-${title.replace(/\s/g, '-')}" data-capture-columns="2">
                     <h3 class="tdv-row-title ${titleClass}">${title} ${counterText}</h3>
                    <div class="tdv-row-body grid grid-cols-2 gap-4">${itemsHtml}</div>
                </div>
            `;
        };
    
        if (viewType === 'summary') {
            const dataDoanhThu = data.filter(d => d.type === 'doanhThu');
            const dataSoLuong = data.filter(d => d.type === 'soLuong');
            return `
                <div class="tdv-rows-container space-y-6">
                    ${renderRow(dataDoanhThu, 'Thi Đua Doanh Thu', 'tdv-row-title--prize')}
                    ${renderRow(dataSoLuong, 'Thi Đua Số Lượng', 'tdv-row-title--soon-prize')}
                </div>
            `;
        } else {
             const completed = data.filter(d => d.hoanThanhValue >= 100);
            const pending = data.filter(d => d.hoanThanhValue < 100);
            return `
                <div class="tdv-rows-container space-y-6">
                    ${renderRow(completed, 'Các Chương Trình Đã Đạt Mục Tiêu', 'tdv-row-title--prize')}
                    ${renderRow(pending, 'Các Chương Trình Cần Nỗ Lực Thêm', 'tdv-row-title--effort')}
                </div>
             `;
        }
    },
    
    renderChuaXuatTable: (reportData) => {
        const container = document.getElementById('luyke-unexported-revenue-content');
        if (!container) return;
        if (!reportData || reportData.length === 0) {
            container.innerHTML = '<p class="text-gray-500 text-center font-bold">Không có đơn hàng nào chưa xuất.</p>';
            return;
        }

        const sortState = appState.sortState.luyke_chuaxuat || { key: 'doanhThuQuyDoi', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = [...reportData].sort((a, b) => {
             const valA = a[key] || 0; const valB = b[key] || 0;
            return direction === 'asc' ? valA - valB : valB - valA;
        });

        const totals = reportData.reduce((acc, item) => {
            acc.soLuong += item.soLuong;
            acc.doanhThuThuc += item.doanhThuThuc;
            acc.doanhThuQuyDoi += item.doanhThuQuyDoi;
            return acc;
        }, { soLuong: 0, doanhThuThuc: 0, doanhThuQuyDoi: 0 });

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;
        
        container.innerHTML = `<div class="overflow-x-auto"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="luyke_chuaxuat">
            <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold"><tr>
                <th class="${headerClass('nganhHang')}" data-sort="nganhHang">Ngành hàng</th>
                <th class="${headerClass('soLuong')} text-right" data-sort="soLuong">Số lượng</th>
                <th class="${headerClass('doanhThuThuc')} text-right" data-sort="doanhThuThuc">Doanh thu thực</th>
                 <th class="${headerClass('doanhThuQuyDoi')} text-right" data-sort="doanhThuQuyDoi">Doanh thu QĐ</th></tr>
            </thead>
            <tbody>${sortedData.map(item => `
                <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-semibold">${item.nganhHang}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.soLuong)}</td>
                     <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.doanhThuThuc)}</td>
                    <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatRevenue(item.doanhThuQuyDoi)}</td>
                </tr>`).join('')}
            </tbody>
            <tfoot class="table-footer font-bold"><tr>
                <td class="px-4 py-2">Tổng</td>
                 <td class="px-4 py-2 text-right">${uiComponents.formatNumber(totals.soLuong)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuThuc)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuQuyDoi)}</td>
            </tr></tfoot></table></div>`;
    },

    renderLuykeKpiCards: (luykeData, comparisonData, luotKhachData, masterReportDataLuyke, goals, competitionSummary) => {
        const { dtThucLK, dtQdLK, dtGop, phanTramQd, phanTramGop, phanTramTargetThuc, phanTramTargetQd, dtThucDuKien, dtQdDuKien } = luykeData;

        document.getElementById('luyke-kpi-dt-thuc-main').textContent = uiComponents.formatNumber((dtThucLK || 0) / 1000000, 0);
        document.getElementById('luyke-kpi-dt-thuc-sub1').innerHTML = `DK: <span class="font-bold">${uiComponents.formatNumber((dtThucDuKien || 0) / 1000000, 0)}</span> / Target: <span class="font-bold">${uiComponents.formatNumber(goals?.doanhThuThuc || 0)}</span>`;

        document.getElementById('luyke-kpi-dt-qd-main').textContent = uiComponents.formatNumber((dtQdLK || 0) / 1000000, 0);
        document.getElementById('luyke-kpi-dt-qd-sub1').innerHTML = `DK: <span class="font-bold">${uiComponents.formatNumber((dtQdDuKien || 0) / 1000000, 0)}</span> / Target: <span class="font-bold">${uiComponents.formatNumber(goals?.doanhThuQD || 0)}</span>`;
        
        document.getElementById('luyke-kpi-ht-target-qd-main').textContent = uiComponents.formatPercentage(phanTramTargetQd || 0);
        document.getElementById('luyke-kpi-ht-target-thuc-sub').innerHTML = `DT Thực: <span class="font-bold">${uiComponents.formatPercentage(phanTramTargetThuc || 0)}</span>`;

        document.getElementById('luyke-kpi-tl-qd-main').textContent = uiComponents.formatPercentage(phanTramQd || 0);
        document.getElementById('luyke-kpi-tl-qd-sub').innerHTML = `Mục tiêu: <span class="font-bold">${uiComponents.formatNumber(goals?.phanTramQD || 0)}%</span>`;
        document.getElementById('luyke-kpi-dt-tc-main').textContent = uiComponents.formatNumber((dtGop || 0) / 1000000, 0);
        document.getElementById('luyke-kpi-dt-tc-sub').innerHTML = `% thực trả chậm: <span class="font-bold">${uiComponents.formatPercentage(phanTramGop || 0)}</span>`;
        
        const chuaXuatQuyDoi = masterReportDataLuyke.reduce((sum, item) => sum + (item.doanhThuQuyDoiChuaXuat || 0), 0);
        document.getElementById('luyke-kpi-dtqd-chua-xuat-main').textContent = uiComponents.formatNumber(chuaXuatQuyDoi / 1000000, 0);
        
        const tyLeThiDuaDat = competitionSummary.total > 0 ? competitionSummary.dat / competitionSummary.total : 0;
        document.getElementById('luyke-kpi-thidua-main').textContent = uiComponents.formatPercentage(tyLeThiDuaDat);
        document.getElementById('luyke-kpi-thidua-sub').innerHTML = `<span class="font-bold">${competitionSummary.dat}/${competitionSummary.total}</span> Ngành`;

        const formatComparisonPercentage = (percentageString) => {
            if (!percentageString || typeof percentageString !== 'string') return 'N/A';
            const numericValue = parseFloat(percentageString.replace('%', ''));
            if (isNaN(numericValue)) return 'N/A';
            return Math.round(numericValue) + '%';
        };
        const formattedDtPercentage = formatComparisonPercentage(comparisonData.percentage);
        const formattedLkPercentage = formatComparisonPercentage(luotKhachData.percentage);

        document.getElementById('luyke-kpi-dtck-main').textContent = formattedDtPercentage;
        document.getElementById('luyke-kpi-dtck-sub').innerHTML = `Doanh thu: <span class="font-bold">${uiComponents.formatNumber(comparisonData.value || 0)} | ${formattedDtPercentage}</span>`;
        document.getElementById('luyke-kpi-lkck-sub').innerHTML = `Lượt khách: <span class="font-bold">${uiComponents.formatNumber(luotKhachData.value || 0)} | ${formattedLkPercentage}</span>`;
    },

    renderLuykeCategoryDetailsTable: (data, numDays) => {
        const container = document.getElementById('luyke-category-details-content');
        const cardHeader = container.previousElementSibling;
        if (!container || !cardHeader || !data || !data.nganhHangChiTiet) { container.innerHTML = '<p class="text-gray-500 font-bold">Không có dữ liệu.</p>'; return; }
        
        const allItems = Object.keys(data.nganhHangChiTiet).sort();
        const visibleItems = settingsService.loadCategoryViewSettings(allItems);
        
        if (Object.keys(data.nganhHangChiTiet).length === 0) {
            container.innerHTML = '<p class="text-gray-500 font-bold">Không có dữ liệu.</p>'; return;
        }

        const sortState = appState.sortState.luyke_nganhhang || { key: 'revenue', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = Object.entries(data.nganhHangChiTiet)
            .map(([name, values]) => ({ name, ...values }))
            .filter(item => visibleItems.includes(item.name)) 
            .sort((a, b) => direction === 'asc' ? a[key] - b[key] : b[key] - a[key]);

        const totals = sortedData.reduce((acc, item) => {
            acc.quantity += item.quantity;
            acc.revenue += item.revenue;
            return acc;
        }, { quantity: 0, revenue: 0 });

        if (!cardHeader.querySelector('.settings-trigger-btn')) {
            cardHeader.classList.add('flex', 'items-center', 'justify-between');
            cardHeader.innerHTML = `<span>NGÀNH HÀNG CHI TIẾT</span>` + uiComponents.renderSettingsButton('lk-cat');
            setTimeout(() => {
                document.getElementById('settings-btn-lk-cat').addEventListener('click', () => {
                    uiLuyke._showCategorySettingsModal(data);
                });
            }, 0);
        }

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;
        container.innerHTML = `<div class="overflow-x-auto"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="luyke_nganhhang">
             <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold"><tr>
                <th class="${headerClass('name')}" data-sort="name">Ngành hàng</th>
                <th class="${headerClass('quantity')} text-right" data-sort="quantity">Số lượng</th>
                <th class="${headerClass('revenue')} text-right" data-sort="revenue">Doanh thu</th>
                <th class="${headerClass('avgQuantity')} text-right" data-sort="avgQuantity">SL TB/ngày</th>
                <th class="${headerClass('avgPrice')} text-right" data-sort="avgPrice">Đơn giá TB</th></tr>
             </thead>
            <tbody>${sortedData.map(item => `
                <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-semibold">${item.name}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.quantity)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.revenue)}</td>
                     <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatNumberOrDash(item.quantity / numDays, 1)}</td>
                    <td class="px-4 py-2 text-right font-bold text-green-600">${uiComponents.formatRevenue(item.donGia)}</td>
                </tr>`).join('')}
            </tbody>
            <tfoot class="table-footer font-bold"><tr>
                <td class="px-4 py-2">Tổng</td>
                 <td class="px-4 py-2 text-right">${uiComponents.formatNumber(totals.quantity)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.revenue)}</td>
                <td colspan="2"></td>
            </tr></tfoot></table></div>`;
    },

    renderLuykeQdcTable: (data, numDays) => {
        const container = document.getElementById('luyke-qdc-content');
        const cardHeader = container.previousElementSibling;
        if (!container || !cardHeader || !data || !data.qdc) { container.innerHTML = `<p class="text-gray-500 font-bold">Không có dữ liệu.</p>`; return; }
        
        const qdcData = Object.entries(data.qdc).map(([key, value]) => ({ id: key, ...value }));
        const allItems = qdcData.map(item => item.name);
        const visibleItems = settingsService.loadQdcViewSettings(allItems);

        const sortState = appState.sortState.luyke_qdc || { key: 'dtqd', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = [...qdcData]
            .filter(item => visibleItems.includes(item.name))
            .sort((a,b) => direction === 'asc' ? a[key] - b[key] : b[key] - a[key]);
        
        if (!cardHeader.querySelector('.settings-trigger-btn')) {
             cardHeader.classList.add('flex', 'items-center', 'justify-between');
            cardHeader.innerHTML = `<span>NHÓM HÀNG QUY ĐỔI CAO</span>` + uiComponents.renderSettingsButton('lk-qdc');
            setTimeout(() => {
                 document.getElementById('settings-btn-lk-qdc').addEventListener('click', () => {
                    uiLuyke._showQdcSettingsModal(data);
                });
            }, 0);
        }

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;

        container.innerHTML = `<div class="overflow-x-auto"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="luyke_qdc">
            <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold"><tr>
                <th class="${headerClass('name')}" data-sort="name">Nhóm hàng</th>
                <th class="${headerClass('sl')} text-right" data-sort="sl">SL</th>
                <th class="${headerClass('dtqd')} text-right" data-sort="dtqd">DTQĐ</th>
                <th class="${headerClass('avgSl')} text-right" data-sort="avgSl">SL TB/Ngày</th></tr>
            </thead>
            <tbody>${sortedData.map(item => `
                 <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-semibold">${item.name}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.sl)}</td>
                    <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatRevenue(item.dtqd)}</td>
                    <td class="px-4 py-2 text-right font-bold text-green-600">${uiComponents.formatNumber(item.sl / numDays, 1)}</td></tr>`
                 ).join('')}
            </tbody></table></div>`;
    },
    
    renderLuykeEfficiencyTable: (data, goals) => {
        const container = document.getElementById('luyke-efficiency-content');
        const cardHeader = container.previousElementSibling;

        if (!container || !cardHeader || !data || !goals) { 
            if(container) container.innerHTML = `<p class="text-gray-500 font-bold">Không có dữ liệu.</p>`; 
            return; 
        }
        
        const allItemsConfig = settingsService.loadEfficiencyViewSettings();
        
        const goalKeyMap = {
            pctPhuKien: 'phanTramPhuKien',
            pctGiaDung: 'phanTramGiaDung',
            pctMLN: 'phanTramMLN',
            pctSim: 'phanTramSim',
            pctVAS: 'phanTramVAS',
            pctBaoHiem: 'phanTramBaoHiem'
        };

        const allItems = allItemsConfig
            .filter(item => item.id.startsWith('pct'))
            .map(config => ({
                 ...config,
                value: data[config.id],
                target: goals[goalKeyMap[config.id]]
            }));
        
        const createRow = (label, value, target) => {
            const isBelow = value < ((target || 0) / 100); 
            
            return `<tr class="border-t">
                <td class="px-4 py-2 font-semibold text-gray-800">${label}</td>
                 <td class="px-4 py-2 text-right font-bold text-lg ${isBelow ? 'cell-performance is-below' : 'text-green-600'}">${uiComponents.formatPercentage(value || 0)}</td>
                <td class="px-4 py-2 text-right text-gray-600">${target || 0}%</td>
            </tr>`;
        };
        
        if (!cardHeader.querySelector('.settings-trigger-btn')) {
            cardHeader.classList.add('flex', 'items-center', 'justify-between');
            cardHeader.innerHTML = `<span>HIỆU QUẢ KHAI THÁC SIÊU THỊ</span>` + uiComponents.renderSettingsButton('lk-eff');
            
            setTimeout(() => {
                document.getElementById('settings-btn-lk-eff').addEventListener('click', () => {
                     uiLuyke._showEfficiencySettingsModal();
                });
            }, 0);
        }
        
        container.innerHTML = `
            <div class="overflow-x-auto">
                <table class="min-w-full text-sm table-bordered">
                    <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                        <tr>
                             <th class="px-4 py-3 text-left">Chỉ số</th>
                            <th class="px-4 py-3 text-right">Thực hiện</th>
                             <th class="px-4 py-3 text-right">Mục tiêu</th>
                        </tr>
                     </thead>
                    <tbody>
                        ${allItems
                             .filter(item => item.visible) // Lọc theo cài đặt hiển thị
                            .map(item => createRow(item.label, item.value, item.target))
                            .join('')}
                    </tbody>
                </table>
             </div>`;
    },

    updateLuykeSupermarketTitle: (warehouse, date) => {
        const titleEl = document.getElementById('luyke-supermarket-title');
        if (titleEl) titleEl.textContent = `Báo cáo lũy kế ${warehouse ? 'kho ' + warehouse : 'toàn bộ'} - Tính đến ${date.toLocaleDateString('vi-VN')}`;
    },
};
--- END FILE: ./ui-luyke.js ---

--- START FILE: ./ui-realtime.js ---
// Version 4.2 - Add uiCompetition import
// MODULE: UI REALTIME
// Chứa TOÀN BỘ logic và hàm render giao diện cho tab "Doanh thu Realtime".

import { appState } from './state.js';
import { ui } from './ui.js'; // Vẫn cần import ui chính để dùng các hàm common
import { services } from './services.js';
import { settingsService } from './modules/settings.service.js';
import { highlightService } from './modules/highlight.service.js';
import { dragDroplisteners } from './event-listeners/listeners-dragdrop.js';
import { uiComponents } from './ui-components.js'; // Import uiComponents thay vì ui
import { utils } from './utils.js'; // Import utils
import { uiCompetition } from './ui-competition.js'; // <<< *** ĐÃ THÊM IMPORT ***

export const uiRealtime = {
    render() {
        console.log("[CHẨN ĐOÁN] Bắt đầu render() trong 'ui-realtime.js' (đã gộp)."); //

        if (appState.danhSachNhanVien.length === 0) {
            uiComponents.togglePlaceholder('realtime-section', true); // Sử dụng uiComponents
            return; //
        }
        uiComponents.togglePlaceholder('realtime-section', false); // Sử dụng uiComponents

        const selectedWarehouse = document.getElementById('realtime-filter-warehouse')?.value || ''; // Thêm ? và || ''
        this.updateRealtimeSupermarketTitle(selectedWarehouse, new Date()); //

        const activeSubTabBtn = document.querySelector('#realtime-subtabs-nav .sub-tab-btn.active'); //
        const activeSubTabId = activeSubTabBtn ? activeSubTabBtn.dataset.target : 'subtab-realtime-sieu-thi'; //

        if (appState.realtimeYCXData.length === 0) {
             this.renderRealtimeKpiCards({}, { goals: {}, timing: {} }); //
             const catDetailEl = document.getElementById('realtime-category-details-content');
             if(catDetailEl) catDetailEl.innerHTML = '<p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p>'; //
             const efficiencyEl = document.getElementById('realtime-efficiency-content');
             if(efficiencyEl) efficiencyEl.innerHTML = '<p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p>'; //
             const qdcEl = document.getElementById('realtime-qdc-content');
             if(qdcEl) qdcEl.innerHTML = '<p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p>'; //
             const unexportedEl = document.getElementById('realtime-unexported-revenue-content');
             if(unexportedEl) unexportedEl.innerHTML = '<p class="text-gray-500 font-bold">Vui lòng tải file realtime để xem chi tiết.</p>'; //
             const revenueReportEl = document.getElementById('realtime-revenue-report-container');
             if(revenueReportEl) revenueReportEl.innerHTML = ''; //
             const employeeDetailEl = document.getElementById('realtime-employee-detail-container');
             if(employeeDetailEl) employeeDetailEl.innerHTML = ''; //
             const brandReportEl = document.getElementById('realtime-brand-report-container');
             if(brandReportEl) brandReportEl.innerHTML = '<p class="text-gray-500">Vui lòng tải file realtime và chọn bộ lọc để xem dữ liệu.</p>'; //
             const competitionRtEl = document.getElementById('competition-report-container-rt');
             if(competitionRtEl) competitionRtEl.innerHTML = '<p class="text-gray-500">Vui lòng tải file realtime để xem chi tiết.</p>'; //
            return; //
        };

        const deptEl = document.getElementById('realtime-filter-department');
        const selectedDept = deptEl ? deptEl.value : ''; //
        const selectedEmployees = appState.choices.realtime_employee ? appState.choices.realtime_employee.getValue(true) : []; //

        const settings = settingsService.getRealtimeGoalSettings(selectedWarehouse); //

        appState.masterReportData.realtime = services.generateMasterReportData(appState.realtimeYCXData, settings.goals, true); //

        let filteredReport = appState.masterReportData.realtime; //
        if (selectedWarehouse) filteredReport = filteredReport.filter(nv => nv.maKho == selectedWarehouse); //
        if (selectedDept) filteredReport = filteredReport.filter(nv => nv.boPhan === selectedDept); //
        if (selectedEmployees && selectedEmployees.length > 0) filteredReport = filteredReport.filter(nv => selectedEmployees.includes(String(nv.maNV))); //

        const visibleEmployees = new Set(filteredReport.map(nv => String(nv.maNV))); //
        const filteredRealtimeYCX = appState.realtimeYCXData.filter(row => { //
            const msnvMatch = String(row.nguoiTao || '').match(/(\d+)/); //
            return msnvMatch && visibleEmployees.has(msnvMatch[1].trim()); //
        });

        const detailInfo = appState.viewingDetailFor; //
        const isViewingDetail = detailInfo && detailInfo.sourceTab === 'dtnv-rt'; //
        if (activeSubTabId === 'subtab-realtime-nhan-vien') { //
            if (isViewingDetail) {
                this.handleEmployeeDetailChange(detailInfo.employeeId); //
            } else {
                uiComponents.displayEmployeeRevenueReport(filteredReport, 'realtime-revenue-report-container', 'realtime_dt_nhanvien'); // Sử dụng uiComponents
                this.handleEmployeeDetailChange(null); //
            }
        }

        const supermarketReport = services.aggregateReport(filteredReport, selectedWarehouse); //
        this.renderRealtimeKpiCards(supermarketReport, settings); //
        this.renderRealtimeCategoryDetailsTable(supermarketReport); //
        this.renderRealtimeEfficiencyTable(supermarketReport, settings.goals); //
        this.renderRealtimeQdcTable(supermarketReport); //
        const realtimeChuaXuatReport = services.generateRealtimeChuaXuatReport(filteredRealtimeYCX); //
        this.renderRealtimeChuaXuatTable(realtimeChuaXuatReport); //
        uiComponents.displayEmployeeEfficiencyReport(filteredReport, 'realtime-efficiency-report-container', 'realtime_hieuqua_nhanvien'); // Sử dụng uiComponents
        uiComponents.displayCategoryRevenueReport(filteredReport, 'realtime-category-revenue-report-container', 'realtime'); // Sử dụng uiComponents
        this.handleBrandFilterChange(); //

        const competitionReportData = services.calculateCompetitionFocusReport( //
            appState.realtimeYCXData, //
            appState.competitionConfigs //
        );
        // *** FIX: Call uiCompetition directly ***
        uiCompetition.renderCompetitionUI('competition-report-container-rt', competitionReportData); // Sử dụng uiCompetition

        highlightService.populateHighlightFilters('realtime', filteredRealtimeYCX, filteredReport); //
        highlightService.applyHighlights('realtime'); //

        if (!isViewingDetail) {
            const efficiencyReportContainer = document.getElementById('realtime-efficiency-report-container'); //
            if (efficiencyReportContainer) {
                dragDroplisteners.initializeForContainer('realtime-efficiency-report-container'); //
            }
         }
    },

    // *** START: HÀM BỊ THIẾU ĐÃ ĐƯỢC THÊM ***
    populateRealtimeBrandCategoryFilter() {
        const categoryFilter = document.getElementById('realtime-brand-category-filter');
        if (!categoryFilter) return;

        // Lấy danh sách ngành hàng duy nhất từ dữ liệu realtime đã tải
        const categories = [...new Set(appState.realtimeYCXData
            .map(row => utils.cleanCategoryName(row.nganhHang)) // Chuẩn hóa tên ngành hàng
            .filter(Boolean)) // Loại bỏ các giá trị rỗng/null
        ].sort(); // Sắp xếp theo alphabet

        // Tạo HTML cho các options
        let html = '<option value="">Tất cả ngành hàng</option>'; // Option mặc định
        html += categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');

        // Cập nhật nội dung của select box
        categoryFilter.innerHTML = html;
        categoryFilter.value = ''; // Reset về giá trị mặc định

        // Sau khi cập nhật category, gọi hàm cập nhật brand để đảm bảo danh sách hãng cũng được cập nhật tương ứng
        this.handleBrandFilterChange();
    },
    // *** END: HÀM BỊ THIẾU ĐÃ ĐƯỢC THÊM ***

    handleEmployeeDetailChange(employeeId) {
        const revenueContainer = document.getElementById('realtime-revenue-report-container'); //
        const detailContainer = document.getElementById('realtime-employee-detail-container'); //

        if (!revenueContainer || !detailContainer) return; //

        if (!employeeId) {
            revenueContainer.classList.remove('hidden'); //
            detailContainer.classList.add('hidden'); //
            detailContainer.innerHTML = ''; //
            return; //
        }

        revenueContainer.classList.add('hidden'); //
        detailContainer.classList.remove('hidden'); //

        const employeeInfo = appState.employeeMaNVMap.get(String(employeeId)); //
        const employeeName = employeeInfo ? uiComponents.getShortEmployeeName(employeeInfo.hoTen, employeeInfo.maNV) : `NV ${employeeId}`; // Sử dụng uiComponents
        const detailData = services.generateRealtimeEmployeeDetailReport(employeeId, appState.realtimeYCXData); //

        this.renderRealtimeEmployeeDetail(detailData, employeeName); //
    },

    handleBrandFilterChange() {
        const categoryFilter = document.getElementById('realtime-brand-category-filter'); //
        const brandFilter = document.getElementById('realtime-brand-filter'); //
        const activeDthangViewBtn = document.querySelector('#dthang-realtime-view-selector .view-switcher__btn.active'); //
        const dthangViewType = activeDthangViewBtn ? activeDthangViewBtn.dataset.view : 'brand'; //

        if (!categoryFilter || !brandFilter) return; //

        const selectedCategory = categoryFilter.value; //

        uiComponents.updateBrandFilterOptions(selectedCategory); // Gọi hàm updateBrandFilterOptions từ uiComponents

        const selectedBrand = brandFilter.value; //
        const reportData = services.generateRealtimeBrandReport(appState.realtimeYCXData, selectedCategory, selectedBrand); //
        this.renderRealtimeBrandReport(reportData, dthangViewType); //
    },

    updateRealtimeSupermarketTitle: (warehouse, dateTime) => {
        const titleEl = document.getElementById('realtime-supermarket-title'); //
        if(titleEl) titleEl.textContent = `Báo cáo Realtime ${warehouse ? 'kho ' + warehouse : 'toàn bộ'} - ${dateTime.toLocaleTimeString('vi-VN')} ${dateTime.toLocaleDateString('vi-VN')}`; //
    },

    _showEfficiencySettingsModal() { //
        const modal = document.getElementById('selection-modal'); //
        if (!modal) return; //

        const allItemsConfig = settingsService.loadEfficiencyViewSettings(); //

        const listContainer = document.getElementById('selection-modal-list'); //
        if (!listContainer) return;
        listContainer.innerHTML = allItemsConfig.map(item => `
            <div class="selection-item">
                <input type="checkbox" id="select-item-rt-eff-${item.id}" value="${item.id}" ${item.visible ? 'checked' : ''}>
                <label for="select-item-rt-eff-${item.id}">${item.label}</label>
            </div>
        `).join(''); //

        const modalTitleEl = document.getElementById('selection-modal-title');
        if(modalTitleEl) modalTitleEl.textContent = 'Tùy chỉnh hiển thị Hiệu quả khai thác'; //
        modal.dataset.settingType = 'efficiencyView'; //
        const searchInput = document.getElementById('selection-modal-search'); //
        if (searchInput) searchInput.value = ''; //

        uiComponents.toggleModal('selection-modal', true); // Sử dụng uiComponents
    },

    _showQdcSettingsModal(supermarketReport) { //
        const modal = document.getElementById('selection-modal'); //
        if (!modal || !supermarketReport || !supermarketReport.qdc) return; //

        const allItems = Object.values(supermarketReport.qdc).map(item => item.name).sort(); //
        const savedSettings = settingsService.loadQdcViewSettings(allItems); //

        const listContainer = document.getElementById('selection-modal-list'); //
        if (!listContainer) return;
        listContainer.innerHTML = allItems.map(item => `
            <div class="selection-item">
                <input type="checkbox" id="select-item-rt-qdc-${item.replace(/[^a-zA-Z0-9]/g, '')}" value="${item}" ${savedSettings.includes(item) ? 'checked' : ''}>
                <label for="select-item-rt-qdc-${item.replace(/[^a-zA-Z0-9]/g, '')}">${item}</label>
            </div>
        `).join(''); //

        const modalTitleEl = document.getElementById('selection-modal-title');
        if(modalTitleEl) modalTitleEl.textContent = 'Tùy chỉnh hiển thị Nhóm hàng QĐC'; //
        modal.dataset.settingType = 'qdcView'; //
        const searchInput = document.getElementById('selection-modal-search'); //
        if (searchInput) searchInput.value = ''; //

        uiComponents.toggleModal('selection-modal', true); // Sử dụng uiComponents
    },

    _showCategorySettingsModal(supermarketReport) { //
        const modal = document.getElementById('selection-modal'); //
        if (!modal || !supermarketReport || !supermarketReport.nganhHangChiTiet) return; //

        const allItems = Object.keys(supermarketReport.nganhHangChiTiet).sort(); //
        const savedSettings = settingsService.loadCategoryViewSettings(allItems); //

        const listContainer = document.getElementById('selection-modal-list'); //
        if (!listContainer) return;
        listContainer.innerHTML = allItems.map(item => `
            <div class="selection-item">
                <input type="checkbox" id="select-item-rt-cat-${item.replace(/[^a-zA-Z0-9]/g, '')}" value="${item}" ${savedSettings.includes(item) ? 'checked' : ''}>
                <label for="select-item-rt-cat-${item.replace(/[^a-zA-Z0-9]/g, '')}">${item}</label>
            </div>
        `).join(''); //

        const modalTitleEl = document.getElementById('selection-modal-title');
        if(modalTitleEl) modalTitleEl.textContent = 'Tùy chỉnh hiển thị Ngành hàng chi tiết'; //
        modal.dataset.settingType = 'categoryView'; //
        const searchInput = document.getElementById('selection-modal-search'); //
        if (searchInput) searchInput.value = ''; //

        uiComponents.toggleModal('selection-modal', true); // Sử dụng uiComponents
    },

    renderRealtimeKpiCards: (data, settings) => { //
        const { doanhThu, doanhThuQuyDoi, doanhThuChuaXuat, doanhThuQuyDoiChuaXuat, doanhThuTraGop, hieuQuaQuyDoi, tyLeTraCham } = data; //
        const { goals: rtGoals } = settings; //

        const targetDTT = parseFloat(rtGoals?.doanhThuThuc) || 0; //
        const targetDTQD = parseFloat(rtGoals?.doanhThuQD) || 0; //

        const dtThucMainEl = document.getElementById('rt-kpi-dt-thuc-main');
        if(dtThucMainEl) dtThucMainEl.textContent = uiComponents.formatNumber((doanhThu || 0) / 1000000, 1); //
        const dtThucSub1El = document.getElementById('rt-kpi-dt-thuc-sub1');
        if(dtThucSub1El) dtThucSub1El.innerHTML = `% HT: <span class="font-bold">${uiComponents.formatPercentage(targetDTT > 0 ? ((doanhThu || 0) / 1000000) / targetDTT : 0)}</span> / Target ngày: <span class="font-bold">${uiComponents.formatNumber(targetDTT || 0)}</span>`; //
        const dtThucSub2El = document.getElementById('rt-kpi-dt-thuc-sub2');
        if(dtThucSub2El) dtThucSub2El.innerHTML = `DT Chưa xuất: <span class="font-bold">${uiComponents.formatNumber((doanhThuChuaXuat || 0) / 1000000, 1)}</span>`; //

        const dtQdMainEl = document.getElementById('rt-kpi-dt-qd-main');
        if(dtQdMainEl) dtQdMainEl.textContent = uiComponents.formatNumber((doanhThuQuyDoi || 0) / 1000000, 1); //
        const dtQdSub1El = document.getElementById('rt-kpi-dt-qd-sub1');
        if(dtQdSub1El) dtQdSub1El.innerHTML = `% HT: <span class="font-bold">${uiComponents.formatPercentage(targetDTQD > 0 ? ((doanhThuQuyDoi || 0) / 1000000) / targetDTQD : 0)}</span> / Target ngày: <span class="font-bold">${uiComponents.formatNumber(targetDTQD || 0)}</span>`; //
        const dtQdSub2El = document.getElementById('rt-kpi-dt-qd-sub2');
        if(dtQdSub2El) dtQdSub2El.innerHTML = `DTQĐ Chưa xuất: <span class="font-bold">${uiComponents.formatNumber((doanhThuQuyDoiChuaXuat || 0) / 1000000, 1)}</span>`; //

        const tlQdMainEl = document.getElementById('rt-kpi-tl-qd-main');
        if(tlQdMainEl) tlQdMainEl.textContent = uiComponents.formatPercentage(hieuQuaQuyDoi); //
        const tlQdSubEl = document.getElementById('rt-kpi-tl-qd-sub');
        if(tlQdSubEl) tlQdSubEl.innerHTML = `Mục tiêu: <span class="font-bold">${uiComponents.formatNumber(rtGoals?.phanTramQD || 0)}%</span>`; //

        const dtTcMainEl = document.getElementById('rt-kpi-dt-tc-main');
        if(dtTcMainEl) dtTcMainEl.textContent = uiComponents.formatNumber((doanhThuTraGop || 0) / 1000000, 1); //
        const dtTcSubEl = document.getElementById('rt-kpi-dt-tc-sub');
        if(dtTcSubEl) dtTcSubEl.innerHTML = `% thực trả chậm: <span class="font-bold">${uiComponents.formatPercentage(tyLeTraCham)}</span>`; //
    },

    renderRealtimeChuaXuatTable: (reportData) => { //
        const container = document.getElementById('realtime-unexported-revenue-content'); //
        if (!container) return; //
        if (!reportData || reportData.length === 0) {
            container.innerHTML = '<p class="text-gray-500 text-center font-bold">Không có đơn hàng nào chưa xuất trong ngày.</p>'; //
            return; //
        }

        const sortState = appState.sortState.realtime_chuaxuat || { key: 'doanhThuQuyDoi', direction: 'desc' }; //
        const { key, direction } = sortState; //
        const sortedData = [...reportData].sort((a, b) => { //
            const valA = a[key] || 0; const valB = b[key] || 0; //
            return direction === 'asc' ? valA - valB : valB - valA; //
        });

        const totals = reportData.reduce((acc, item) => { //
            acc.soLuong += item.soLuong; //
            acc.doanhThuThuc += item.doanhThuThuc; //
            acc.doanhThuQuyDoi += item.doanhThuQuyDoi; //
            return acc; //
        }, { soLuong: 0, doanhThuThuc: 0, doanhThuQuyDoi: 0 }); //

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`; //

        container.innerHTML = `<div class="overflow-x-auto"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="realtime_chuaxuat">
            <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold"><tr>
                <th class="${headerClass('nganhHang')}" data-sort="nganhHang">Ngành hàng</th>
                <th class="${headerClass('soLuong')} text-right" data-sort="soLuong">Số lượng</th>
                <th class="${headerClass('doanhThuThuc')} text-right" data-sort="doanhThuThuc">Doanh thu thực</th>
                 <th class="${headerClass('doanhThuQuyDoi')} text-right" data-sort="doanhThuQuyDoi">Doanh thu QĐ</th></tr>
            </thead>
            <tbody>${sortedData.map(item => `
                 <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-semibold">${item.nganhHang}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.soLuong)}</td>
                     <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.doanhThuThuc)}</td>
                    <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatRevenue(item.doanhThuQuyDoi)}</td>
                 </tr>`).join('')}
            </tbody>
            <tfoot class="table-footer font-bold"><tr>
                <td class="px-4 py-2">Tổng</td>
                 <td class="px-4 py-2 text-right">${uiComponents.formatNumber(totals.soLuong)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuThuc)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.doanhThuQuyDoi)}</td>
             </tr></tfoot></table></div>`; //
    },

    renderRealtimeCategoryDetailsTable: (data) => { //
        const container = document.getElementById('realtime-category-details-content'); //
        const cardHeader = document.getElementById('realtime-category-title'); //
        if (!container || !cardHeader ||!data || !data.nganhHangChiTiet) { if(container) container.innerHTML = `<p class="text-gray-500 font-bold">Không có dữ liệu.</p>`; return; } //

        const { nganhHangChiTiet } = data; //
        const allItems = Object.keys(nganhHangChiTiet).sort(); //
        const visibleItems = settingsService.loadCategoryViewSettings(allItems); //

        if (Object.keys(nganhHangChiTiet).length === 0) {
            container.innerHTML = '<p class="text-gray-500 font-bold">Không có dữ liệu.</p>'; return; //
        }

        const sortState = appState.sortState.realtime_nganhhang || { key: 'revenue', direction: 'desc' }; //
        const { key, direction } = sortState; //

        const sortedData = Object.entries(nganhHangChiTiet) //
            .map(([name, values]) => ({ name, ...values })) //
            .filter(item => visibleItems.includes(item.name)) // Lọc theo cài đặt
            .sort((a, b) => b.revenue - a.revenue) //
            .slice(0, 15) //
            .sort((a, b) => direction === 'asc' ? a[key] - b[key] : b[key] - a[key]); //

        if (!cardHeader.querySelector('.settings-trigger-btn')) {
             cardHeader.classList.add('flex', 'items-center', 'justify-between'); //
            cardHeader.innerHTML = `<span>NGÀNH HÀNG CHI TIẾT</span>` + uiComponents.renderSettingsButton('rt-cat'); //
            setTimeout(() => { //
                const settingsBtn = document.getElementById('settings-btn-rt-cat');
                if(settingsBtn) settingsBtn.addEventListener('click', () => { //
                    this._showCategorySettingsModal(data); //
                });
            }, 0);
        }

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`; //

        container.innerHTML = `<div class="overflow-x-auto"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="realtime_nganhhang">
            <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold"><tr>
                <th class="${headerClass('name')}" data-sort="name">Ngành hàng</th>
                <th class="${headerClass('quantity')} text-right header-highlight" data-sort="quantity">SL</th>
                <th class="${headerClass('revenue')} text-right header-highlight" data-sort="revenue">Doanh thu thực</th>
                <th class="${headerClass('revenueQuyDoi')} text-right" data-sort="revenueQuyDoi">Doanh thu QĐ</th>
                 <th class="${headerClass('avgPrice')} text-right" data-sort="avgPrice">Đơn giá TB</th></tr>
            </thead>
            <tbody>${sortedData.map(item => `
                <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-semibold">${item.name}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.quantity)}</td>
                     <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatRevenue(item.revenue)}</td>
                    <td class="px-4 py-2 text-right font-bold text-purple-600">${uiComponents.formatRevenue(item.revenueQuyDoi)}</td>
                     <td class="px-4 py-2 text-right font-bold text-green-600">${uiComponents.formatRevenue(item.donGia)}</td>
                </tr>`).join('')}
            </tbody></table></div>`; //
    },

    renderRealtimeEfficiencyTable: (data, goals) => { //
         const container = document.getElementById('realtime-efficiency-content'); //
        const cardHeader = document.getElementById('realtime-efficiency-title'); //

        if (!container || !cardHeader || !data || !goals) { //
            if (container) container.innerHTML = `<p class="text-gray-500 font-bold">Không có dữ liệu.</p>`; //
            return; //
        }

        const allItemsConfig = settingsService.loadEfficiencyViewSettings(); //

        const goalKeyMap = {
            pctPhuKien: 'phanTramPhuKien', //
            pctGiaDung: 'phanTramGiaDung', //
            pctMLN: 'phanTramMLN', //
            pctSim: 'phanTramSim', //
            pctVAS: 'phanTramVAS', //
            pctBaoHiem: 'phanTramBaoHiem' //
        };

        const allItems = allItemsConfig //
            .filter(item => item.id.startsWith('pct')) //
            .map(config => ({ //
                ...config, //
                value: data[config.id], //
                 target: goals[goalKeyMap[config.id]] //
            }));

        const createRow = (label, value, target) => { //
            const isBelow = value < ((target || 0) / 100); //

            return `<tr class="border-t">
                <td class="px-4 py-2 font-semibold text-gray-800">${label}</td>
                <td class="px-4 py-2 text-right font-bold text-lg ${isBelow ? 'cell-performance is-below' : 'text-green-600'}">${uiComponents.formatPercentage(value || 0)}</td>
                <td class="px-4 py-2 text-right text-gray-600">${target || 0}%</td>
            </tr>`; //
        };

        if (!cardHeader.querySelector('.settings-trigger-btn')) {
            cardHeader.classList.add('flex', 'items-center', 'justify-between'); //
            cardHeader.innerHTML = `<span>HIỆU QUẢ KHAI THÁC</span>` + uiComponents.renderSettingsButton('rt-eff'); //

            setTimeout(() => { //
                const settingsBtn = document.getElementById('settings-btn-rt-eff');
                if(settingsBtn) settingsBtn.addEventListener('click', () => { //
                    this._showEfficiencySettingsModal(); //
                });
            }, 0);
        }

        container.innerHTML = `
            <div class="overflow-x-auto">
                <table class="min-w-full text-sm table-bordered">
                    <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                        <tr>
                             <th class="px-4 py-3 text-left">Chỉ số</th>
                            <th class="px-4 py-3 text-right">Thực hiện</th>
                             <th class="px-4 py-3 text-right">Mục tiêu</th>
                        </tr>
                     </thead>
                    <tbody>
                        ${allItems
                             .filter(item => item.visible) // Lọc theo cài đặt hiển thị
                            .map(item => createRow(item.label, item.value, item.target)) //
                            .join('')}
                    </tbody>
                </table>
             </div>`; //
    },

    renderRealtimeQdcTable: (data) => { //
        const container = document.getElementById('realtime-qdc-content'); //
        const cardHeader = document.getElementById('realtime-qdc-title'); //
        if (!container || !cardHeader || !data || !data.qdc) { if(container) container.innerHTML = `<p class="text-gray-500 font-bold">Không có dữ liệu.</p>`; return; } //

        const qdcData = Object.entries(data.qdc).map(([key, value]) => ({ id: key, ...value })); //
        const allItems = qdcData.map(item => item.name); //
        const visibleItems = settingsService.loadQdcViewSettings(allItems); //

        const sortState = appState.sortState.realtime_qdc || { key: 'dtqd', direction: 'desc' }; //
        const { key, direction } = sortState; //
        const sortedData = [...qdcData] //
            .filter(item => visibleItems.includes(item.name)) // Lọc theo cài đặt
            .sort((a,b) => direction === 'asc' ? a[key] - b[key] : b[key] - a[key]); //

        if (!cardHeader.querySelector('.settings-trigger-btn')) {
             cardHeader.classList.add('flex', 'items-center', 'justify-between'); //
            cardHeader.innerHTML = `<span>NHÓM HÀNG QUY ĐỔI CAO</span>` + uiComponents.renderSettingsButton('rt-qdc'); //
            setTimeout(() => { //
                const settingsBtn = document.getElementById('settings-btn-rt-qdc');
                if(settingsBtn) settingsBtn.addEventListener('click', () => { //
                    this._showQdcSettingsModal(data); //
                });
            }, 0);
        }

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`; //

        container.innerHTML = `<div class="overflow-x-auto"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="realtime_qdc">
            <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                <tr><th class="${headerClass('name')}" data-sort="name">Nhóm hàng</th>
                <th class="${headerClass('sl')} text-right" data-sort="sl">Số lượng</th>
                <th class="${headerClass('dtqd')} text-right" data-sort="dtqd">DTQĐ (Tr)</th>
                <th class="${headerClass('donGia')} text-right" data-sort="donGia">Đơn giá (Tr)</th>
                 </tr>
            </thead>
            <tbody>${sortedData.map(item => `
                 <tr class="hover:bg-gray-50">
                    <td class="px-4 py-2 font-semibold">${item.name}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.sl)}</td>
                    <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatRevenue(item.dtqd)}</td>
                    <td class="px-4 py-2 text-right font-bold text-green-600">${uiComponents.formatRevenue(item.donGia)}</td>
                </tr>`).join('')}
            </tbody></table></div>`; //
    },

    renderRealtimeEmployeeDetail: (detailData, employeeName, containerId = 'realtime-employee-detail-container') => { //
        const container = document.getElementById(containerId); //
        if (!container) return; //

        let headerHtml = ''; //
        const isMainContainer = containerId === 'realtime-employee-detail-container' || containerId.includes('luyke'); //

        if (isMainContainer) {
             headerHtml = `
                <div class="mb-4 flex justify-between items-center">
                    <button class="back-to-summary-btn text-blue-600 hover:underline font-semibold">‹ Quay lại bảng tổng hợp</button>
                    <button id="capture-dtnv-rt-detail-btn" class="action-btn action-btn--capture" title="Chụp ảnh chi tiết">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828-.828A2 2 0 0 1 3.172 4H2z"/><path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z"/></svg>
                        <span>Chụp ảnh</span>
                    </button>
                </div>
             `; //
        }

        if (!detailData) {
            container.innerHTML = headerHtml + `<div class="rt-infographic-container"><p class="text-center text-gray-500">Không có dữ liệu doanh thu cho nhân viên ${employeeName}.</p></div>`; //
            return; //
        }

        const selectedWarehouse = document.getElementById('realtime-filter-warehouse')?.value || ''; //
        const { goals } = settingsService.getRealtimeGoalSettings(selectedWarehouse); //
        const { summary, byProductGroup, byCustomer } = detailData; //
        const totalRevenue = byProductGroup.reduce((sum, g) => sum + g.realRevenue, 0); //

        const renderProductGroupProgress = () => byProductGroup.map(group => { //
            const percentage = totalRevenue > 0 ? (group.realRevenue / totalRevenue) * 100 : 0; //
            return `<div class="rt-progress-bar-item">
                <div class="rt-progress-bar-label"><span>${group.name}</span><span>${uiComponents.formatRevenue(group.realRevenue, 0)}</span></div>
                <div class="rt-progress-bar-container"><div class="rt-progress-bar" style="width: ${percentage}%;"></div></div>
            </div>`; //
        }).join(''); //

        const renderCustomerAccordion = () => byCustomer.map((customer, index) => `
            <div class="rt-customer-group">
                <details>
                     <summary class="rt-customer-header">
                        <span>${index + 1}. ${customer.name} (<span class="product-count">${customer.totalQuantity} sản phẩm</span>)</span><span class="arrow">▼</span>
                     </summary>
                    <div class="rt-customer-details">
                        <table class="w-full">
                            ${customer.products.map(p => `<tr><td>${p.productName}</td><td class="text-right font-semibold">${uiComponents.formatNumber(p.realRevenue)}</td></tr>`).join('')}
                        </table>
                    </div>
                </details>
            </div>`).join(''); //

        const conversionRateTarget = (goals?.phanTramQD || 0) / 100; //
        const conversionRateClass = summary.conversionRate >= conversionRateTarget ? 'is-positive' : 'is-negative'; //

        const contentHtml = `
            <div id="dtnv-rt-capture-area">
                <div class="rt-infographic-container" data-capture-group="dtnv-infographic">
                    <div class="rt-infographic-header text-center">
                         <h3 class="employee-name">${employeeName}</h3>
                        <p class="employee-title">Chi tiết doanh thu</p>
                    </div>
                    <div class="rt-infographic-summary">
                        <div class="rt-infographic-summary-card"><div class="label">Tổng DT Thực</div><div class="value">${uiComponents.formatRevenue(summary.totalRealRevenue, 1)}</div></div>
                         <div class="rt-infographic-summary-card"><div class="label">Tổng DTQĐ</div><div class="value">${uiComponents.formatRevenue(summary.totalConvertedRevenue, 1)}</div></div>
                         <div class="rt-infographic-summary-card"><div class="label">Tỷ lệ QĐ</div><div class="value ${conversionRateClass}">${uiComponents.formatPercentage(summary.conversionRate)}</div></div>
                        <div class="rt-infographic-summary-card"><div class="label">DT Chưa Xuất</div><div class="value">${uiComponents.formatRevenue(summary.unexportedRevenue, 1)}</div></div>
                        <div class="rt-infographic-summary-card"><div class="label">Tổng Đơn Hàng</div><div class="value">${summary.totalOrders}</div></div>
                         <div class="rt-infographic-summary-card"><div class="label">SL Đơn Bán Kèm</div><div class="value">${summary.bundledOrderCount}</div></div>
                     </div>
                    <div class="rt-infographic-grid">
                        <div class="rt-infographic-section"><h4>Nhóm hàng</h4>${renderProductGroupProgress()}</div>
                        <div class="rt-infographic-section"><h4>Chi tiết theo khách hàng</h4><div class="rt-customer-accordion">${renderCustomerAccordion()}</div></div>
                     </div>
                 </div>
            </div>`; //

        container.innerHTML = headerHtml + contentHtml; //
    },

    renderRealtimeBrandReport: (data, viewType = 'brand') => { //
        const container = document.getElementById('realtime-brand-report-container'); //
        if (!container) return; //
        const { byBrand, byEmployee } = data; //

        if (byBrand.length === 0 && byEmployee.length === 0) {
            container.innerHTML = '<p class="text-gray-500">Không có dữ liệu cho bộ lọc này.</p>'; //
            return; //
        }

        const renderTable = (title, items, headers, rowRenderer, sortStateKey) => { //
             const sortState = appState.sortState[sortStateKey] || { key: 'revenue', direction: 'desc' }; //
            const { key, direction } = sortState; //
            const sortedItems = [...items].sort((a,b) => direction === 'asc' ? (a[key] - b[key]) : (b[key] - a[key])); //

            const headerClass = (sortKey) => `px-4 py-2 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`; //
            return `<div class="overflow-x-auto"><h4 class="text-lg font-semibold text-gray-700 mb-2">${title}</h4>
                <table class="min-w-full text-sm table-bordered table-striped" data-table-type="${sortStateKey}">
                     <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                         <tr>${headers.map(h => `<th class="${headerClass(h.key)}" data-sort="${h.key}">${h.label}<span class="sort-indicator"></span></th>`).join('')}</tr>
                    </thead>
                    <tbody>${sortedItems.map(rowRenderer).join('')}</tbody>
                </table></div>`; //
        };

        const brandTable = renderTable('Thống kê theo hãng', byBrand, //
            [{label: 'Hãng', key: 'name'}, {label: 'Số lượng', key: 'quantity'}, {label: 'Doanh thu', key: 'revenue'}, {label: 'Đơn giá TB', key: 'avgPrice'}], //
            item => `<tr class="border-t">
                <td class="px-4 py-2 font-medium">${item.name}</td>
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.quantity)}</td>
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.revenue)}</td>
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.avgPrice)}</td>
             </tr>`, 'realtime_brand' //
         );

        const employeeTable = renderTable('Thống kê theo nhân viên', byEmployee, //
            [{label: 'Nhân viên', key: 'name'}, {label: 'Số lượng', key: 'quantity'}, {label: 'Doanh thu', key: 'revenue'}], //
            item => `<tr class="border-t">
                <td class="px-4 py-2 font-medium">${item.name}</td>
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumber(item.quantity)}</td>
                <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.revenue)}</td>
             </tr>`, 'realtime_brand_employee' //
        );

        const brandTableHtml = `<div id="realtime-brand-table-container" class="${viewType !== 'brand' ? 'hidden' : ''}">${brandTable}</div>`; //
        const employeeTableHtml = `<div id="realtime-employee-table-container" class="${viewType !== 'employee' ? 'hidden' : ''}">${employeeTable}</div>`; //

        container.innerHTML = brandTableHtml + employeeTableHtml; //
    }
};
--- END FILE: ./ui-realtime.js ---

--- START FILE: ./ui-sknv.js ---
// Version 6.17 - Add deep logging for layout debugging (Problem 2) & force no-wrap on employee name (Req 3)
// Version 6.16 - Add deep logging for layout debugging (Problem 2) & force no-wrap on employee name (Req 3)
// Version 6.15 - Fix pasted competition report: add min-width to th, format numbers as integers (no decimals)
// Version 6.14 - Fix pasted competition report: 1-col render, number format, column width, totals row, and scroll
// Version 6.11 - Add detailed logging to main render functions
// MODULE: UI SKNV
// Chứa các hàm render giao diện cho tab "Sức khỏe nhân viên"

import { appState } from './state.js';
import { services } from './services.js';
import { uiComponents } from './ui-components.js';
import { utils } from './utils.js';

export const uiSknv = {
    displayEmployeeIncomeReport: (reportData) => {
        console.log("[ui-sknv.js displayEmployeeIncomeReport] === Starting render ==="); // Log mới
        const container = document.getElementById('income-report-container');
        const placeholder = document.getElementById('income-report-placeholder');
        if (!container || !placeholder) {
            console.error("[ui-sknv.js displayEmployeeIncomeReport] Container or placeholder not found."); // Log mới
            return;
        }
        const hasIncomeData = reportData.some(item => (item.tongThuNhap || 0) > 0 || (item.gioCong || 0) > 0);
        console.log(`[ui-sknv.js displayEmployeeIncomeReport] Input reportData length: ${reportData?.length}, hasIncomeData: ${hasIncomeData}`); // Log mới

        if (!reportData || reportData.length === 0 || !hasIncomeData) {
            console.warn("[ui-sknv.js displayEmployeeIncomeReport] No valid income data, showing placeholder."); // Log mới
            placeholder.classList.remove('hidden'); container.innerHTML = ''; return;
        }
        placeholder.classList.add('hidden');

        let finalHTML = `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden"><div class="p-4 header-group-2 text-gray-800"><h3 class="text-xl font-bold uppercase">Thu nhập nhân viên</h3><p class="text-sm italic text-gray-600">(đơn vị tính: Triệu đồng)</p></div>`;

        const groupedByDept = {};
        reportData.forEach(item => {
            const dept = item.boPhan;
            if (!groupedByDept[dept]) groupedByDept[dept] = [];
            groupedByDept[dept].push(item);
        });
        const departmentOrder = utils.getSortedDepartmentList(reportData);
        console.log("[ui-sknv.js displayEmployeeIncomeReport] Department order:", departmentOrder); // Log mới

        departmentOrder.forEach(deptName => {
            if (groupedByDept[deptName]) {
                 console.log(`[ui-sknv.js displayEmployeeIncomeReport] Rendering table for department: ${deptName}`); // Log mới
                 finalHTML += uiSknv.renderIncomeTableForDepartment(deptName, groupedByDept[deptName]);
            }
        });

        finalHTML += `</div>`;
        container.innerHTML = finalHTML;
        console.log("[ui-sknv.js displayEmployeeIncomeReport] === Render complete ==="); // Log mới
    },

    renderIncomeTableForDepartment: (title, data) => {
        console.log(`[ui-sknv.js renderIncomeTableForDepartment] Rendering for: ${title}, Data length: ${data?.length}`); // Log mới
        const sortState = appState.sortState.thunhap || { key: 'tongThuNhap', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = [...data].sort((a, b) => {
            const valA = a[key] || 0; const valB = b[key] || 0;
            return direction === 'asc' ? valA - valB : valB - valA;
        });

        const totals = data.reduce((acc, item) => {
            acc.gioCong += item.gioCong || 0; // Ensure NaN safety
            acc.thuongNong += item.thuongNong || 0;
            acc.thuongERP += item.thuongERP || 0;
            acc.tongThuNhap += item.tongThuNhap || 0;
            acc.thuNhapDuKien += item.thuNhapDuKien || 0;
            acc.thuNhapThangTruoc += item.thuNhapThangTruoc || 0;
            acc.chenhLechThuNhap += item.chenhLechThuNhap || 0;
            return acc;
        }, { gioCong: 0, thuongNong: 0, thuongERP: 0, tongThuNhap: 0, thuNhapDuKien: 0, thuNhapThangTruoc: 0, chenhLechThuNhap: 0 });
        console.log(`[ui-sknv.js renderIncomeTableForDepartment] Calculated totals for ${title}:`, totals); // Log mới

        const averageProjectedIncome = data.length > 0 ? totals.thuNhapDuKien / data.length : 0;
        let titleClass = '';
        if (title.includes('Tư Vấn')) titleClass = 'department-header-tv';
        else if (title.includes('Kho')) titleClass = 'department-header-kho';
        else if (title.includes('Trang Trí')) titleClass = 'department-header-tt';

        const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;
        let tableHTML = `<div class="department-block"><h4 class="text-lg font-bold p-4 border-b border-gray-200 ${titleClass}">${title} <span class="text-sm font-normal text-gray-500">(Thu nhập DK TB: ${uiComponents.formatRevenue(averageProjectedIncome)})</span></h4><div class="overflow-x-auto"><table class="min-w-full text-sm text-left text-gray-600 table-bordered table-striped" data-table-type="thunhap" data-capture-columns="8">
          <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                 <tr>
                    <th class="${headerClass('hoTen')}" data-sort="hoTen">Họ Tên <span class="sort-indicator"></span></th>
                    <th class="${headerClass('gioCong')} text-right" data-sort="gioCong">Giờ công <span class="sort-indicator"></span></th>
                    <th class="${headerClass('tongThuNhap')} text-right" data-sort="tongThuNhap">Tổng thu nhập <span class="sort-indicator"></span></th>
                    <th class="${headerClass('thuNhapDuKien')} text-right" data-sort="thuNhapDuKien">Thu nhập DK <span class="sort-indicator"></span></th>
                    <th class="${headerClass('thuNhapThangTruoc')} text-right" data-sort="thuNhapThangTruoc">Tháng trước <span class="sort-indicator"></span></th>
                    <th class="${headerClass('chenhLechThuNhap')} text-right" data-sort="chenhLechThuNhap">+/- Tháng trước <span class="sort-indicator"></span></th>
                 </tr>
                 </thead><tbody>`;
        sortedData.forEach(nv => {
            const incomeDkCellClass = nv.thuNhapDuKien < averageProjectedIncome ? 'cell-performance is-below' : '';
            const incomeDiffClass = (nv.chenhLechThuNhap || 0) < 0 ? 'income-negative' : 'income-positive'; // Handle undefined/NaN

            tableHTML += `<tr class="interactive-row" data-employee-id="${nv.maNV}" data-source-tab="sknv">
                    <td class="px-4 py-2 font-semibold line-clamp-2 employee-name-cell">
                        <a href="#">${uiComponents.getShortEmployeeName(nv.hoTen, nv.maNV)}</a>
                    </td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumberOrDash(nv.gioCong)}</td>
                    <td class="px-4 py-2 text-right font-bold text-blue-600">${uiComponents.formatRevenue(nv.tongThuNhap)}</td>
                    <td class="px-4 py-2 text-right font-bold text-green-600 ${incomeDkCellClass}">${uiComponents.formatRevenue(nv.thuNhapDuKien)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(nv.thuNhapThangTruoc)}</td>
                    <td class="px-4 py-2 text-right font-bold ${incomeDiffClass}">${uiComponents.formatRevenue(nv.chenhLechThuNhap)}</td>
                </tr>`;
        });
        tableHTML += `</tbody><tfoot class="table-footer font-bold">
            <tr>
                <td class="px-4 py-2">Tổng</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatNumberOrDash(totals.gioCong)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.tongThuNhap)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.thuNhapDuKien)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.thuNhapThangTruoc)}</td>
                <td class="px-4 py-2 text-right">${uiComponents.formatRevenue(totals.chenhLechThuNhap)}</td>
            </tr>
        </tfoot></table></div></div>`;
        return tableHTML;
    },

    displaySknvReport: (filteredReport, forceDetail = false) => {
        // === START: DEBUG (v6.16) ===
        console.log(`%c[DEBUG displaySknvReport] === Bắt đầu render ===`, "color: blue; font-weight: bold;");
        console.log(`[DEBUG displaySknvReport] Force detail: ${forceDetail}`);
        // === END: DEBUG ===
        const summaryContainer = document.getElementById('sknv-summary-container');
        const detailsContainer = document.getElementById('sknv-details-container');
        if (!summaryContainer || !detailsContainer) {
            console.error("[ui-sknv.js displaySknvReport] Summary or details container not found."); // Log mới
            return;
        }

        const isViewingDetail = appState.viewingDetailFor && appState.viewingDetailFor.sourceTab === 'sknv';
        const shouldShowDetail = forceDetail || isViewingDetail;
        // === START: DEBUG (v6.16) ===
        console.log(`[DEBUG displaySknvReport] isViewingDetail (từ appState): ${isViewingDetail}`);
        console.log(`[DEBUG displaySknvReport] shouldShowDetail (kết quả): ${shouldShowDetail}`);
        // === END: DEBUG ===

        summaryContainer.classList.toggle('hidden', shouldShowDetail);
        detailsContainer.classList.toggle('hidden', !shouldShowDetail);

        if (shouldShowDetail) {
            const employeeId = appState.viewingDetailFor.employeeId;
            console.log(`[DEBUG displaySknvReport] Đang tìm data cho NV ID: ${employeeId}`); // Log mới
            const employeeData = appState.masterReportData.sknv.find(nv => String(nv.maNV).trim() === String(employeeId).trim());
            if(employeeData) {
                console.log(`[DEBUG displaySknvReport] Đã tìm thấy data NV. Gọi renderSknvDetailForEmployee.`); // Log mới
                uiSknv.renderSknvDetailForEmployee(employeeData, filteredReport);
            } else {
                 console.warn(`[DEBUG displaySknvReport] KHÔNG TÌM THẤY data cho NV ID: ${employeeId}`); // Log mới
                 detailsContainer.innerHTML = `
                    <div class="mb-4">
                        <button class="back-to-summary-btn text-blue-600 hover:underline font-semibold">‹ Quay lại bảng tổng hợp</button>
                    </div>
                    <p class="text-red-500">Không tìm thấy dữ liệu chi tiết cho nhân viên đã chọn.</p>`;
            }
        } else {
            console.log("[DEBUG displaySknvReport] Gọi displaySknvSummaryReport."); // Log mới
            uiSknv.displaySknvSummaryReport(filteredReport);
        }
        console.log("%c[DEBUG displaySknvReport] === Render kết thúc ===", "color: blue; font-weight: bold;"); // Log mới
    },
    
    _createDetailMetricGrid(title, colorClass, icon, data) {
        let itemsHtml = data.map(row => {
            const evaluation = uiSknv.getSknvEvaluation(row.rawValue, row.rawAverage, row.higherIsBetter);
            return `
                <div class="sknv-detail-metric-card">
                    <span class="label">${row.label}</span>
                    <span class="value ${row.valueClass || ''}">${row.value}</span>
                    <span class="average">(TB: ${row.average})</span>
                    <div class="evaluation-badge ${evaluation.class}">${evaluation.text}</div>
                </div>
            `;
        }).join('');
    
        return `
            <div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
                <div class="sknv-detail-card-header ${colorClass}">
                    <i data-feather="${icon}" class="header-icon"></i>
                    <h4 class="text-lg font-bold">${title}</h4>
                </div>
                <div class="sknv-detail-grid-body">
                    ${itemsHtml}
                </div>
            </div>
        `;
    },

    renderSknvDetailForEmployee(employeeData, filteredReport) {
        console.log("[ui-sknv.js renderSknvDetailForEmployee] === Starting render ==="); // Log mới
        const detailsContainer = document.getElementById('sknv-details-container');
        if (!detailsContainer) {
            console.error("[ui-sknv.js renderSknvDetailForEmployee] Details container not found."); // Log mới
            return;
        }

        if (!employeeData) {
            console.warn("[ui-sknv.js renderSknvDetailForEmployee] No employee data provided."); // Log mới
            detailsContainer.innerHTML = `
                <div class="mb-4">
                    <button class="back-to-summary-btn text-blue-600 hover:underline font-semibold">‹ Quay lại bảng tổng hợp</button>
                </div>
                <p class="text-red-500">Không tìm thấy dữ liệu cho nhân viên đã chọn.</p>`;
            return;
        }
        console.log("[ui-sknv.js renderSknvDetailForEmployee] Employee data:", employeeData); // Log mới

        const departmentAverages = services.calculateDepartmentAverages(employeeData.boPhan, filteredReport);
        console.log("[ui-sknv.js renderSknvDetailForEmployee] Department averages:", departmentAverages); // Log mới

        const evaluationCounts = {
            doanhthu: { above: 0, total: 7 },
            nangsuat: { above: 0, total: 7 },
            hieuqua: { above: 0, total: 6 },
            dongia: { above: 0, total: 7 },
            qdc: { above: 0, total: 0 }
        };

        const countEvaluation = (group, value, avgValue, higherIsBetter = true) => {
            if (!isFinite(value) || avgValue === undefined || !isFinite(avgValue)) return;
            let isAbove = higherIsBetter ? (value >= avgValue) : (value <= avgValue);
            if (isAbove) { evaluationCounts[group].above++; }
        };
        
        const { mucTieu } = employeeData;

        // --- Tạo dữ liệu cho các grid (Giữ nguyên logic tạo mảng doanhThuData, nangSuatData, hieuQuaData, donGiaData) ---
        const doanhThuData = [
            { label: 'Doanh thu thực', value: uiComponents.formatRevenue(employeeData.doanhThu), average: uiComponents.formatRevenue(departmentAverages.doanhThu || 0), rawValue: employeeData.doanhThu, rawAverage: departmentAverages.doanhThu },
            { label: 'Doanh thu quy đổi', value: uiComponents.formatRevenue(employeeData.doanhThuQuyDoi), average: uiComponents.formatRevenue(departmentAverages.doanhThuQuyDoi || 0), rawValue: employeeData.doanhThuQuyDoi, rawAverage: departmentAverages.doanhThuQuyDoi },
            { label: '% Quy đổi', value: uiComponents.formatPercentage(employeeData.hieuQuaQuyDoi), valueClass: (mucTieu && employeeData.hieuQuaQuyDoi < (mucTieu.phanTramQD / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.hieuQuaQuyDoi), rawValue: employeeData.hieuQuaQuyDoi, rawAverage: departmentAverages.hieuQuaQuyDoi },
            { label: 'Doanh thu CE', value: uiComponents.formatRevenue(employeeData.dtCE), average: uiComponents.formatRevenue(departmentAverages.dtCE || 0), rawValue: employeeData.dtCE, rawAverage: departmentAverages.dtCE },
            { label: 'Doanh thu ICT', value: uiComponents.formatRevenue(employeeData.dtICT), average: uiComponents.formatRevenue(departmentAverages.dtICT || 0), rawValue: employeeData.dtICT, rawAverage: departmentAverages.dtICT },
            { label: 'Doanh thu trả chậm', value: uiComponents.formatRevenue(employeeData.doanhThuTraGop), average: uiComponents.formatRevenue(departmentAverages.doanhThuTraGop || 0), rawValue: employeeData.doanhThuTraGop, rawAverage: departmentAverages.doanhThuTraGop },
            { label: '% Trả chậm', value: uiComponents.formatPercentage(employeeData.tyLeTraCham), valueClass: (mucTieu && employeeData.tyLeTraCham < (mucTieu.phanTramTC / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.tyLeTraCham), rawValue: employeeData.tyLeTraCham, rawAverage: departmentAverages.tyLeTraCham }
        ];
        doanhThuData.forEach(d => countEvaluation('doanhthu', d.rawValue, d.rawAverage));

        const nangSuatData = [
            { label: 'Thưởng nóng', value: uiComponents.formatRevenue(employeeData.thuongNong), average: uiComponents.formatRevenue(departmentAverages.thuongNong || 0), rawValue: employeeData.thuongNong, rawAverage: departmentAverages.thuongNong },
            { label: 'Thưởng ERP', value: uiComponents.formatRevenue(employeeData.thuongERP), average: uiComponents.formatRevenue(departmentAverages.thuongERP || 0), rawValue: employeeData.thuongERP, rawAverage: departmentAverages.thuongERP },
            { label: 'Thu nhập lũy kế', value: uiComponents.formatRevenue(employeeData.tongThuNhap), average: uiComponents.formatRevenue(departmentAverages.tongThuNhap || 0), rawValue: employeeData.tongThuNhap, rawAverage: departmentAverages.tongThuNhap },
            { label: 'Thu nhập dự kiến', value: uiComponents.formatRevenue(employeeData.thuNhapDuKien), average: uiComponents.formatRevenue(departmentAverages.thuNhapDuKien || 0), rawValue: employeeData.thuNhapDuKien, rawAverage: departmentAverages.thuNhapDuKien },
            { label: 'Giờ công', value: uiComponents.formatNumberOrDash(employeeData.gioCong), average: uiComponents.formatNumberOrDash(departmentAverages.gioCong), rawValue: employeeData.gioCong, rawAverage: departmentAverages.gioCong },
            { label: 'Thu nhập/GC', value: uiComponents.formatNumberOrDash(employeeData.gioCong > 0 ? employeeData.tongThuNhap / employeeData.gioCong : 0), average: uiComponents.formatNumberOrDash((departmentAverages.gioCong || 0) > 0 ? (departmentAverages.tongThuNhap || 0) / departmentAverages.gioCong : 0), rawValue: employeeData.gioCong > 0 ? employeeData.tongThuNhap / employeeData.gioCong : 0, rawAverage: (departmentAverages.gioCong || 0) > 0 ? (departmentAverages.tongThuNhap || 0) / departmentAverages.gioCong : 0 },
            { label: 'Doanh thu QĐ/GC', value: uiComponents.formatRevenue(employeeData.gioCong > 0 ? employeeData.doanhThuQuyDoi / employeeData.gioCong : 0), average: uiComponents.formatRevenue((departmentAverages.gioCong || 0) > 0 ? (departmentAverages.doanhThuQuyDoi || 0) / departmentAverages.gioCong : 0), rawValue: employeeData.gioCong > 0 ? employeeData.doanhThuQuyDoi / employeeData.gioCong : 0, rawAverage: (departmentAverages.gioCong || 0) > 0 ? (departmentAverages.doanhThuQuyDoi || 0) / departmentAverages.gioCong : 0 }
        ];
        nangSuatData.forEach(d => countEvaluation('nangsuat', d.rawValue, d.rawAverage));

        const hieuQuaData = [
            { label: '% PK', value: uiComponents.formatPercentage(employeeData.pctPhuKien), valueClass: (mucTieu && employeeData.pctPhuKien < (mucTieu.phanTramPhuKien / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.pctPhuKien), rawValue: employeeData.pctPhuKien, rawAverage: departmentAverages.pctPhuKien },
            { label: '% Gia dụng', value: uiComponents.formatPercentage(employeeData.pctGiaDung), valueClass: (mucTieu && employeeData.pctGiaDung < (mucTieu.phanTramGiaDung / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.pctGiaDung), rawValue: employeeData.pctGiaDung, rawAverage: departmentAverages.pctGiaDung },
            { label: '% MLN', value: uiComponents.formatPercentage(employeeData.pctMLN), valueClass: (mucTieu && employeeData.pctMLN < (mucTieu.phanTramMLN / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.pctMLN), rawValue: employeeData.pctMLN, rawAverage: departmentAverages.pctMLN },
            { label: '% Sim', value: uiComponents.formatPercentage(employeeData.pctSim), valueClass: (mucTieu && employeeData.pctSim < (mucTieu.phanTramSim / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.pctSim), rawValue: employeeData.pctSim, rawAverage: departmentAverages.pctSim },
            { label: '% VAS', value: uiComponents.formatPercentage(employeeData.pctVAS), valueClass: (mucTieu && employeeData.pctVAS < (mucTieu.phanTramVAS / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.pctVAS), rawValue: employeeData.pctVAS, rawAverage: departmentAverages.pctVAS },
            { label: '% Bảo hiểm', value: uiComponents.formatPercentage(employeeData.pctBaoHiem), valueClass: (mucTieu && employeeData.pctBaoHiem < (mucTieu.phanTramBaoHiem / 100)) ? 'cell-performance is-below' : '', average: uiComponents.formatPercentage(departmentAverages.pctBaoHiem), rawValue: employeeData.pctBaoHiem, rawAverage: departmentAverages.pctBaoHiem },
        ];
        hieuQuaData.forEach(d => countEvaluation('hieuqua', d.rawValue, d.rawAverage));

        const donGiaData = [
            { label: 'Đơn giá TB', value: uiComponents.formatRevenue(employeeData.donGiaTrungBinh), average: uiComponents.formatRevenue(departmentAverages.donGiaTrungBinh), rawValue: employeeData.donGiaTrungBinh, rawAverage: departmentAverages.donGiaTrungBinh },
            { label: 'Đơn giá Tivi', value: uiComponents.formatRevenue(employeeData.donGiaTivi), average: uiComponents.formatRevenue(departmentAverages.donGiaTivi), rawValue: employeeData.donGiaTivi, rawAverage: departmentAverages.donGiaTivi },
            { label: 'Đơn giá Tủ lạnh', value: uiComponents.formatRevenue(employeeData.donGiaTuLanh), average: uiComponents.formatRevenue(departmentAverages.donGiaTuLanh), rawValue: employeeData.donGiaTuLanh, rawAverage: departmentAverages.donGiaTuLanh },
            { label: 'Đơn giá Máy giặt', value: uiComponents.formatRevenue(employeeData.donGiaMayGiat), average: uiComponents.formatRevenue(departmentAverages.donGiaMayGiat), rawValue: employeeData.donGiaMayGiat, rawAverage: departmentAverages.donGiaMayGiat },
            { label: 'Đơn giá Máy lạnh', value: uiComponents.formatRevenue(employeeData.donGiaMayLanh), average: uiComponents.formatRevenue(departmentAverages.donGiaMayLanh), rawValue: employeeData.donGiaMayLanh, rawAverage: departmentAverages.donGiaMayLanh },
            { label: 'Đơn giá Điện thoại', value: uiComponents.formatRevenue(employeeData.donGiaDienThoai), average: uiComponents.formatRevenue(departmentAverages.donGiaDienThoai), rawValue: employeeData.donGiaDienThoai, rawAverage: departmentAverages.donGiaDienThoai },
            { label: 'Đơn giá Laptop', value: uiComponents.formatRevenue(employeeData.donGiaLaptop), average: uiComponents.formatRevenue(departmentAverages.donGiaLaptop), rawValue: employeeData.donGiaLaptop, rawAverage: departmentAverages.donGiaLaptop },
        ];
        donGiaData.forEach(d => countEvaluation('dongia', d.rawValue, d.rawAverage));
        
        const totalAbove = evaluationCounts.doanhthu.above + evaluationCounts.nangsuat.above + evaluationCounts.hieuqua.above + evaluationCounts.dongia.above + evaluationCounts.qdc.above;
        const totalCriteria = evaluationCounts.doanhthu.total + evaluationCounts.nangsuat.total + evaluationCounts.hieuqua.total + evaluationCounts.dongia.total + evaluationCounts.qdc.total;
        console.log(`[ui-sknv.js renderSknvDetail] Evaluation Counts:`, evaluationCounts, `Total Above: ${totalAbove}, Total Criteria: ${totalCriteria}`); // Log mới
        
        console.log("[ui-sknv.js renderSknvDetail] Generating HTML..."); // Log mới
        detailsContainer.innerHTML = `
            <div class="mb-4 flex justify-between items-center">
                <button class="back-to-summary-btn text-blue-600 hover:underline font-semibold">‹ Quay lại bảng tổng hợp</button>
                <button id="capture-sknv-detail-btn" class="action-btn action-btn--capture" title="Chụp ảnh chi tiết">
                    <i data-feather="camera"></i>
                    <span>Chụp ảnh</span>
                </button>
            </div>
            <div id="sknv-detail-capture-area">
                <div class="sknv-detail-header-card" data-capture-group="1">
                    <div class="sknv-card__avatar sknv-detail-avatar">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/></svg>
                    </div>
                    <div class="sknv-detail-info">
                        <p class="name">${employeeData.hoTen} - ${employeeData.maNV}</p>
                        <p class="department">${employeeData.boPhan}</p>
                        <p class="kpi-summary">Chỉ số trên TB: <span class="text-green-600 font-bold">${totalAbove}</span> / Tổng: <span class="font-bold">${totalCriteria}</span></p>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6" data-capture-layout="grid">
                    <div class="space-y-6" data-capture-group="1">
                        ${this._createDetailMetricGrid('Doanh thu', 'sknv-header-blue', 'trending-up', doanhThuData)}
                        ${this._createDetailMetricGrid('Hiệu quả khai thác', 'sknv-header-orange', 'award', hieuQuaData)}
                    </div>
                    <div class="space-y-6" data-capture-group="1">
                        ${this._createDetailMetricGrid('Năng suất', 'sknv-header-green', 'dollar-sign', nangSuatData)}
                        ${this._createDetailMetricGrid('Đơn giá', 'sknv-header-yellow', 'tag', donGiaData)}
                    </div>
                    <div class="md:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-6" data-capture-layout="grid">
                        <div data-capture-group="1" class="overflow-x-auto">${uiSknv.renderSknvQdcTable(employeeData, departmentAverages, countEvaluation, evaluationCounts)}</div>
                        <div data-capture-group="1" class="overflow-x-auto">${uiSknv.renderSknvNganhHangTable(employeeData)}</div>
                    </div>
                    </div>
            </div>`;
            feather.replace();
        console.log("[ui-sknv.js renderSknvDetail] === Render complete ==="); // Log mới
    },
    
    displaySknvSummaryReport: (reportData) => {
        console.log("[ui-sknv.js displaySknvSummaryReport] === Starting render ==="); // Log mới
        const container = document.getElementById('sknv-summary-container');
        if (!container) {
            console.error("[ui-sknv.js displaySknvSummaryReport] Summary container not found."); // Log mới
            return;
        }

        if (!reportData || reportData.length === 0) {
            console.warn("[ui-sknv.js displaySknvSummaryReport] No report data provided."); // Log mới
            container.innerHTML = '<p class="text-gray-500 font-bold p-4">Không có dữ liệu hiệu suất để hiển thị.</p>';
            return;
        }
        console.log(`[ui-sknv.js displaySknvSummaryReport] Input reportData length: ${reportData.length}`); // Log mới

        const summarizedData = reportData.map(employee => {
            const departmentAverages = services.calculateDepartmentAverages(employee.boPhan, reportData);
            const counts = {
                doanhthu: { above: 0, total: 7 },
                nangsuat: { above: 0, total: 7 },
                hieuqua: { above: 0, total: 6 },
                dongia: { above: 0, total: 7 },
                qdc: { above: 0, total: 0 }
            };
            const check = (group, value, avg, higherIsBetter = true) => {
                if (!isFinite(value) || avg === undefined || !isFinite(avg)) return;
                if (higherIsBetter ? (value >= avg) : (value <= avg)) counts[group].above++;
            };
            check('doanhthu', employee.doanhThu, departmentAverages.doanhThu);
            check('doanhthu', employee.doanhThuQuyDoi, departmentAverages.doanhThuQuyDoi);
            check('doanhthu', employee.hieuQuaQuyDoi, departmentAverages.hieuQuaQuyDoi);
            check('doanhthu', employee.dtCE, departmentAverages.dtCE);
            check('doanhthu', employee.dtICT, departmentAverages.dtICT);
            check('doanhthu', employee.doanhThuTraGop, departmentAverages.doanhThuTraGop);
            check('doanhthu', employee.tyLeTraCham, departmentAverages.tyLeTraCham);
            check('nangsuat', employee.tongThuNhap, departmentAverages.tongThuNhap);
            check('nangsuat', employee.thuNhapDuKien, departmentAverages.thuNhapDuKien);
            check('nangsuat', employee.gioCong, departmentAverages.gioCong);
            check('nangsuat', employee.gioCong > 0 ? employee.tongThuNhap / employee.gioCong : 0, departmentAverages.gioCong > 0 ? departmentAverages.tongThuNhap / departmentAverages.gioCong : 0);
            check('nangsuat', employee.gioCong > 0 ? employee.doanhThuQuyDoi / employee.gioCong : 0, departmentAverages.gioCong > 0 ? departmentAverages.doanhThuQuyDoi / departmentAverages.gioCong : 0);
            check('nangsuat', employee.thuongNong, departmentAverages.thuongNong);
            check('nangsuat', employee.thuongERP, departmentAverages.thuongERP);
            check('hieuqua', employee.pctPhuKien, departmentAverages.pctPhuKien);
            check('hieuqua', employee.pctGiaDung, departmentAverages.pctGiaDung);
            check('hieuqua', employee.pctMLN, departmentAverages.pctMLN);
            check('hieuqua', employee.pctSim, departmentAverages.pctSim);
            check('hieuqua', employee.pctVAS, departmentAverages.pctVAS);
            check('hieuqua', employee.pctBaoHiem, departmentAverages.pctBaoHiem);
            check('dongia', employee.donGiaTrungBinh, departmentAverages.donGiaTrungBinh);
            check('dongia', employee.donGiaTivi, departmentAverages.donGiaTivi);
            check('dongia', employee.donGiaTuLanh, departmentAverages.donGiaTuLanh);
            check('dongia', employee.donGiaMayGiat, departmentAverages.donGiaMayGiat);
            check('dongia', employee.donGiaMayLanh, departmentAverages.donGiaMayLanh);
            check('dongia', employee.donGiaDienThoai, departmentAverages.donGiaDienThoai);
            check('dongia', employee.donGiaLaptop, departmentAverages.donGiaLaptop);
            if(employee.qdc && departmentAverages.qdc) {
                for (const key in employee.qdc) {
                    if(departmentAverages.qdc[key] && employee.qdc[key].dtqd > 0) {
                        counts.qdc.total++;
                        check('qdc', employee.qdc[key].dtqd, departmentAverages.qdc[key].dtqd);
                    }
                }
            }
            const totalAbove = counts.doanhthu.above + counts.nangsuat.above + counts.hieuqua.above + counts.dongia.above + counts.qdc.above;
            const totalCriteria = counts.doanhthu.total + counts.nangsuat.total + counts.hieuqua.total + counts.dongia.total + counts.qdc.total;
            return { ...employee, summary: counts, totalAbove, totalCriteria };
        });
        console.log(`[ui-sknv.js displaySknvSummaryReport] Summarized data generated. First item:`, summarizedData[0]); // Log mới

        const subKpiGroups = [ 
            { key: 'doanhthu', label: 'Doanh Thu', icon: 'trending-up' },
            { key: 'nangsuat', label: 'Năng Suất', icon: 'dollar-sign' },
            { key: 'hieuqua', label: 'Hiệu Quả', icon: 'award' },
            { key: 'dongia', label: 'Đơn Giá', icon: 'tag' },
            { key: 'qdc', label: 'QĐC', icon: 'star' }
        ];
        
        const groupedByDept = {}; 
        summarizedData.forEach(item => { 
            const dept = item.boPhan; 
            if (!groupedByDept[dept]) groupedByDept[dept] = []; 
            groupedByDept[dept].push(item); 
        });

        const departmentOrder = utils.getSortedDepartmentList(reportData); 
        console.log("[ui-sknv.js displaySknvSummaryReport] Department order:", departmentOrder); // Log mới

        let finalCardsHtml = ''; 
        const gold_medal_svg = `<span class="medal-container"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="gold-grad" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:#FFDF00;stop-opacity:1" /><stop offset="100%" style="stop-color:#FFB800;stop-opacity:1" /></linearGradient><filter id="shadow" x="-20%" y="-20%" width="140%" height="140%"><feGaussianBlur in="SourceAlpha" stdDeviation="3"/><feOffset dx="2" dy="2" result="offsetblur"/><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge></filter></defs><path d="M 20 75 L 35 95 L 35 75 L 50 90 L 65 75 L 65 95 L 80 75 L 50 85 Z" fill="#E53935"/><circle cx="50" cy="45" r="38" fill="#BDBDBD"/><circle cx="50" cy="45" r="35" fill="url(#gold-grad)"/><circle cx="50" cy="45" r="28" fill="#FFC107" stroke="#FFFFFF" stroke-width="2"/><text x="50" y="52" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="white" text-anchor="middle">1</text><path d="M 68 25 l 3 -6 l 3 6 l 6 3 l -6 3 l -3 6 l -3 -6 l -6 -3 Z" fill="white" opacity="0.8"/><path d="M 30 55 l 2 -4 l 2 4 l 4 2 l -4 2 l -2 4 l -2 -4 l -4 -2 Z" fill="white" opacity="0.5"/></svg></span>`;
        const silver_medal_svg = `<span class="medal-container"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="silver-grad" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:#F5F5F5;stop-opacity:1" /><stop offset="100%" style="stop-color:#B0BEC5;stop-opacity:1" /></linearGradient></defs><path d="M 20 75 L 35 95 L 35 75 L 50 90 L 65 75 L 65 95 L 80 75 L 50 85 Z" fill="#E53935"/><circle cx="50" cy="45" r="38" fill="#78909C"/><circle cx="50" cy="45" r="35" fill="url(#silver-grad)"/><circle cx="50" cy="45" r="28" fill="#B0BEC5" stroke="#FFFFFF" stroke-width="2"/><text x="50" y="52" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="white" text-anchor="middle">2</text><path d="M 68 25 l 3 -6 l 3 6 l 6 3 l -6 3 l -3 6 l -3 -6 l -6 -3 Z" fill="white" opacity="0.8"/></svg></span>`;
        const bronze_medal_svg = `<span class="medal-container"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="bronze-grad" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:#FFCC80;stop-opacity:1" /><stop offset="100%" style="stop-color:#D84315;stop-opacity:1" /></linearGradient></defs><path d="M 20 75 L 35 95 L 35 75 L 50 90 L 65 75 L 65 95 L 80 75 L 50 85 Z" fill="#E53935"/><circle cx="50" cy="45" r="38" fill="#A1887F"/><circle cx="50" cy="45" r="35" fill="url(#bronze-grad)"/><circle cx="50" cy="45" r="28" fill="#D84315" stroke="#FFFFFF" stroke-width="2"/><text x="50" y="52" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="white" text-anchor="middle">3</text><path d="M 68 25 l 3 -6 l 3 6 l 6 3 l -6 3 l -3 6 l -3 -6 l -6 -3 Z" fill="white" opacity="0.8"/></svg></span>`;

        departmentOrder.forEach(deptName => { 
            if (groupedByDept[deptName] && groupedByDept[deptName].length > 0) { 
                console.log(`[ui-sknv.js displaySknvSummaryReport] Rendering department group: ${deptName}`); 
                const sortedDeptEmployees = [...groupedByDept[deptName]].sort((a, b) => (b.totalAbove || 0) - (a.totalAbove || 0)); 

                finalCardsHtml += `<div class="sknv-department-group">`; 
                finalCardsHtml += `<h4 class="sknv-department-header ${deptName.includes('Tư Vấn - ĐM') ? 'sknv-department-header--priority' : ''}">${deptName}</h4>`; 
                finalCardsHtml += `<div class="sknv-summary-grid">`; 

                sortedDeptEmployees.forEach((item, index) => { 
                    const performancePercentage = item.totalCriteria > 0 ? (item.totalAbove / item.totalCriteria) : 0; 
                    const performanceColorClass = performancePercentage >= 0.7 ? 'sknv-card-kpi-strong' : performancePercentage >= 0.4 ? 'sknv-card-kpi-medium' : 'sknv-card-kpi-weak'; 

                    let medalHtml = ''; 
                    if (index === 0) medalHtml = gold_medal_svg; 
                    else if (index === 1) medalHtml = silver_medal_svg; 
                    else if (index === 2) medalHtml = bronze_medal_svg; 

                    const subKpisHtml = subKpiGroups.map(group => { 
                        if (!item.summary || !item.summary[group.key] || item.summary[group.key].total === 0) return ''; 
                        const subKpiPerf = item.summary[group.key].total > 0 ? item.summary[group.key].above / item.summary[group.key].total : 0; 
                        const subKpiColorClass = subKpiPerf >= 0.7 ? 'strong' : subKpiPerf >= 0.4 ? 'medium' : 'weak'; 
                        const valueColorClass = subKpiPerf >= 0.5 ? 'text-blue-600' : 'text-red-600'; 

                        return `
                            <div class="sknv-card__sub-kpi-item ${subKpiColorClass}">
                                <div class="sknv-card__sub-kpi-header">
                                    <i data-feather="${group.icon}"></i>
                                    <span class="label">${group.label}</span>
                                </div>
                                <span class="value ${valueColorClass}">${item.summary[group.key].above}/${item.summary[group.key].total}</span>
                            </div>
                        `; 
                    }).join(''); 

                    finalCardsHtml += `
                        <div class="sknv-card interactive-row" data-employee-id="${item.maNV}" data-source-tab="sknv">
                            ${medalHtml}
                            <div class="sknv-card__header">
                                <div class="sknv-card__avatar">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/></svg>
                                </div>
                                <div class="sknv-card__info">
                                    <p class="name">${uiComponents.getShortEmployeeName(item.hoTen, item.maNV)}</p>
                                    <p class="id">${item.boPhan}</p>
                                </div>
                            </div>
                            <div class="sknv-card__main-kpi ${performanceColorClass}">
                                <span class="value">${item.totalAbove}</span>
                                <span class="total">/ ${item.totalCriteria}</span>
                                <span class="label">Chỉ số trên TB</span>
                            </div>
                            <div class="sknv-card__sub-kpi-grid">
                                ${subKpisHtml}
                            </div>
                        </div>`; 
                });
                finalCardsHtml += `</div></div>`; 
            }
        });
        container.innerHTML = `<div data-capture-group="1">${finalCardsHtml}</div>`; 

        if (typeof feather !== 'undefined') { 
            feather.replace(); 
        }
        console.log("[ui-sknv.js displaySknvSummaryReport] === Render complete ==="); 
    },
    
    getSknvEvaluation: (value, avgValue, higherIsBetter = true) => {
        if (!isFinite(value) || avgValue === undefined || !isFinite(avgValue)) return { text: '-', class: '' };
        const isAbove = higherIsBetter ? (value >= avgValue) : (value <= avgValue);
        return {
            text: isAbove ? 'Trên TB' : 'Dưới TB',
            class: isAbove ? 'text-green-600' : 'text-yellow-6Doanhthu'
        };
    },
    
    renderSknvNganhHangTable(employeeData) {
        console.log("[ui-sknv.js renderSknvNganhHangTable] Starting render..."); 
        const { doanhThuTheoNganhHang } = employeeData;
        const sortState = appState.sortState.sknv_nganhhang_chitiet || { key: 'revenue', direction: 'desc' };
        const { key, direction } = sortState;
        
        const dataArray = Object.entries(doanhThuTheoNganhHang || {}) 
            .map(([name, values]) => ({ name, ...values }))
            .filter(item => (item.revenue || 0) > 0); 
        console.log(`[ui-sknv.js renderSknvNganhHangTable] Data array length: ${dataArray.length}`); 

        if (dataArray.length === 0) return '<div class="bg-white rounded-xl shadow-md border border-gray-200 p-4"><div class="sknv-detail-card-header sknv-header-purple"><i data-feather="list" class="header-icon"></i><h4 class="text-lg font-bold">Doanh thu theo Ngành hàng</h4></div><p class="p-4 text-gray-500">Không có dữ liệu.</p></div>';

        const sortedData = [...dataArray].sort((a,b) => direction === 'asc' ? (a[key] || 0) - (b[key] || 0) : (b[key] || 0) - (a[key] || 0)); 
        const headerClass = (sortKey) => `px-4 py-2 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;

        return `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden"><div class="sknv-detail-card-header sknv-header-purple"><i data-feather="list" class="header-icon"></i><h4 class="text-lg font-bold">Doanh thu theo Ngành hàng</h4></div><div class="overflow-x-auto" style="max-height: 400px;"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="sknv_nganhhang_chitiet">
            <thead class="sknv-subtable-header"><tr>
                <th class="${headerClass('name')}" data-sort="name">Ngành hàng</th>
                <th class="${headerClass('quantity')} text-right" data-sort="quantity">SL</th>
                <th class="${headerClass('revenue')} text-right" data-sort="revenue">Doanh thu</th>
                <th class="${headerClass('revenueQuyDoi')} text-right" data-sort="revenueQuyDoi">DTQĐ</th>
            </tr></thead>
            <tbody>${sortedData.map(item => `
                <tr class="border-t">
                    <td class="px-4 py-2 font-medium">${item.name}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumberOrDash(item.quantity)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.revenue, 0)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.revenueQuyDoi, 0)}</td>
                </tr>`).join('')}
            </tbody></table></div></div>`;
    },

    renderSknvQdcTable(employeeData, departmentAverages, countCallback, evaluationCounts) {
        console.log("[ui-sknv.js renderSknvQdcTable] Starting render..."); 
        const qdcData = employeeData.qdc;
        const avgQdcData = departmentAverages.qdc;

        if (!qdcData) { 
             console.warn("[ui-sknv.js renderSknvQdcTable] Employee QDC data is missing.");
             evaluationCounts.qdc.total = 0;
             return '<div class="bg-white rounded-xl shadow-md border border-gray-200 p-4"><div class="sknv-detail-card-header sknv-header-indigo"><i data-feather="star" class="header-icon"></i><h4 class="text-lg font-bold">Nhóm hàng Quy đổi cao</h4></div><p class="p-4 text-gray-500">Không có dữ liệu.</p></div>';
        }

        const sortState = appState.sortState.sknv_qdc || { key: 'dtqd', direction: 'desc' };
        const { key, direction } = sortState;
        const sortedData = Object.entries(qdcData)
            .map(([id, values]) => ({ id, ...values }))
            .filter(item => (item.sl || 0) > 0) 
            .sort((a,b) => direction === 'asc' ? (a[key] || 0) - (b[key] || 0) : (b[key] || 0) - (a[key] || 0)); 
        console.log(`[ui-sknv.js renderSknvQdcTable] Sorted QDC data length: ${sortedData.length}`); 

        if (sortedData.length === 0) {
            evaluationCounts.qdc.total = 0;
            return '<div class="bg-white rounded-xl shadow-md border border-gray-200 p-4"><div class="sknv-detail-card-header sknv-header-indigo"><i data-feather="star" class="header-icon"></i><h4 class="text-lg font-bold">Nhóm hàng Quy đổi cao</h4></div><p class="p-4 text-gray-500">Không có dữ liệu.</p></div>';
        }

        evaluationCounts.qdc.total = sortedData.length;

        const headerClass = (sortKey) => `px-4 py-2 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;

        return `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden"><div class="sknv-detail-card-header sknv-header-indigo"><i data-feather="star" class="header-icon"></i><h4 class="text-lg font-bold">Nhóm hàng Quy đổi cao</h4></div><div class="overflow-x-auto" style="max-height: 400px;"><table class="min-w-full text-sm table-bordered table-striped" data-table-type="sknv_qdc">
            <thead class="sknv-subtable-header"><tr>
                <th class="${headerClass('name')}" data-sort="name">Nhóm hàng</th>
                <th class="${headerClass('sl')} text-right" data-sort="sl">SL</th>
                <th class="${headerClass('dtqd')} text-right" data-sort="dtqd">DTQĐ (Tr)</th>
                <th class="px-4 py-2 text-center">Đánh giá</th>
            </tr></thead>
            <tbody>${sortedData.map(item => {
                const avgValue = avgQdcData?.[item.id]?.dtqd;
                const evaluation = uiSknv.getSknvEvaluation(item.dtqd, avgValue);
                countCallback('qdc', item.dtqd, avgValue);
                return `<tr class="border-t">
                    <td class="px-4 py-2 font-medium">${item.name}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatNumberOrDash(item.sl)}</td>
                    <td class="px-4 py-2 text-right font-bold">${uiComponents.formatRevenue(item.dtqd)}</td>
                    <td class="px-4 py-2 text-center font-semibold ${evaluation.class}">${evaluation.text}</td>
                </tr>`}).join('')}
            </tbody></table></div></div>`;
    },

    // *** START: MODIFIED FUNCTION (v6.17) - Fix Bugs 2, 3 & Add Feature 5 + Logging ***
    /**
     * Render bảng báo cáo Thi đua NV từ dữ liệu đã dán (pasted data).
     * @param {Array} reportData - Dữ liệu đã được xử lý từ appState.pastedThiDuaReportData (đã được lọc)
     */
    renderPastedCompetitionReport(reportData) {
        // === START: DEBUG (v6.16) ===
        console.log(`%c[DEBUG renderPastedCompetitionReport] === Bắt đầu render ===`, "color: blue; font-weight: bold;");
        console.log(`[DEBUG renderPastedCompetitionReport] Data length: ${reportData.length}`);
        // === END: DEBUG ===
        
        const container = document.getElementById('pasted-competition-report-container');
        if (!container) {
            console.error("[ui-sknv.js renderPastedCompetitionReport] Container '#pasted-competition-report-container' not found.");
            return;
        }

        if (!reportData || reportData.length === 0) {
            container.innerHTML = '<p class="text-gray-500">Không có dữ liệu thi đua nhân viên. Vui lòng dán dữ liệu ở tab "Cập nhật dữ liệu" và đảm bảo bộ lọc không quá hẹp.</p>';
            return;
        }

        // Lấy tiêu đề từ nhân viên đầu tiên (giả định tất cả đều giống nhau)
        const firstEmployee = reportData[0];
        const headers = firstEmployee.competitions.map(comp => ({
            tenRutGon: comp.tenNganhHang, // Đây là tên rút gọn
            tenGoc: comp.tenGoc,
            loaiSoLieu: comp.loaiSoLieu // 'SLLK', 'DTQĐ', 'DTLK'
        }));
        // === START: DEBUG (v6.16) ===
        console.log(`[DEBUG renderPastedCompetitionReport] Số lượng cột header: ${headers.length}`);
        // === END: DEBUG ===

        let finalHTML = `<div class="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden" data-capture-group="pasted-competition">`;

        // Nhóm theo bộ phận
        const groupedByDept = {};
        reportData.forEach(item => {
            const dept = item.boPhan || 'Chưa phân loại';
            if (!groupedByDept[dept]) groupedByDept[dept] = [];
            groupedByDept[dept].push(item);
        });

        const departmentOrder = utils.getSortedDepartmentList(reportData);
        const sortStateKey = 'sknv_thidua_pasted';
        
        departmentOrder.forEach(deptName => {
            if (groupedByDept[deptName]) {
                const deptData = groupedByDept[deptName];
                
                // Sắp xếp nhân viên trong bộ phận
                const sortState = appState.sortState[sortStateKey] || { key: 'hoTen', direction: 'asc' };
                const { key, direction } = sortState;
                const sortedData = [...deptData].sort((a, b) => {
                    const valA = a[key] || ''; 
                    const valB = b[key] || '';
                    if (valA < valB) return direction === 'asc' ? -1 : 1;
                    if (valA > valB) return direction === 'asc' ? 1 : -1;
                    return 0;
                });

                let titleClass = '';
                 if (deptName.includes('Tư Vấn')) titleClass = 'department-header-tv';
                else if (deptName.includes('Kho')) titleClass = 'department-header-kho';
                else if (deptName.includes('Trang Trí')) titleClass = 'department-header-tt';

                const headerClass = (sortKey) => `px-4 py-3 sortable ${key === sortKey ? (direction === 'asc' ? 'sorted-asc' : 'sorted-desc') : ''}`;

                // === START: DEBUG (v6.16) ===
                console.log(`[DEBUG renderPastedCompetitionReport] Bắt đầu render department: ${deptName}`);
                // Thêm overflow-x-auto ngay đây
                finalHTML += `<div class="department-block">
                    <h4 class="text-lg font-bold p-4 border-b border-gray-200 ${titleClass}">${deptName}</h4>
                    <div class="overflow-x-auto"> 
                    <table class="min-w-full text-sm text-left text-gray-600 table-bordered table-striped" data-table-type="${sortStateKey}" data-capture-columns="${1 + headers.length}">
                        <thead class="text-xs text-slate-800 uppercase bg-slate-200 font-bold">
                            <tr>
                                <th class="${headerClass('hoTen')}" data-sort="hoTen" style="min-width: 150px; white-space: nowrap;">Nhân viên <span class="sort-indicator"></span></th>
                            
                                ${headers.map((header, index) => `
                                    <th class="px-4 py-2 text-center header-group-${index % 12 + 1}" title="${header.tenGoc} (${header.loaiSoLieu})" style="min-width: 130px;">
                                        ${header.tenRutGon}
                                    </th>
                                `).join('')}
                            </tr>
                            </thead>
                        <tbody>`;

                // *** FIX (Feature 5): Prepare for Sum/Avg calculation ***
                const deptTotals = new Array(headers.length).fill(0);
                const validEmployeeCount = new Array(headers.length).fill(0);

                // Thêm dòng dữ liệu nhân viên
                sortedData.forEach(item => {
                    // === FIX 3 (Thêm style) ===
                    finalHTML += `<tr class="hover:bg-gray-50">
                        <td class="px-4 py-2 font-semibold whitespace-nowrap">${uiComponents.getShortEmployeeName(item.hoTen, item.maNV)}</td>
                        
                        ${item.competitions.map((comp, i) => {
                             let formattedValue;
                            const giaTri = comp.giaTri || 0;
                            
                            if (giaTri === 0) {
                                formattedValue = '-';
                            } else {
                                // Add to totals
                                deptTotals[i] += giaTri;
                                validEmployeeCount[i]++;
                                
                                // === FIX 3b (Sửa) - Dùng formatNumber với 0 số lẻ ===
                                formattedValue = uiComponents.formatNumber(giaTri, 0); 
                            }
                 
                            const cellClass = (comp.loaiSoLieu === 'SLLK') ? 'text-right font-bold' : 'text-right font-bold text-blue-600';
                            
                            return `<td class="${cellClass} px-2 py-2">${formattedValue}</td>`;
                        }).join('')}
                    </tr>`;
                });

                // *** FIX (Feature 5): Render Sum and Avg rows ***
                finalHTML += `</tbody>
                    <tfoot class="table-footer font-bold">
                        <tr class="bg-gray-100">
                            <td class="px-4 py-2 text-left">Tổng</td>
                            ${headers.map((header, i) => {
                                const total = deptTotals[i];
                                // === FIX 3b (Sửa) ===
                                const formattedTotal = total === 0 ? '-' : uiComponents.formatNumber(total, 0);
                                return `<td class="px-2 py-2 text-right">${formattedTotal}</td>`;
                            }).join('')}
                        </tr>
                        <tr class="bg-gray-100">
                            <td class="px-4 py-2 text-left">Trung Bình</td>
                            ${headers.map((header, i) => {
                                const total = deptTotals[i];
                                const count = validEmployeeCount[i];
                                const avg = count > 0 ? total / count : 0;
                                // === FIX 3b (Sửa) ===
                                const formattedAvg = avg === 0 ? '-' : uiComponents.formatNumber(avg, 0);
                                return `<td class="px-2 py-2 text-right">${formattedAvg}</td>`;
                            }).join('')}
                        </tr>
                    </tfoot>
                </table></div></div>`; // Đóng overflow-x-auto và department-block
            }
        });

        finalHTML += `</div>`; // Đóng .bg-white
        container.innerHTML = finalHTML;
        
        // === START: DEBUG (v6.16) ===
        // Thêm log chẩn đoán sau khi render
        setTimeout(() => {
            const tableEl = container.querySelector('table');
            const tableContainer = container.querySelector('.overflow-x-auto');
            if (tableEl && tableContainer) {
                console.log(`[DEBUG renderPastedCompetitionReport] Kích thước sau render:`);
                console.log(`  > Kích thước Bảng (scrollWidth): ${tableEl.scrollWidth}px`);
                console.log(`  > Kích thước Container (clientWidth): ${tableContainer.clientWidth}px`);
                if (tableEl.scrollWidth > tableContainer.clientWidth) {
                    console.log(`%c  > CHẨN ĐOÁN: Tốt! Bảng rộng hơn container, thanh trượt ngang NÊN xuất hiện.`, "color: green;");
                } else {
                    console.log(`%c  > CHẨN ĐOÁN: Cảnh báo! Bảng không rộng hơn container, thanh trượt ngang sẽ KHÔNG xuất hiện.`, "color: orange;");
                }
            } else {
                console.error("[DEBUG renderPastedCompetitionReport] Không tìm thấy bảng hoặc container sau khi render để chẩn đoán.");
            }
        }, 0);
        // === END: DEBUG (v6.16) ===
    }
    // *** END: MODIFIED FUNCTION (v6.17) ***
};
--- END FILE: ./ui-sknv.js ---

--- START FILE: ./ui-thidua-vung.js ---
// Version 1.7 - Fix syntax error (remove semicolon after arrow function)
// Version 1.6 - Add conditional coloring for 'Tỷ lệ đạt' summary value
// Version 1.5 - Display 'Lay Top' data and finalize UI
// MODULE: UI THI ĐUA VÙNG
// Chứa các hàm render giao diện cho tab "Thi đua vùng".

import { uiComponents } from './ui-components.js';

export const uiThiDuaVung = {
    renderThiDuaVungInfographic(reportData) {
        const container = document.getElementById('thidua-vung-infographic-container');
        if (!container) return;
        if (!reportData) {
            container.innerHTML = `<div class="placeholder-message">Không tìm thấy dữ liệu cho siêu thị đã chọn.</div>`;
            return;
        }

        const { summary, coGiai, sapCoGiai, tiemNang, canCoGangNhieu } = reportData;

        // --- Helper function to find correct key regardless of case ---
        const findKey = (item, keyword) => {
            if (!item) return keyword; // Return keyword if item is null/undefined
            // Find the key in the item that includes the keyword (case-insensitive)
            return Object.keys(item).find(k => k.trim().toLowerCase().includes(keyword.toLowerCase())) || keyword; // Return keyword if no match found
        } // <<< *** ĐÃ XÓA DẤU ; Ở ĐÂY ***

        // Find the first item with data to reliably get keys
        const firstItem = coGiai[0] || sapCoGiai[0] || tiemNang[0] || canCoGangNhieu[0];
        const keyMap = {
            sieuThi: findKey(summary, 'siêu thị'),
            tongThuongTamTinh: findKey(summary, 'tổng thưởng tạm tỉnh'),
            slThiDua: findKey(summary, 'sl nh thi đua'),
            slDat: findKey(summary, 'sl nh >100%'),
            tyLeDat: findKey(summary, 'tỷ lệ nh đạt >100%'),
            slCoGiai: findKey(summary, 'sl nh dự kiến đạt giải'),
            nganhHang: findKey(firstItem, 'ngành hàng'),
            phanTramDuKien: findKey(firstItem, '% dự kiến'),
            duKienVuot: findKey(firstItem, 'dự kiến d.thu'),
            hangVuotTroi: findKey(firstItem, 'hạng vượt trội'),
            hangTarget: findKey(firstItem, 'hạng % target'),
            tongThuong: findKey(firstItem, 'tổng thưởng'),
            hangCoGiaiKenh: 'hangCoGiaiKenh' // Sử dụng key đã được chuẩn hóa trong services.js
        };

        const renderCoGiaiItem = (item) => `
            <div class="tdv-item-card">
                <p class="tdv-item-card__title">${item[keyMap.nganhHang]}</p>
                <div class="tdv-progress-bar-container">
                    <div class="tdv-progress-bar tdv-progress-bar--blue" style="width: ${Math.min(item[keyMap.phanTramDuKien] * 100, 100)}%;"></div>
                    <span class="tdv-progress-bar__text">${uiComponents.formatPercentage(item[keyMap.phanTramDuKien])}</span>
                </div>
                <div class="tdv-item-card__details">
                    <span>Vượt: <strong>${uiComponents.formatNumber(item[keyMap.duKienVuot])}</strong></span>
                    <span>Hạng DT/SL: <strong>${item[keyMap.hangVuotTroi]}</strong></span>
                    <span>Hạng %: <strong>${item[keyMap.hangTarget]}</strong></span>
                    <span class="tdv-item-card__prize">Thưởng: <strong>${uiComponents.formatNumber(item[keyMap.tongThuong])}</strong></span>
                </div>
            </div>
        `;

        const renderSapCoGiaiItem = (item) => `
            <div class="tdv-item-card">
                <p class="tdv-item-card__title">${item[keyMap.nganhHang]}</p>
                <div class="tdv-progress-bar-container">
                    <div class="tdv-progress-bar tdv-progress-bar--yellow" style="width: ${Math.min(item[keyMap.phanTramDuKien] * 100, 100)}%;"></div>
                    <span class="tdv-progress-bar__text">${uiComponents.formatPercentage(item[keyMap.phanTramDuKien])}</span>
                </div>
                <div class="tdv-item-card__details">
                    <span>Cách giải: <strong>${item.khoangCach} hạng</strong></span>
                    <span>Hạng DT/SL: <strong>${item[keyMap.hangVuotTroi]}</strong></span>
                    <span>Hạng %: <strong>${item[keyMap.hangTarget]}</strong></span>
                    <span class="tdv-item-card__prize">Thưởng DK: <strong>${uiComponents.formatNumber(item.thuongTiemNang)}</strong></span>
                </div>
            </div>
        `;

        const renderNeedsEffortRow = (potentialItems, majorItems) => {
            let html = `<div class="tdv-row">
                <h3 class="tdv-row-title tdv-row-title--effort">Nhóm còn lại (${potentialItems.length + majorItems.length})</h3>
                <div class="tdv-row-body tdv-row-body--effort">`;

            if (potentialItems.length > 0) {
                html += `<div class="tdv-effort-subgroup">
                    <h4 class="tdv-effort-subgroup__title tdv-effort-subgroup__title--potential">Tiềm năng (cách 21-40 hạng)</h4>
                    <div class="tdv-effort-list">${potentialItems.map(item => `<div class="tdv-effort-item">${item[keyMap.nganhHang]} (cách ${item.khoangCach})</div>`).join('')}</div>
                </div>`;
            }

            if (majorItems.length > 0) {
                 html += `<div class="tdv-effort-subgroup">
                    <h4 class="tdv-effort-subgroup__title tdv-effort-subgroup__title--major">Cần cố gắng nhiều</h4>
                    <div class="tdv-effort-list">${majorItems.map(item => `<div class="tdv-effort-item">${item[keyMap.nganhHang]}</div>`).join('')}</div>
                </div>`;
            }

            if (potentialItems.length === 0 && majorItems.length === 0) {
                html += '<p class="text-xs text-gray-500">Không có.</p>';
            }

            html += `</div></div>`;
            return html;
        };

        const totalSoonPrize = sapCoGiai.reduce((sum, item) => sum + (item.thuongTiemNang || 0), 0);
        const soonPrizeTitleText = totalSoonPrize > 0 ? ` - DK: ${uiComponents.formatNumber(totalSoonPrize)}đ` : '';

        // *** START: Thêm logic xác định class màu cho Tỷ lệ đạt ***
        const tyLeDatValue = summary[keyMap.tyLeDat] || 0; // Lấy giá trị tỷ lệ
        const tyLeDatClass = tyLeDatValue >= 0.6 ? 'tdv-tyledat-high' : 'tdv-tyledat-low'; // Xác định class
        // *** END: Thêm logic ***

        const html = `
            <div class="tdv-infographic-card">
                <div class="tdv-header">
                    <h2 class="tdv-supermarket-name">${summary[keyMap.sieuThi]}</h2>
                    <div class="tdv-total-prize-container">
                        <span class="tdv-total-prize-label">Tổng thưởng tạm tính:</span>
                        <span class="tdv-total-prize-value">${uiComponents.formatNumber(summary[keyMap.tongThuongTamTinh])}đ</span>
                    </div>
                </div>

                <div class="tdv-summary-grid">
                    <div class="tdv-summary-item">
                        <span class="tdv-summary-value">${uiComponents.formatNumber(summary[keyMap.slThiDua])}</span>
                        <span class="tdv-summary-label">Ngành thi đua</span>
                    </div>
                    <div class="tdv-summary-item">
                        <span class="tdv-summary-value">${uiComponents.formatNumber(summary[keyMap.slDat])}</span>
                        <span class="tdv-summary-label">Ngành >100%</span>
                    </div>
                    <div class="tdv-summary-item">
                 
                        <span class="tdv-summary-value ${tyLeDatClass}">${uiComponents.formatPercentage(tyLeDatValue)}</span>
                    
                        <span class="tdv-summary-label">Tỷ lệ đạt</span>
                    </div>
                     <div class="tdv-summary-item">
                        <span class="tdv-summary-value">${uiComponents.formatNumber(summary[keyMap.slCoGiai])}</span>
                        <span class="tdv-summary-label">Ngành dự kiến có giải</span>
                    </div>
                    <div class="tdv-summary-item">
                        <span class="tdv-summary-value">${uiComponents.formatNumber(summary[keyMap.hangCoGiaiKenh])}</span>
                        <span class="tdv-summary-label">Hạng có giải (Kênh)</span>
                    </div>
                </div>

                <div class="tdv-rows-container">
                    <div class="tdv-row">
                        <h3 class="tdv-row-title tdv-row-title--prize">Ngành hàng có giải (${coGiai.length})</h3>
                        <div class="tdv-row-body">${coGiai.map(renderCoGiaiItem).join('') || '<p class="text-xs text-gray-500">Không có.</p>'}</div>
                    </div>

                    <div class="tdv-row">
                        <h3 class="tdv-row-title tdv-row-title--soon-prize">Sắp có giải (${sapCoGiai.length})<span class="tdv-row-subtitle">${soonPrizeTitleText}</span></h3>
                        <div class="tdv-row-body">${sapCoGiai.map(renderSapCoGiaiItem).join('') || '<p class="text-xs text-gray-500">Không có.</p>'}</div>
                    </div>

                    ${renderNeedsEffortRow(tiemNang, canCoGangNhieu)}
                </div>
            </div>
        `;

        container.innerHTML = html;
    }
};
--- END FILE: ./ui-thidua-vung.js ---

--- START FILE: ./ui.js ---
// Version 3.9 - Call renderCompetitionNameMappingTable in renderAdminPage
// Version 3.8 - Final Merge: Add renderAdminPage
// MODULE: UI FACADE (Mặt tiền Giao diện)

import { uiComponents } from './ui-components.js';
import { uiLuyke } from './ui-luyke.js';
import { uiSknv } from './ui-sknv.js';
import { uiRealtime } from './ui-realtime.js';
import { uiThiDuaVung } from './ui-thidua-vung.js';
import { uiCompetition } from './ui-competition.js';
import { appState } from './state.js'; // <<< GĐ 4: Đã thêm
import { firebase } from './firebase.js'; // <<< GĐ 4: Đã thêm

// Gộp tất cả các hàm từ các module con vào một đối tượng 'ui' duy nhất.
const ui = {
    ...uiComponents,
    ...uiLuyke, 
    ...uiSknv,
    ...uiRealtime,
    ...uiThiDuaVung,
    ...uiCompetition,

    // === START: GIAI ĐOẠN 4 (MODIFIED v3.9) ===
    async renderAdminPage() {
        if (!appState.isAdmin) return;
        
        // Render bảng thống kê người dùng
        const users = await firebase.getAllUsers();
        this.renderUserStatsTable(users); // Hàm này nằm trong ui-components
        
        // Render các trình chỉnh sửa hướng dẫn (hàm cũ)
        this.renderAdminHelpEditors(); // Hàm này nằm trong ui-components

        // *** NEW (v3.9) ***
        // Render bảng ánh xạ tên thi đua
        this.renderCompetitionNameMappingTable(); // Hàm này nằm trong ui-components
        // *** END NEW ***
    }
    // === END: GIAI ĐOẠN 4 ===
};

// Xuất khẩu đối tượng 'ui' đã được hợp nhất.
export { ui };
--- END FILE: ./ui.js ---

--- START FILE: ./utils.js ---
// Version 3.3 - Make department sorting more robust
// MODULE: UTILITIES
// Chứa các hàm tiện ích chung không thuộc về logic hay giao diện cụ thể.
import { ui } from './ui.js';

export const utils = {
    getRandomBrightColor() {
        const colors = [
            '#ef4444', // red-500
            '#f97316', // orange-500
            '#eab308', // yellow-500
            '#84cc16', // lime-500
            '#22c55e', // green-500
            '#10b981', // emerald-500
            '#14b8a6', // teal-500
            '#06b6d4', // cyan-500
            '#3b82f6', // blue-500
            '#8b5cf6', // violet-500
            '#d946ef', // fuchsia-500
            '#ec4899', // pink-500
        ];
        return colors[Math.floor(Math.random() * colors.length)];
    },

    cleanCategoryName(name) {
        if (!name || typeof name !== 'string') return '';
        // Bỏ mã số, khoảng trắng thừa, và viết hoa chữ cái đầu mỗi từ.
        return name
            .replace(/^\d+\s*-\s*/, '')
            .trim()
            .replace(/\s+/g, ' ')
            .toLowerCase()
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    },

    exportTableToExcel(activeTabContent, fileName) {
        if (!activeTabContent) {
            ui.showNotification('Không tìm thấy tab đang hoạt động để xuất.', 'error');
            return;
        }
        let table = activeTabContent.querySelector('.department-block table, #sknv-summary-container table, #luyke-competition-content table, table');
        if (!table) {
            ui.showNotification('Không tìm thấy bảng dữ liệu trong tab này để xuất.', 'error');
            return;
        }
        try {
            const wb = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
            XLSX.writeFile(wb, `${fileName}.xlsx`);
            ui.showNotification(`Đã xuất file ${fileName}.xlsx thành công!`, 'success');
        } catch (e) {
            console.error('Lỗi xuất Excel:', e);
            ui.showNotification('Có lỗi xảy ra khi xuất file Excel.', 'error');
        }
    },

    // <<< START: UPDATED FUNCTION >>>
    getSortedDepartmentList(reportData) {
        const allDepts = [...new Set(reportData.map(item => item.boPhan).filter(Boolean))];

        allDepts.sort((a, b) => {
            const aIsPriority = a.includes('Tư Vấn - ĐM');
            const bIsPriority = b.includes('Tư Vấn - ĐM');

            if (aIsPriority && !bIsPriority) {
                return -1; // a comes first
            }
            if (!aIsPriority && bIsPriority) {
                return 1; // b comes first
            }
            // If both are priority or both are not, sort alphabetically
            return a.localeCompare(b);
        });

        return allDepts;
    },
    // <<< END: UPDATED FUNCTION >>>
};
--- END FILE: ./utils.js ---

--- START FILE: ./version.json ---
{
  "version": "3.5"
}

--- END FILE: ./version.json ---

